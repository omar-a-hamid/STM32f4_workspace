
RTOS_LIDAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  0800e358  0800e358  0001e358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea60  0800ea60  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea60  0800ea60  0001ea60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea68  0800ea68  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea68  0800ea68  0001ea68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea6c  0800ea6c  0001ea6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ea70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00005324  200001f0  200001f0  000201f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005514  20005514  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aeb9  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b72  00000000  00000000  0003b0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c8  00000000  00000000  0003ec48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001550  00000000  00000000  00040310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023eef  00000000  00000000  00041860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019016  00000000  00000000  0006574f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7fb1  00000000  00000000  0007e765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156716  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007690  00000000  00000000  00156768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e33c 	.word	0x0800e33c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800e33c 	.word	0x0800e33c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0


#if (LCD_DATA_BITS_MODE == 4)


	LCD_sendCommand(LCD_GO_TO_HOME);
 8000f90:	2002      	movs	r0, #2
 8000f92:	f000 f80b 	bl	8000fac <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
 8000f96:	2028      	movs	r0, #40	; 0x28
 8000f98:	f000 f808 	bl	8000fac <LCD_sendCommand>
#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
 8000f9c:	200c      	movs	r0, #12
 8000f9e:	f000 f805 	bl	8000fac <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 f802 	bl	8000fac <LCD_sendCommand>
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(unsigned char  command)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(10); /* delay for processing Tas = 50ns */
	 /* Enable LCD E=1 */
	HAL_Delay(10); /* delay for processing Tpw - Tdws = 190ns */
	HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_RESET);
#elif (LCD_DATA_BITS_MODE == 4)
	unsigned char val = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
#if (LCD_FIRST_DATA_PIN  == 999)
	val= command & 0xF0;
#elif (LCD_FIRST_DATA_PIN  == 222)
	val= (command>>4) & 0x0F;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	73fb      	strb	r3, [r7, #15]
#endif

		writePort_4bit(val);
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f8ea 	bl	800119c <writePort_4bit>
		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2104      	movs	r1, #4
 8000fcc:	481b      	ldr	r0, [pc, #108]	; (800103c <LCD_sendCommand+0x90>)
 8000fce:	f003 fb1d 	bl	800460c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4819      	ldr	r0, [pc, #100]	; (800103c <LCD_sendCommand+0x90>)
 8000fd8:	f003 fb18 	bl	800460c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4816      	ldr	r0, [pc, #88]	; (800103c <LCD_sendCommand+0x90>)
 8000fe2:	f003 fb13 	bl	800460c <HAL_GPIO_WritePin>

		/* Data Mode RS=1 */
		 /* write data to LCD so RW=0 */
		HAL_Delay(2); /* delay for processing Tas = 50ns */
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f002 fc6c 	bl	80038c4 <HAL_Delay>

		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2104      	movs	r1, #4
 8000ff0:	4812      	ldr	r0, [pc, #72]	; (800103c <LCD_sendCommand+0x90>)
 8000ff2:	f003 fb0b 	bl	800460c <HAL_GPIO_WritePin>

#if (LCD_FIRST_DATA_PIN  == 999)
		val= ((command<<4) & 0xF0);
#elif (LCD_FIRST_DATA_PIN  == 222)
		val= (command & 0x0F);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	f003 030f 	and.w	r3, r3, #15
 8000ffc:	73fb      	strb	r3, [r7, #15]
#endif
		writePort_4bit(val);
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f8cb 	bl	800119c <writePort_4bit>
		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2104      	movs	r1, #4
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <LCD_sendCommand+0x90>)
 800100c:	f003 fafe 	bl	800460c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2102      	movs	r1, #2
 8001014:	4809      	ldr	r0, [pc, #36]	; (800103c <LCD_sendCommand+0x90>)
 8001016:	f003 faf9 	bl	800460c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2101      	movs	r1, #1
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <LCD_sendCommand+0x90>)
 8001020:	f003 faf4 	bl	800460c <HAL_GPIO_WritePin>

		/* Data Mode RS=1 */
		 /* write data to LCD so RW=0 */
		HAL_Delay(2); /* delay for processing Tas = 50ns */
 8001024:	2002      	movs	r0, #2
 8001026:	f002 fc4d 	bl	80038c4 <HAL_Delay>

		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2104      	movs	r1, #4
 800102e:	4803      	ldr	r0, [pc, #12]	; (800103c <LCD_sendCommand+0x90>)
 8001030:	f003 faec 	bl	800460c <HAL_GPIO_WritePin>

#endif

}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40020c00 	.word	0x40020c00

08001040 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(unsigned char  data)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(10); /* delay for processing Tas = 50ns */
	 /* Enable LCD E=1 */
	HAL_Delay(10); /* delay for processing Tpw - Tdws = 190ns */
	HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_RESET);
#elif (LCD_DATA_BITS_MODE == 4)
	unsigned char val = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]
#if (LCD_FIRST_DATA_PIN  == 999)
	val= data & 0xF0;
#elif (LCD_FIRST_DATA_PIN  == 222)
	val= (data>>4) & 0x0F;
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	73fb      	strb	r3, [r7, #15]
#endif

		writePort_4bit(val);
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f8a0 	bl	800119c <writePort_4bit>
		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	2104      	movs	r1, #4
 8001060:	481b      	ldr	r0, [pc, #108]	; (80010d0 <LCD_displayCharacter+0x90>)
 8001062:	f003 fad3 	bl	800460c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2102      	movs	r1, #2
 800106a:	4819      	ldr	r0, [pc, #100]	; (80010d0 <LCD_displayCharacter+0x90>)
 800106c:	f003 face 	bl	800460c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2101      	movs	r1, #1
 8001074:	4816      	ldr	r0, [pc, #88]	; (80010d0 <LCD_displayCharacter+0x90>)
 8001076:	f003 fac9 	bl	800460c <HAL_GPIO_WritePin>

		/* Data Mode RS=1 */
		 /* write data to LCD so RW=0 */
		HAL_Delay(2);
 800107a:	2002      	movs	r0, #2
 800107c:	f002 fc22 	bl	80038c4 <HAL_Delay>
		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2104      	movs	r1, #4
 8001084:	4812      	ldr	r0, [pc, #72]	; (80010d0 <LCD_displayCharacter+0x90>)
 8001086:	f003 fac1 	bl	800460c <HAL_GPIO_WritePin>
#if (LCD_FIRST_DATA_PIN  == 999)
		val= ((data<<4) & 0xF0);
#elif (LCD_FIRST_DATA_PIN  == 222)
		val= (data & 0x0F);
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 030f 	and.w	r3, r3, #15
 8001090:	73fb      	strb	r3, [r7, #15]
#endif

		writePort_4bit(val);
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f881 	bl	800119c <writePort_4bit>
		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2104      	movs	r1, #4
 800109e:	480c      	ldr	r0, [pc, #48]	; (80010d0 <LCD_displayCharacter+0x90>)
 80010a0:	f003 fab4 	bl	800460c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2102      	movs	r1, #2
 80010a8:	4809      	ldr	r0, [pc, #36]	; (80010d0 <LCD_displayCharacter+0x90>)
 80010aa:	f003 faaf 	bl	800460c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2101      	movs	r1, #1
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <LCD_displayCharacter+0x90>)
 80010b4:	f003 faaa 	bl	800460c <HAL_GPIO_WritePin>

		/* Data Mode RS=1 */
		 /* write data to LCD so RW=0 */
		HAL_Delay(2); /* delay for processing Tas = 50ns */
 80010b8:	2002      	movs	r0, #2
 80010ba:	f002 fc03 	bl	80038c4 <HAL_Delay>

		HAL_GPIO_WritePin(LCD_E_PORT_ID,LCD_E_PIN_ID,GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2104      	movs	r1, #4
 80010c2:	4803      	ldr	r0, [pc, #12]	; (80010d0 <LCD_displayCharacter+0x90>)
 80010c4:	f003 faa2 	bl	800460c <HAL_GPIO_WritePin>

#endif
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40020c00 	.word	0x40020c00

080010d4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	unsigned char  i = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]
//	{
//		LCD_displayCharacter(Str[i]);
//		i++;
//	}
	/***************** Another Method ***********************/
	while((*Str) != '\0')
 80010e0:	e007      	b.n	80010f2 <LCD_displayString+0x1e>
	{
		LCD_displayCharacter(*Str);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff ffaa 	bl	8001040 <LCD_displayCharacter>
		Str++;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3301      	adds	r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
	while((*Str) != '\0')
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f3      	bne.n	80010e2 <LCD_displayString+0xe>
	}
	 /*********************************************************/
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(unsigned char  row,unsigned char  col)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
	unsigned char  lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b03      	cmp	r3, #3
 8001118:	d819      	bhi.n	800114e <LCD_moveCursor+0x4a>
 800111a:	a201      	add	r2, pc, #4	; (adr r2, 8001120 <LCD_moveCursor+0x1c>)
 800111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001120:	08001131 	.word	0x08001131
 8001124:	08001137 	.word	0x08001137
 8001128:	0800113f 	.word	0x0800113f
 800112c:	08001147 	.word	0x08001147
	{
	case 0:
		lcd_memory_address=col;
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	73fb      	strb	r3, [r7, #15]
		break;
 8001134:	e00b      	b.n	800114e <LCD_moveCursor+0x4a>
	case 1:
		lcd_memory_address=col+0x40;
 8001136:	79bb      	ldrb	r3, [r7, #6]
 8001138:	3340      	adds	r3, #64	; 0x40
 800113a:	73fb      	strb	r3, [r7, #15]
		break;
 800113c:	e007      	b.n	800114e <LCD_moveCursor+0x4a>
	case 2:
		lcd_memory_address=col+0x10;
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	3310      	adds	r3, #16
 8001142:	73fb      	strb	r3, [r7, #15]
		break;
 8001144:	e003      	b.n	800114e <LCD_moveCursor+0x4a>
	case 3:
		lcd_memory_address=col+0x50;
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	3350      	adds	r3, #80	; 0x50
 800114a:	73fb      	strb	r3, [r7, #15]
		break;
 800114c:	bf00      	nop
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001154:	b2db      	uxtb	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff28 	bl	8000fac <LCD_sendCommand>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(unsigned char  row,unsigned char  col,const char *Str)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	603a      	str	r2, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	460b      	mov	r3, r1
 8001172:	71bb      	strb	r3, [r7, #6]
	LCD_moveCursor(row,col); /* go to to the required LCD position */
 8001174:	79ba      	ldrb	r2, [r7, #6]
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ffc2 	bl	8001104 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f7ff ffa7 	bl	80010d4 <LCD_displayString>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	af00      	add	r7, sp, #0
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff ff0a 	bl	8000fac <LCD_sendCommand>
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <writePort_4bit>:
	HAL_GPIO_WritePin(DATA_PORT_ID, D1_PIN, ((datain>>1)&0x01));
	HAL_GPIO_WritePin(DATA_PORT_ID, D0_PIN, ((datain>>0)&0x01));

}
void writePort_4bit(unsigned char datain)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DATA_PORT_ID, D7_PIN, ((datain>>7)&0x01));
	HAL_GPIO_WritePin(DATA_PORT_ID, D6_PIN, ((datain>>6)&0x01));
	HAL_GPIO_WritePin(DATA_PORT_ID, D5_PIN, ((datain>>5)&0x01));
	HAL_GPIO_WritePin(DATA_PORT_ID, D4_PIN, ((datain>>4)&0x01));
#elif (LCD_FIRST_DATA_PIN  == 222)
	HAL_GPIO_WritePin(DATA_PORT_ID, D3_PIN, ((datain>>3)&0x01));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	2108      	movs	r1, #8
 80011b6:	4813      	ldr	r0, [pc, #76]	; (8001204 <writePort_4bit+0x68>)
 80011b8:	f003 fa28 	bl	800460c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_PORT_ID, D2_PIN, ((datain>>2)&0x01));
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	461a      	mov	r2, r3
 80011ca:	2104      	movs	r1, #4
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <writePort_4bit+0x68>)
 80011ce:	f003 fa1d 	bl	800460c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_PORT_ID, D1_PIN, ((datain>>1)&0x01));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	085b      	lsrs	r3, r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	461a      	mov	r2, r3
 80011e0:	2102      	movs	r1, #2
 80011e2:	4808      	ldr	r0, [pc, #32]	; (8001204 <writePort_4bit+0x68>)
 80011e4:	f003 fa12 	bl	800460c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DATA_PORT_ID, D0_PIN, ((datain>>0)&0x01));
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	2101      	movs	r1, #1
 80011f4:	4803      	ldr	r0, [pc, #12]	; (8001204 <writePort_4bit+0x68>)
 80011f6:	f003 fa09 	bl	800460c <HAL_GPIO_WritePin>
#endif
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40020400 	.word	0x40020400

08001208 <Lidar_get_distance>:

uint16_t Global_u16LidarDistance=500;
uint16_t strength;
uint16_t temp;

uint8_t Lidar_get_distance(uint8_t *buf, uint32_t len) {
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]

	uint32_t i = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]

	uint8_t error_state = ERROR_FRMAE;
 8001216:	2300      	movs	r3, #0
 8001218:	72fb      	strb	r3, [r7, #11]

	uint8_t chk_cal = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	72bb      	strb	r3, [r7, #10]

	/*check frame length  */
	if (TFMINI_DATA_Len == len) {
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2b09      	cmp	r3, #9
 8001222:	d14a      	bne.n	80012ba <Lidar_get_distance+0xb2>
		if ((TFMINT_DATA_HEAD == buf[0]) && (TFMINT_DATA_HEAD == buf[1])) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b59      	cmp	r3, #89	; 0x59
 800122a:	d146      	bne.n	80012ba <Lidar_get_distance+0xb2>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3301      	adds	r3, #1
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b59      	cmp	r3, #89	; 0x59
 8001234:	d141      	bne.n	80012ba <Lidar_get_distance+0xb2>
			for (i = 0; i < (TFMINI_DATA_Len - 1); i++) {
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	e009      	b.n	8001250 <Lidar_get_distance+0x48>
				chk_cal += buf[i];
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4413      	add	r3, r2
 8001242:	781a      	ldrb	r2, [r3, #0]
 8001244:	7abb      	ldrb	r3, [r7, #10]
 8001246:	4413      	add	r3, r2
 8001248:	72bb      	strb	r3, [r7, #10]
			for (i = 0; i < (TFMINI_DATA_Len - 1); i++) {
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b07      	cmp	r3, #7
 8001254:	d9f2      	bls.n	800123c <Lidar_get_distance+0x34>
			}
			/*check if sum of byte 0 to byte 7 =check sum*/
			if (chk_cal == buf[TFMINI_DATA_Len - 1]) {
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3308      	adds	r3, #8
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	7aba      	ldrb	r2, [r7, #10]
 800125e:	429a      	cmp	r2, r3
 8001260:	d12b      	bne.n	80012ba <Lidar_get_distance+0xb2>
				strength= buf[4] | (buf[5] << 8);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3304      	adds	r3, #4
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b21a      	sxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3305      	adds	r3, #5
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21b      	sxth	r3, r3
 8001278:	b29a      	uxth	r2, r3
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <Lidar_get_distance+0xc0>)
 800127c:	801a      	strh	r2, [r3, #0]
                temp=buf[6] | (buf[7] << 8);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3306      	adds	r3, #6
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b21a      	sxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	3307      	adds	r3, #7
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21b      	sxth	r3, r3
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <Lidar_get_distance+0xc4>)
 8001298:	801a      	strh	r2, [r3, #0]
				Global_u16LidarDistance = buf[2] | (buf[3] << 8);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3302      	adds	r3, #2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3303      	adds	r3, #3
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <Lidar_get_distance+0xc8>)
 80012b4:	801a      	strh	r2, [r3, #0]

				error_state = CORECT_FRAME;
 80012b6:	2301      	movs	r3, #1
 80012b8:	72fb      	strb	r3, [r7, #11]

				/*Error in frame */
			}
		}
	}
	return error_state;
 80012ba:	7afb      	ldrb	r3, [r7, #11]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	2000020c 	.word	0x2000020c
 80012cc:	2000020e 	.word	0x2000020e
 80012d0:	20000000 	.word	0x20000000

080012d4 <delay_us>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void delay_us (uint32_t time)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <delay_us+0x2c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim1) < time);
 80012e4:	bf00      	nop
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <delay_us+0x2c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d8f9      	bhi.n	80012e6 <delay_us+0x12>
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	2000024c 	.word	0x2000024c

08001304 <UltraSonic_Read_Left>:

/*In order to get Right_Distance the ultrasonic needs to set its trig pin high for 10us
 * then set it to low and then check the time taken and calculate Right_Distance with it */
void UltraSonic_Read_Left (void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Left_TRIG_PORT_ID, Left_TRIG_PIN_ID, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130e:	480b      	ldr	r0, [pc, #44]	; (800133c <UltraSonic_Read_Left+0x38>)
 8001310:	f003 f97c 	bl	800460c <HAL_GPIO_WritePin>
	delay_us(TRIG_PulseDuration);  // wait for 10 us
 8001314:	200a      	movs	r0, #10
 8001316:	f7ff ffdd 	bl	80012d4 <delay_us>
	HAL_GPIO_WritePin(Left_TRIG_PORT_ID, Left_TRIG_PIN_ID, GPIO_PIN_RESET);  // pull the TRIG pin low
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001320:	4806      	ldr	r0, [pc, #24]	; (800133c <UltraSonic_Read_Left+0x38>)
 8001322:	f003 f973 	bl	800460c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <UltraSonic_Read_Left+0x3c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68da      	ldr	r2, [r3, #12]
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <UltraSonic_Read_Left+0x3c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f042 0204 	orr.w	r2, r2, #4
 8001334:	60da      	str	r2, [r3, #12]
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	2000024c 	.word	0x2000024c

08001344 <UltraSonic_Read_Right>:
void UltraSonic_Read_Right (void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Right_TRIG_PORT_ID, Right_TRIG_PIN_ID, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800134e:	480b      	ldr	r0, [pc, #44]	; (800137c <UltraSonic_Read_Right+0x38>)
 8001350:	f003 f95c 	bl	800460c <HAL_GPIO_WritePin>
	delay_us(TRIG_PulseDuration);  // wait for 10 us
 8001354:	200a      	movs	r0, #10
 8001356:	f7ff ffbd 	bl	80012d4 <delay_us>
	HAL_GPIO_WritePin(Right_TRIG_PORT_ID, Right_TRIG_PIN_ID, GPIO_PIN_RESET);  // pull the TRIG pin low
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001360:	4806      	ldr	r0, [pc, #24]	; (800137c <UltraSonic_Read_Right+0x38>)
 8001362:	f003 f953 	bl	800460c <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <UltraSonic_Read_Right+0x3c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68da      	ldr	r2, [r3, #12]
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <UltraSonic_Read_Right+0x3c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0202 	orr.w	r2, r2, #2
 8001374:	60da      	str	r2, [r3, #12]
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000
 8001380:	2000024c 	.word	0x2000024c
 8001384:	00000000 	.word	0x00000000

08001388 <HAL_TIM_IC_CaptureCallback>:
 * as it needs to capture the rising edge 1st and stores its time in Right_IC_Val1
 * then polarity is changed in order to capture the falling edge and stores its occurrence time in Right_IC_Val2
 * then their Right_difference is the high pulse time. */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7f1b      	ldrb	r3, [r3, #28]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d179      	bne.n	800148c <HAL_TIM_IC_CaptureCallback+0x104>
	{
		// To check if the first value is not captured yet
		if (Right_First_Captured_Flag==0)
 8001398:	4b8f      	ldr	r3, [pc, #572]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d11a      	bne.n	80013d6 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			// stores the first value
			Right_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80013a0:	2100      	movs	r1, #0
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f004 fadc 	bl	8005960 <HAL_TIM_ReadCapturedValue>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a8c      	ldr	r2, [pc, #560]	; (80015dc <HAL_TIM_IC_CaptureCallback+0x254>)
 80013ac:	6013      	str	r3, [r2, #0]
			// set the first captured as true as we now needs to capture the falling edge
			Right_First_Captured_Flag = 1;
 80013ae:	4b8a      	ldr	r3, [pc, #552]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6a1a      	ldr	r2, [r3, #32]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 020a 	bic.w	r2, r2, #10
 80013c2:	621a      	str	r2, [r3, #32]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a1a      	ldr	r2, [r3, #32]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f042 0202 	orr.w	r2, r2, #2
 80013d2:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
					// xQueueSendFromISR(xDistanceQueue, &Rear_Distance, NULL);
				}
			}

}
 80013d4:	e173      	b.n	80016be <HAL_TIM_IC_CaptureCallback+0x336>
		else if (Right_First_Captured_Flag==1)
 80013d6:	4b80      	ldr	r3, [pc, #512]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	f040 816f 	bne.w	80016be <HAL_TIM_IC_CaptureCallback+0x336>
			Right_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80013e0:	2100      	movs	r1, #0
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f004 fabc 	bl	8005960 <HAL_TIM_ReadCapturedValue>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a7d      	ldr	r2, [pc, #500]	; (80015e0 <HAL_TIM_IC_CaptureCallback+0x258>)
 80013ec:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2200      	movs	r2, #0
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
			if (Right_IC_Val2 > Right_IC_Val1)
 80013f6:	4b7a      	ldr	r3, [pc, #488]	; (80015e0 <HAL_TIM_IC_CaptureCallback+0x258>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b78      	ldr	r3, [pc, #480]	; (80015dc <HAL_TIM_IC_CaptureCallback+0x254>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d907      	bls.n	8001412 <HAL_TIM_IC_CaptureCallback+0x8a>
				Right_difference = Right_IC_Val2-Right_IC_Val1;
 8001402:	4b77      	ldr	r3, [pc, #476]	; (80015e0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b75      	ldr	r3, [pc, #468]	; (80015dc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	4a75      	ldr	r2, [pc, #468]	; (80015e4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	e00f      	b.n	8001432 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (Right_IC_Val1 > Right_IC_Val2)
 8001412:	4b72      	ldr	r3, [pc, #456]	; (80015dc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4b72      	ldr	r3, [pc, #456]	; (80015e0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d909      	bls.n	8001432 <HAL_TIM_IC_CaptureCallback+0xaa>
				Right_difference = (0xffff - Right_IC_Val1) + Right_IC_Val2;
 800141e:	4b70      	ldr	r3, [pc, #448]	; (80015e0 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b6e      	ldr	r3, [pc, #440]	; (80015dc <HAL_TIM_IC_CaptureCallback+0x254>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800142c:	33ff      	adds	r3, #255	; 0xff
 800142e:	4a6d      	ldr	r2, [pc, #436]	; (80015e4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001430:	6013      	str	r3, [r2, #0]
			Right_Distance = Right_difference * 0.0175;
 8001432:	4b6c      	ldr	r3, [pc, #432]	; (80015e4 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f864 	bl	8000504 <__aeabi_ui2d>
 800143c:	a364      	add	r3, pc, #400	; (adr r3, 80015d0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f8d9 	bl	80005f8 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff fbab 	bl	8000ba8 <__aeabi_d2uiz>
 8001452:	4603      	mov	r3, r0
 8001454:	4a64      	ldr	r2, [pc, #400]	; (80015e8 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001456:	6013      	str	r3, [r2, #0]
			Right_First_Captured_Flag = 0; // set it back to false
 8001458:	4b5f      	ldr	r3, [pc, #380]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x250>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6a1a      	ldr	r2, [r3, #32]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 020a 	bic.w	r2, r2, #10
 800146c:	621a      	str	r2, [r3, #32]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6a12      	ldr	r2, [r2, #32]
 8001478:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 800147a:	4b5c      	ldr	r3, [pc, #368]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x264>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	4b5a      	ldr	r3, [pc, #360]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x264>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0202 	bic.w	r2, r2, #2
 8001488:	60da      	str	r2, [r3, #12]
}
 800148a:	e118      	b.n	80016be <HAL_TIM_IC_CaptureCallback+0x336>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7f1b      	ldrb	r3, [r3, #28]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d179      	bne.n	8001588 <HAL_TIM_IC_CaptureCallback+0x200>
				if (Left_First_Captured_Flag==0)
 8001494:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d11a      	bne.n	80014d2 <HAL_TIM_IC_CaptureCallback+0x14a>
					Left_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800149c:	2104      	movs	r1, #4
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f004 fa5e 	bl	8005960 <HAL_TIM_ReadCapturedValue>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a53      	ldr	r2, [pc, #332]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80014a8:	6013      	str	r3, [r2, #0]
					Left_First_Captured_Flag = 1;
 80014aa:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6a1a      	ldr	r2, [r3, #32]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80014be:	621a      	str	r2, [r3, #32]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6a1a      	ldr	r2, [r3, #32]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0220 	orr.w	r2, r2, #32
 80014ce:	621a      	str	r2, [r3, #32]
}
 80014d0:	e0f5      	b.n	80016be <HAL_TIM_IC_CaptureCallback+0x336>
				else if (Left_First_Captured_Flag==1)
 80014d2:	4b47      	ldr	r3, [pc, #284]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x268>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	f040 80f1 	bne.w	80016be <HAL_TIM_IC_CaptureCallback+0x336>
					Left_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80014dc:	2104      	movs	r1, #4
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f004 fa3e 	bl	8005960 <HAL_TIM_ReadCapturedValue>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a44      	ldr	r2, [pc, #272]	; (80015f8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80014e8:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COUNTER(htim, 0);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
					if (Left_IC_Val2 > Left_IC_Val1)
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <HAL_TIM_IC_CaptureCallback+0x270>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d907      	bls.n	800150e <HAL_TIM_IC_CaptureCallback+0x186>
						Left_difference = Left_IC_Val2-Left_IC_Val1;
 80014fe:	4b3e      	ldr	r3, [pc, #248]	; (80015f8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b3c      	ldr	r3, [pc, #240]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	4a3c      	ldr	r2, [pc, #240]	; (80015fc <HAL_TIM_IC_CaptureCallback+0x274>)
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	e00f      	b.n	800152e <HAL_TIM_IC_CaptureCallback+0x1a6>
					else if (Left_IC_Val1 > Left_IC_Val2)
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <HAL_TIM_IC_CaptureCallback+0x270>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d909      	bls.n	800152e <HAL_TIM_IC_CaptureCallback+0x1a6>
						Left_difference = (0xffff - Left_IC_Val1) + Left_IC_Val2;
 800151a:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <HAL_TIM_IC_CaptureCallback+0x270>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001528:	33ff      	adds	r3, #255	; 0xff
 800152a:	4a34      	ldr	r2, [pc, #208]	; (80015fc <HAL_TIM_IC_CaptureCallback+0x274>)
 800152c:	6013      	str	r3, [r2, #0]
					Left_Distance = Left_difference * 0.0175;
 800152e:	4b33      	ldr	r3, [pc, #204]	; (80015fc <HAL_TIM_IC_CaptureCallback+0x274>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe ffe6 	bl	8000504 <__aeabi_ui2d>
 8001538:	a325      	add	r3, pc, #148	; (adr r3, 80015d0 <HAL_TIM_IC_CaptureCallback+0x248>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	f7ff f85b 	bl	80005f8 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fb2d 	bl	8000ba8 <__aeabi_d2uiz>
 800154e:	4603      	mov	r3, r0
 8001550:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001552:	6013      	str	r3, [r2, #0]
					Left_First_Captured_Flag = 0; // set it back to false
 8001554:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001568:	621a      	str	r2, [r3, #32]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6a12      	ldr	r2, [r2, #32]
 8001574:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC2);
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x264>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <HAL_TIM_IC_CaptureCallback+0x264>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0204 	bic.w	r2, r2, #4
 8001584:	60da      	str	r2, [r3, #12]
}
 8001586:	e09a      	b.n	80016be <HAL_TIM_IC_CaptureCallback+0x336>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7f1b      	ldrb	r3, [r3, #28]
 800158c:	2b04      	cmp	r3, #4
 800158e:	f040 8096 	bne.w	80016be <HAL_TIM_IC_CaptureCallback+0x336>
				if (Rear_First_Captured_Flag==0)
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d138      	bne.n	800160c <HAL_TIM_IC_CaptureCallback+0x284>
					Rear_IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800159a:	2108      	movs	r1, #8
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f004 f9df 	bl	8005960 <HAL_TIM_ReadCapturedValue>
 80015a2:	4603      	mov	r3, r0
 80015a4:	4a18      	ldr	r2, [pc, #96]	; (8001608 <HAL_TIM_IC_CaptureCallback+0x280>)
 80015a6:	6013      	str	r3, [r2, #0]
					Rear_First_Captured_Flag = 1;
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_TIM_IC_CaptureCallback+0x27c>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6a1a      	ldr	r2, [r3, #32]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80015bc:	621a      	str	r2, [r3, #32]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6a1a      	ldr	r2, [r3, #32]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015cc:	621a      	str	r2, [r3, #32]
}
 80015ce:	e076      	b.n	80016be <HAL_TIM_IC_CaptureCallback+0x336>
 80015d0:	1eb851ec 	.word	0x1eb851ec
 80015d4:	3f91eb85 	.word	0x3f91eb85
 80015d8:	2000021c 	.word	0x2000021c
 80015dc:	20000210 	.word	0x20000210
 80015e0:	20000214 	.word	0x20000214
 80015e4:	20000218 	.word	0x20000218
 80015e8:	20000220 	.word	0x20000220
 80015ec:	2000024c 	.word	0x2000024c
 80015f0:	20000230 	.word	0x20000230
 80015f4:	20000224 	.word	0x20000224
 80015f8:	20000228 	.word	0x20000228
 80015fc:	2000022c 	.word	0x2000022c
 8001600:	20000234 	.word	0x20000234
 8001604:	20000244 	.word	0x20000244
 8001608:	20000238 	.word	0x20000238
				else if (Rear_First_Captured_Flag==1)
 800160c:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_TIM_IC_CaptureCallback+0x348>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d154      	bne.n	80016be <HAL_TIM_IC_CaptureCallback+0x336>
					Rear_IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001614:	2108      	movs	r1, #8
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f004 f9a2 	bl	8005960 <HAL_TIM_ReadCapturedValue>
 800161c:	4603      	mov	r3, r0
 800161e:	4a2d      	ldr	r2, [pc, #180]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001620:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COUNTER(htim, 0);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
					if (Rear_IC_Val2 > Rear_IC_Val1)
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x34c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_TIM_IC_CaptureCallback+0x350>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d907      	bls.n	8001646 <HAL_TIM_IC_CaptureCallback+0x2be>
						Rear_difference = Rear_IC_Val2-Rear_IC_Val1;
 8001636:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_TIM_IC_CaptureCallback+0x350>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4a26      	ldr	r2, [pc, #152]	; (80016dc <HAL_TIM_IC_CaptureCallback+0x354>)
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e00f      	b.n	8001666 <HAL_TIM_IC_CaptureCallback+0x2de>
					else if (Rear_IC_Val1 > Rear_IC_Val2)
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_TIM_IC_CaptureCallback+0x350>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b22      	ldr	r3, [pc, #136]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x34c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d909      	bls.n	8001666 <HAL_TIM_IC_CaptureCallback+0x2de>
						Rear_difference = (0xffff - Rear_IC_Val1) + Rear_IC_Val2;
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_TIM_IC_CaptureCallback+0x350>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001660:	33ff      	adds	r3, #255	; 0xff
 8001662:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <HAL_TIM_IC_CaptureCallback+0x354>)
 8001664:	6013      	str	r3, [r2, #0]
					Rear_Distance = Rear_difference * 0.0174;
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_TIM_IC_CaptureCallback+0x354>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff4a 	bl	8000504 <__aeabi_ui2d>
 8001670:	a315      	add	r3, pc, #84	; (adr r3, 80016c8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe ffbf 	bl	80005f8 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff fa91 	bl	8000ba8 <__aeabi_d2uiz>
 8001686:	4603      	mov	r3, r0
 8001688:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <HAL_TIM_IC_CaptureCallback+0x358>)
 800168a:	6013      	str	r3, [r2, #0]
					Rear_First_Captured_Flag = 0; // set it back to false
 800168c:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_TIM_IC_CaptureCallback+0x348>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6a1a      	ldr	r2, [r3, #32]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 80016a0:	621a      	str	r2, [r3, #32]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6a12      	ldr	r2, [r2, #32]
 80016ac:	621a      	str	r2, [r3, #32]
					__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC3);
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0x35c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0x35c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0208 	bic.w	r2, r2, #8
 80016bc:	60da      	str	r2, [r3, #12]
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	3bcd35a8 	.word	0x3bcd35a8
 80016cc:	3f91d14e 	.word	0x3f91d14e
 80016d0:	20000244 	.word	0x20000244
 80016d4:	2000023c 	.word	0x2000023c
 80016d8:	20000238 	.word	0x20000238
 80016dc:	20000240 	.word	0x20000240
 80016e0:	20000248 	.word	0x20000248
 80016e4:	2000024c 	.word	0x2000024c

080016e8 <GGA_decode>:
	}
}


void GGA_decode(char *GGA_buffer, GGA_STRUCT *GGA)
{
 80016e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ec:	b094      	sub	sp, #80	; 0x50
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
	/***********separate each data to check the quality indicator************/
	int idx=0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	int i=0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
	int j = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	647b      	str	r3, [r7, #68]	; 0x44

	/*
	 * difference in time between cairo and GMT is 2 hours, 432000 seconds
	 */
	int GMT=300;
 8001700:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001704:	633b      	str	r3, [r7, #48]	; 0x30

	int hr=0;
 8001706:	2300      	movs	r3, #0
 8001708:	643b      	str	r3, [r7, #64]	; 0x40
	int min=0;
 800170a:	2300      	movs	r3, #0
 800170c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int sec=0;
 800170e:	2300      	movs	r3, #0
 8001710:	63bb      	str	r3, [r7, #56]	; 0x38

	int day_change = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
	 * buffer to store data from NMEA message
	 * max number of characters in each parameter is 12
	 */
	char data_buffer[12];

	idx=0;
 8001716:	2300      	movs	r3, #0
 8001718:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (GGA_buffer[idx] != ',')
 800171a:	e002      	b.n	8001722 <GGA_decode+0x3a>
	{
		idx++;  // 1st ',' // starting from index 0
 800171c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800171e:	3301      	adds	r3, #1
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (GGA_buffer[idx] != ',')
 8001722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	4413      	add	r3, r2
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b2c      	cmp	r3, #44	; 0x2c
 800172c:	d1f6      	bne.n	800171c <GGA_decode+0x34>
	}

	////*************GET TIME*****************/////

	idx++;
 800172e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001730:	3301      	adds	r3, #1
 8001732:	64fb      	str	r3, [r7, #76]	; 0x4c
	// reach the first number in time

	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	220c      	movs	r2, #12
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f008 fd45 	bl	800a1cc <memset>
	i=0; //resetting i
 8001742:	2300      	movs	r3, #0
 8001744:	64bb      	str	r3, [r7, #72]	; 0x48

	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001746:	e00f      	b.n	8001768 <GGA_decode+0x80>
	{
		data_buffer[i]= GGA_buffer[idx];
 8001748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	7819      	ldrb	r1, [r3, #0]
 8001750:	f107 020c 	add.w	r2, r7, #12
 8001754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001756:	4413      	add	r3, r2
 8001758:	460a      	mov	r2, r1
 800175a:	701a      	strb	r2, [r3, #0]
		i++;
 800175c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800175e:	3301      	adds	r3, #1
 8001760:	64bb      	str	r3, [r7, #72]	; 0x48
		idx++;
 8001762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001764:	3301      	adds	r3, #1
 8001766:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b2c      	cmp	r3, #44	; 0x2c
 8001772:	d1e9      	bne.n	8001748 <GGA_decode+0x60>

	/*
	 * atoi function converts an integer value from a string of characters.
	 */

	hr = (atoi(data_buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4618      	mov	r0, r3
 800177a:	f008 fcc7 	bl	800a10c <atoi>
 800177e:	4603      	mov	r3, r0
 8001780:	4aa9      	ldr	r2, [pc, #676]	; (8001a28 <GGA_decode+0x340>)
 8001782:	fb82 1203 	smull	r1, r2, r2, r3
 8001786:	1312      	asrs	r2, r2, #12
 8001788:	17db      	asrs	r3, r3, #31
 800178a:	1ad2      	subs	r2, r2, r3
 800178c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178e:	49a7      	ldr	r1, [pc, #668]	; (8001a2c <GGA_decode+0x344>)
 8001790:	fb81 0103 	smull	r0, r1, r1, r3
 8001794:	1149      	asrs	r1, r1, #5
 8001796:	17db      	asrs	r3, r3, #31
 8001798:	1acb      	subs	r3, r1, r3
 800179a:	4413      	add	r3, r2
 800179c:	643b      	str	r3, [r7, #64]	; 0x40

	min = ((atoi(data_buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	4618      	mov	r0, r3
 80017a4:	f008 fcb2 	bl	800a10c <atoi>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4aa0      	ldr	r2, [pc, #640]	; (8001a2c <GGA_decode+0x344>)
 80017ac:	fb82 1203 	smull	r1, r2, r2, r3
 80017b0:	1152      	asrs	r2, r2, #5
 80017b2:	17db      	asrs	r3, r3, #31
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	4a9d      	ldr	r2, [pc, #628]	; (8001a2c <GGA_decode+0x344>)
 80017b8:	fb82 1203 	smull	r1, r2, r2, r3
 80017bc:	1151      	asrs	r1, r2, #5
 80017be:	17da      	asrs	r2, r3, #31
 80017c0:	1a8a      	subs	r2, r1, r2
 80017c2:	2164      	movs	r1, #100	; 0x64
 80017c4:	fb01 f202 	mul.w	r2, r1, r2
 80017c8:	1a9a      	subs	r2, r3, r2
 80017ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017cc:	4b97      	ldr	r3, [pc, #604]	; (8001a2c <GGA_decode+0x344>)
 80017ce:	fb83 0301 	smull	r0, r3, r3, r1
 80017d2:	1158      	asrs	r0, r3, #5
 80017d4:	17cb      	asrs	r3, r1, #31
 80017d6:	1ac3      	subs	r3, r0, r3
 80017d8:	2064      	movs	r0, #100	; 0x64
 80017da:	fb00 f303 	mul.w	r3, r0, r3
 80017de:	1acb      	subs	r3, r1, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c

	sec = (atoi(data_buffer)%100);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4618      	mov	r0, r3
 80017ea:	f008 fc8f 	bl	800a10c <atoi>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a8e      	ldr	r2, [pc, #568]	; (8001a2c <GGA_decode+0x344>)
 80017f2:	fb82 1203 	smull	r1, r2, r2, r3
 80017f6:	1151      	asrs	r1, r2, #5
 80017f8:	17da      	asrs	r2, r3, #31
 80017fa:	1a8a      	subs	r2, r1, r2
 80017fc:	2164      	movs	r1, #100	; 0x64
 80017fe:	fb01 f202 	mul.w	r2, r1, r2
 8001802:	1a9b      	subs	r3, r3, r2
 8001804:	63bb      	str	r3, [r7, #56]	; 0x38

	if (sec > 59)
 8001806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001808:	2b3b      	cmp	r3, #59	; 0x3b
 800180a:	dd05      	ble.n	8001818 <GGA_decode+0x130>
	{
		sec -= 60;
 800180c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800180e:	3b3c      	subs	r3, #60	; 0x3c
 8001810:	63bb      	str	r3, [r7, #56]	; 0x38
		min++;
 8001812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001814:	3301      	adds	r3, #1
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	if (min > 59)
 8001818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800181a:	2b3b      	cmp	r3, #59	; 0x3b
 800181c:	dd05      	ble.n	800182a <GGA_decode+0x142>
	{
		min -= 60;
 800181e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001820:	3b3c      	subs	r3, #60	; 0x3c
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
		hr++;
 8001824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001826:	3301      	adds	r3, #1
 8001828:	643b      	str	r3, [r7, #64]	; 0x40
	}
	if (hr<0)
 800182a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800182c:	2b00      	cmp	r3, #0
 800182e:	da05      	bge.n	800183c <GGA_decode+0x154>
	{
		hr+=24;
 8001830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001832:	3318      	adds	r3, #24
 8001834:	643b      	str	r3, [r7, #64]	; 0x40
		day_change--;
 8001836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001838:	3b01      	subs	r3, #1
 800183a:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (hr>=24)
 800183c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800183e:	2b17      	cmp	r3, #23
 8001840:	dd05      	ble.n	800184e <GGA_decode+0x166>
	{
		hr-=24;;
 8001842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001844:	3b18      	subs	r3, #24
 8001846:	643b      	str	r3, [r7, #64]	; 0x40
		day_change++;
 8001848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184a:	3301      	adds	r3, #1
 800184c:	637b      	str	r3, [r7, #52]	; 0x34

	/*
	 * passing the time data values to GGA structure
	 */

	GGA->time.hour = hr;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001852:	601a      	str	r2, [r3, #0]
	GGA->time.minuit = min;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001858:	605a      	str	r2, [r3, #4]
	GGA->time.second = sec;
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800185e:	609a      	str	r2, [r3, #8]

	////*************GET LATITUDE*****************/////

	idx++;
 8001860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001862:	3301      	adds	r3, #1
 8001864:	64fb      	str	r3, [r7, #76]	; 0x4c
	// reach the first number in latitude

	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	220c      	movs	r2, #12
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f008 fcac 	bl	800a1cc <memset>
	i=0; //resetting i
 8001874:	2300      	movs	r3, #0
 8001876:	64bb      	str	r3, [r7, #72]	; 0x48

	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001878:	e00f      	b.n	800189a <GGA_decode+0x1b2>
	{
		data_buffer[i]= GGA_buffer[idx];
 800187a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	4413      	add	r3, r2
 8001880:	7819      	ldrb	r1, [r3, #0]
 8001882:	f107 020c 	add.w	r2, r7, #12
 8001886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001888:	4413      	add	r3, r2
 800188a:	460a      	mov	r2, r1
 800188c:	701a      	strb	r2, [r3, #0]
		i++;
 800188e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001890:	3301      	adds	r3, #1
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
		idx++;
 8001894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001896:	3301      	adds	r3, #1
 8001898:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 800189a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b2c      	cmp	r3, #44	; 0x2c
 80018a4:	d1e9      	bne.n	800187a <GGA_decode+0x192>
	}
	/*
	 * error for str length
	 */
	temp = (atoi(data_buffer));   // change the buffer to the number. It will only convert to integers
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	4618      	mov	r0, r3
 80018ac:	f008 fc2e 	bl	800a10c <atoi>
 80018b0:	4603      	mov	r3, r0
 80018b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

	j = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	647b      	str	r3, [r7, #68]	; 0x44

	/*
	 * counting the number of digits before the decimal
	 */
	while (data_buffer[j] != '.')
 80018b8:	e002      	b.n	80018c0 <GGA_decode+0x1d8>
	{
		j++;
 80018ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018bc:	3301      	adds	r3, #1
 80018be:	647b      	str	r3, [r7, #68]	; 0x44
	while (data_buffer[j] != '.')
 80018c0:	f107 020c 	add.w	r2, r7, #12
 80018c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b2e      	cmp	r3, #46	; 0x2e
 80018cc:	d1f5      	bne.n	80018ba <GGA_decode+0x1d2>
	}
	j++;
 80018ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d0:	3301      	adds	r3, #1
 80018d2:	647b      	str	r3, [r7, #68]	; 0x44

	decimal_length = (strlen(data_buffer))-j;  // calculate the number of digit after decimal
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fc79 	bl	80001d0 <strlen>
 80018de:	4602      	mov	r2, r0
 80018e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28

	decimal = atoi ((char *) data_buffer+j);  // separate the decimal numbers from the data_buffer
 80018e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e8:	f107 020c 	add.w	r2, r7, #12
 80018ec:	4413      	add	r3, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f008 fc0c 	bl	800a10c <atoi>
 80018f4:	6278      	str	r0, [r7, #36]	; 0x24
	 * latitude from NMEA is 1234.5678
	 * temp =1234 -> 12.34
	 * decimal= 5678 -> 0.005678
	 * latitude = 12.345678
	 */
	latitude = (temp/100)+(((temp-((temp/100)*100))+(decimal/pow(10, (decimal_length))))/60);
 80018f6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80018fa:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <GGA_decode+0x344>)
 80018fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001900:	1152      	asrs	r2, r2, #5
 8001902:	17db      	asrs	r3, r3, #31
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	b21b      	sxth	r3, r3
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe0b 	bl	8000524 <__aeabi_i2d>
 800190e:	4604      	mov	r4, r0
 8001910:	460d      	mov	r5, r1
 8001912:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001916:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800191a:	4944      	ldr	r1, [pc, #272]	; (8001a2c <GGA_decode+0x344>)
 800191c:	fb81 0103 	smull	r0, r1, r1, r3
 8001920:	1149      	asrs	r1, r1, #5
 8001922:	17db      	asrs	r3, r3, #31
 8001924:	1acb      	subs	r3, r1, r3
 8001926:	b21b      	sxth	r3, r3
 8001928:	4619      	mov	r1, r3
 800192a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fdf5 	bl	8000524 <__aeabi_i2d>
 800193a:	4680      	mov	r8, r0
 800193c:	4689      	mov	r9, r1
 800193e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001940:	f7fe fdf0 	bl	8000524 <__aeabi_i2d>
 8001944:	4682      	mov	sl, r0
 8001946:	468b      	mov	fp, r1
 8001948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800194a:	f7fe fdeb 	bl	8000524 <__aeabi_i2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	ec43 2b11 	vmov	d1, r2, r3
 8001956:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8001a20 <GGA_decode+0x338>
 800195a:	f00b fdd5 	bl	800d508 <pow>
 800195e:	ec53 2b10 	vmov	r2, r3, d0
 8001962:	4650      	mov	r0, sl
 8001964:	4659      	mov	r1, fp
 8001966:	f7fe ff71 	bl	800084c <__aeabi_ddiv>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4640      	mov	r0, r8
 8001970:	4649      	mov	r1, r9
 8001972:	f7fe fc8b 	bl	800028c <__adddf3>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <GGA_decode+0x348>)
 8001984:	f7fe ff62 	bl	800084c <__aeabi_ddiv>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f7fe fc7c 	bl	800028c <__adddf3>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff f924 	bl	8000be8 <__aeabi_d2f>
 80019a0:	4603      	mov	r3, r0
 80019a2:	623b      	str	r3, [r7, #32]

	GGA ->position.latitude = latitude;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6a3a      	ldr	r2, [r7, #32]
 80019a8:	611a      	str	r2, [r3, #16]

	////*************GET LATITUDE DIRECTION*****************/////
	idx++; //north or south
 80019aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ac:	3301      	adds	r3, #1
 80019ae:	64fb      	str	r3, [r7, #76]	; 0x4c
	GGA ->position.NORTH_SOUTH = data_buffer[idx];
 80019b0:	f107 020c 	add.w	r2, r7, #12
 80019b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b6:	4413      	add	r3, r2
 80019b8:	781a      	ldrb	r2, [r3, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	751a      	strb	r2, [r3, #20]
	idx++; // ',' after north or south
 80019be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c0:	3301      	adds	r3, #1
 80019c2:	64fb      	str	r3, [r7, #76]	; 0x4c

	////*************GET LONGTIUDE*****************/////

	idx++;
 80019c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c6:	3301      	adds	r3, #1
 80019c8:	64fb      	str	r3, [r7, #76]	; 0x4c
	// reach the first number in latitude

	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	220c      	movs	r2, #12
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f008 fbfa 	bl	800a1cc <memset>
	i=0; //resetting i
 80019d8:	2300      	movs	r3, #0
 80019da:	64bb      	str	r3, [r7, #72]	; 0x48

	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 80019dc:	e00f      	b.n	80019fe <GGA_decode+0x316>
	{
		data_buffer[i]= GGA_buffer[idx];
 80019de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	7819      	ldrb	r1, [r3, #0]
 80019e6:	f107 020c 	add.w	r2, r7, #12
 80019ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019ec:	4413      	add	r3, r2
 80019ee:	460a      	mov	r2, r1
 80019f0:	701a      	strb	r2, [r3, #0]
		i++;
 80019f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019f4:	3301      	adds	r3, #1
 80019f6:	64bb      	str	r3, [r7, #72]	; 0x48
		idx++;
 80019f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fa:	3301      	adds	r3, #1
 80019fc:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 80019fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b2c      	cmp	r3, #44	; 0x2c
 8001a08:	d1e9      	bne.n	80019de <GGA_decode+0x2f6>
	}
	/*
	 * error for str length
	 */
	temp = (atoi(data_buffer));   // change the buffer to the number. It will only convert to integers
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f008 fb7c 	bl	800a10c <atoi>
 8001a14:	4603      	mov	r3, r0
 8001a16:	85fb      	strh	r3, [r7, #46]	; 0x2e

	j = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	647b      	str	r3, [r7, #68]	; 0x44

	/*
	 * counting the number of digits before the decimal
	 */
	while (data_buffer[j] != '.')
 8001a1c:	e00d      	b.n	8001a3a <GGA_decode+0x352>
 8001a1e:	bf00      	nop
 8001a20:	00000000 	.word	0x00000000
 8001a24:	40240000 	.word	0x40240000
 8001a28:	68db8bad 	.word	0x68db8bad
 8001a2c:	51eb851f 	.word	0x51eb851f
 8001a30:	404e0000 	.word	0x404e0000
	{
		j++;
 8001a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a36:	3301      	adds	r3, #1
 8001a38:	647b      	str	r3, [r7, #68]	; 0x44
	while (data_buffer[j] != '.')
 8001a3a:	f107 020c 	add.w	r2, r7, #12
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b2e      	cmp	r3, #46	; 0x2e
 8001a46:	d1f5      	bne.n	8001a34 <GGA_decode+0x34c>
	}
	j++;
 8001a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	647b      	str	r3, [r7, #68]	; 0x44

	decimal_length = (strlen(data_buffer))-j;  // calculate the number of digit after decimal
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fbbc 	bl	80001d0 <strlen>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28

	decimal = atoi ((char *) data_buffer+j);  // separate the decimal numbers from the data_buffer
 8001a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a62:	f107 020c 	add.w	r2, r7, #12
 8001a66:	4413      	add	r3, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f008 fb4f 	bl	800a10c <atoi>
 8001a6e:	6278      	str	r0, [r7, #36]	; 0x24
	 * longitude from NMEA is 1234.5678
	 * temp =1234 -> 12.34
	 * decimal= 5678 -> 0.005678
	 * longitude = 12.345678
	 */
	longitude = (temp/100)+(((temp-((temp/100)*100))+(decimal/pow(10, (decimal_length))))/60);
 8001a70:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a74:	4ab8      	ldr	r2, [pc, #736]	; (8001d58 <GGA_decode+0x670>)
 8001a76:	fb82 1203 	smull	r1, r2, r2, r3
 8001a7a:	1152      	asrs	r2, r2, #5
 8001a7c:	17db      	asrs	r3, r3, #31
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	b21b      	sxth	r3, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd4e 	bl	8000524 <__aeabi_i2d>
 8001a88:	4604      	mov	r4, r0
 8001a8a:	460d      	mov	r5, r1
 8001a8c:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001a90:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001a94:	49b0      	ldr	r1, [pc, #704]	; (8001d58 <GGA_decode+0x670>)
 8001a96:	fb81 0103 	smull	r0, r1, r1, r3
 8001a9a:	1149      	asrs	r1, r1, #5
 8001a9c:	17db      	asrs	r3, r3, #31
 8001a9e:	1acb      	subs	r3, r1, r3
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001aa8:	fb01 f303 	mul.w	r3, r1, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd38 	bl	8000524 <__aeabi_i2d>
 8001ab4:	4680      	mov	r8, r0
 8001ab6:	4689      	mov	r9, r1
 8001ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001aba:	f7fe fd33 	bl	8000524 <__aeabi_i2d>
 8001abe:	4682      	mov	sl, r0
 8001ac0:	468b      	mov	fp, r1
 8001ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ac4:	f7fe fd2e 	bl	8000524 <__aeabi_i2d>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	ec43 2b11 	vmov	d1, r2, r3
 8001ad0:	ed9f 0b9f 	vldr	d0, [pc, #636]	; 8001d50 <GGA_decode+0x668>
 8001ad4:	f00b fd18 	bl	800d508 <pow>
 8001ad8:	ec53 2b10 	vmov	r2, r3, d0
 8001adc:	4650      	mov	r0, sl
 8001ade:	4659      	mov	r1, fp
 8001ae0:	f7fe feb4 	bl	800084c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4640      	mov	r0, r8
 8001aea:	4649      	mov	r1, r9
 8001aec:	f7fe fbce 	bl	800028c <__adddf3>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b97      	ldr	r3, [pc, #604]	; (8001d5c <GGA_decode+0x674>)
 8001afe:	f7fe fea5 	bl	800084c <__aeabi_ddiv>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4620      	mov	r0, r4
 8001b08:	4629      	mov	r1, r5
 8001b0a:	f7fe fbbf 	bl	800028c <__adddf3>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7ff f867 	bl	8000be8 <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	61fb      	str	r3, [r7, #28]

	GGA ->position.logitude = longitude;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	60da      	str	r2, [r3, #12]

	////*************GET LATITUDE DIRECTION*****************/////
	idx++; //east or west
 8001b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b26:	3301      	adds	r3, #1
 8001b28:	64fb      	str	r3, [r7, #76]	; 0x4c
	GGA ->position.EAST_WEST = data_buffer[idx];
 8001b2a:	f107 020c 	add.w	r2, r7, #12
 8001b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b30:	4413      	add	r3, r2
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	755a      	strb	r2, [r3, #21]
	idx++; // ',' after east or west
 8001b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	64fb      	str	r3, [r7, #76]	; 0x4c

	////*************POSITION FIX*****************/////

	idx++;  // reached the character to identify the fix
 8001b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b40:	3301      	adds	r3, #1
 8001b42:	64fb      	str	r3, [r7, #76]	; 0x4c

	if ((GGA_buffer[idx] == '1') || (GGA_buffer[idx] == '2') || (GGA_buffer[idx] == '6'))   // 0 indicates no fix yet
 8001b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b31      	cmp	r3, #49	; 0x31
 8001b4e:	d00b      	beq.n	8001b68 <GGA_decode+0x480>
 8001b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b32      	cmp	r3, #50	; 0x32
 8001b5a:	d005      	beq.n	8001b68 <GGA_decode+0x480>
 8001b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b36      	cmp	r3, #54	; 0x36
 8001b66:	d106      	bne.n	8001b76 <GGA_decode+0x48e>
	{
		GGA->quality_indicator = 1;   // fix available
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28
		idx++; // ',' after position fix
 8001b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b70:	3301      	adds	r3, #1
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b74:	e002      	b.n	8001b7c <GGA_decode+0x494>
	}
	else
	{
		GGA->quality_indicator = 0;   // If the fix is not available
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	////*************NUMBER OF SATTELITES*****************/////
	idx++; // number of sattelites
 8001b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b7e:	3301      	adds	r3, #1
 8001b80:	64fb      	str	r3, [r7, #76]	; 0x4c

	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	220c      	movs	r2, #12
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f008 fb1e 	bl	800a1cc <memset>
	i=0; //resetting i
 8001b90:	2300      	movs	r3, #0
 8001b92:	64bb      	str	r3, [r7, #72]	; 0x48

	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001b94:	e00f      	b.n	8001bb6 <GGA_decode+0x4ce>
	{
		data_buffer[i]= GGA_buffer[idx];
 8001b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	7819      	ldrb	r1, [r3, #0]
 8001b9e:	f107 020c 	add.w	r2, r7, #12
 8001ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ba4:	4413      	add	r3, r2
 8001ba6:	460a      	mov	r2, r1
 8001ba8:	701a      	strb	r2, [r3, #0]
		i++;
 8001baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bac:	3301      	adds	r3, #1
 8001bae:	64bb      	str	r3, [r7, #72]	; 0x48
		idx++;
 8001bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b2c      	cmp	r3, #44	; 0x2c
 8001bc0:	d1e9      	bne.n	8001b96 <GGA_decode+0x4ae>
	}
	GGA ->number_of_sattelites= atoi(data_buffer);
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f008 faa0 	bl	800a10c <atoi>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c
	idx++; // ',' after number of sat
 8001bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	64fb      	str	r3, [r7, #76]	; 0x4c

	////*************GET ALTITUDE*****************/////

	idx++;
 8001bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bda:	3301      	adds	r3, #1
 8001bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
	// reach the first number in altitude

	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	220c      	movs	r2, #12
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f008 faf0 	bl	800a1cc <memset>
	i=0; //resetting i
 8001bec:	2300      	movs	r3, #0
 8001bee:	64bb      	str	r3, [r7, #72]	; 0x48

	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001bf0:	e00f      	b.n	8001c12 <GGA_decode+0x52a>
	{
		data_buffer[i]= GGA_buffer[idx];
 8001bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	7819      	ldrb	r1, [r3, #0]
 8001bfa:	f107 020c 	add.w	r2, r7, #12
 8001bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c00:	4413      	add	r3, r2
 8001c02:	460a      	mov	r2, r1
 8001c04:	701a      	strb	r2, [r3, #0]
		i++;
 8001c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c08:	3301      	adds	r3, #1
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
		idx++;
 8001c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c0e:	3301      	adds	r3, #1
 8001c10:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(GGA_buffer[idx] != ',') //copying the time data in a buffer
 8001c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b2c      	cmp	r3, #44	; 0x2c
 8001c1c:	d1e9      	bne.n	8001bf2 <GGA_decode+0x50a>
	}
	/*
	 * error for str length
	 */
	temp = (atoi(data_buffer));   // change the buffer to the number. It will only convert to integers
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4618      	mov	r0, r3
 8001c24:	f008 fa72 	bl	800a10c <atoi>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	85fb      	strh	r3, [r7, #46]	; 0x2e

	j = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	647b      	str	r3, [r7, #68]	; 0x44

	/*
	 * counting the number of digits before the decimal
	 */
	while (data_buffer[j] != '.')
 8001c30:	e002      	b.n	8001c38 <GGA_decode+0x550>
	{
		j++;
 8001c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c34:	3301      	adds	r3, #1
 8001c36:	647b      	str	r3, [r7, #68]	; 0x44
	while (data_buffer[j] != '.')
 8001c38:	f107 020c 	add.w	r2, r7, #12
 8001c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b2e      	cmp	r3, #46	; 0x2e
 8001c44:	d1f5      	bne.n	8001c32 <GGA_decode+0x54a>
	}
	j++;
 8001c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c48:	3301      	adds	r3, #1
 8001c4a:	647b      	str	r3, [r7, #68]	; 0x44

	decimal_length = (strlen(data_buffer))-j;  // calculate the number of digit after decimal
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fabd 	bl	80001d0 <strlen>
 8001c56:	4602      	mov	r2, r0
 8001c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28

	decimal = atoi ((char *) data_buffer+j);  // separate the decimal numbers from the data_buffer
 8001c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c60:	f107 020c 	add.w	r2, r7, #12
 8001c64:	4413      	add	r3, r2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f008 fa50 	bl	800a10c <atoi>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24
	 * altitude from NMEA is 1234.5678
	 * temp =1234 -> 12.34
	 * decimal= 5678 -> 0.005678
	 * altitude = 12.345678
	 */
	altitude = (temp/100)+(((temp-((temp/100)*100))+(decimal/pow(10, (decimal_length))))/60);
 8001c6e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001c72:	4a39      	ldr	r2, [pc, #228]	; (8001d58 <GGA_decode+0x670>)
 8001c74:	fb82 1203 	smull	r1, r2, r2, r3
 8001c78:	1152      	asrs	r2, r2, #5
 8001c7a:	17db      	asrs	r3, r3, #31
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fc4f 	bl	8000524 <__aeabi_i2d>
 8001c86:	4604      	mov	r4, r0
 8001c88:	460d      	mov	r5, r1
 8001c8a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001c8e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001c92:	4931      	ldr	r1, [pc, #196]	; (8001d58 <GGA_decode+0x670>)
 8001c94:	fb81 0103 	smull	r0, r1, r1, r3
 8001c98:	1149      	asrs	r1, r1, #5
 8001c9a:	17db      	asrs	r3, r3, #31
 8001c9c:	1acb      	subs	r3, r1, r3
 8001c9e:	b21b      	sxth	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc39 	bl	8000524 <__aeabi_i2d>
 8001cb2:	4680      	mov	r8, r0
 8001cb4:	4689      	mov	r9, r1
 8001cb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cb8:	f7fe fc34 	bl	8000524 <__aeabi_i2d>
 8001cbc:	4682      	mov	sl, r0
 8001cbe:	468b      	mov	fp, r1
 8001cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cc2:	f7fe fc2f 	bl	8000524 <__aeabi_i2d>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	ec43 2b11 	vmov	d1, r2, r3
 8001cce:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001d50 <GGA_decode+0x668>
 8001cd2:	f00b fc19 	bl	800d508 <pow>
 8001cd6:	ec53 2b10 	vmov	r2, r3, d0
 8001cda:	4650      	mov	r0, sl
 8001cdc:	4659      	mov	r1, fp
 8001cde:	f7fe fdb5 	bl	800084c <__aeabi_ddiv>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4640      	mov	r0, r8
 8001ce8:	4649      	mov	r1, r9
 8001cea:	f7fe facf 	bl	800028c <__adddf3>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <GGA_decode+0x674>)
 8001cfc:	f7fe fda6 	bl	800084c <__aeabi_ddiv>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4620      	mov	r0, r4
 8001d06:	4629      	mov	r1, r5
 8001d08:	f7fe fac0 	bl	800028c <__adddf3>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7fe ff68 	bl	8000be8 <__aeabi_d2f>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	61bb      	str	r3, [r7, #24]

	GGA ->altitude.altitude = altitude;
 8001d1c:	69b8      	ldr	r0, [r7, #24]
 8001d1e:	f7fe fc13 	bl	8000548 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	e9c1 2306 	strd	r2, r3, [r1, #24]

	////*************GET ALTITUDE DIRECTION*****************/////
	idx++; //altitude unit
 8001d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d2e:	3301      	adds	r3, #1
 8001d30:	64fb      	str	r3, [r7, #76]	; 0x4c
	GGA ->altitude.meters = data_buffer[idx];
 8001d32:	f107 020c 	add.w	r2, r7, #12
 8001d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d38:	4413      	add	r3, r2
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f883 2020 	strb.w	r2, [r3, #32]




}
 8001d42:	bf00      	nop
 8001d44:	3750      	adds	r7, #80	; 0x50
 8001d46:	46bd      	mov	sp, r7
 8001d48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d4c:	f3af 8000 	nop.w
 8001d50:	00000000 	.word	0x00000000
 8001d54:	40240000 	.word	0x40240000
 8001d58:	51eb851f 	.word	0x51eb851f
 8001d5c:	404e0000 	.word	0x404e0000

08001d60 <RMC_decode>:

void RMC_decode(char *RMC_buffer, RMC_STRUCT *RMC)
{
 8001d60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d64:	b090      	sub	sp, #64	; 0x40
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	6039      	str	r1, [r7, #0]

	float speed;
	float course;


	int day=0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
	int month=0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
	int year=0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28

	int16_t temp;

	char data_buffer[12];
	int idx=0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	int i = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
	int j = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34

	idx = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001d88:	e002      	b.n	8001d90 <RMC_decode+0x30>
	{
		idx++;  // 1st ','
 8001d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b2c      	cmp	r3, #44	; 0x2c
 8001d9a:	d1f6      	bne.n	8001d8a <RMC_decode+0x2a>
	}

	idx++; //time
 8001d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9e:	3301      	adds	r3, #1
 8001da0:	63fb      	str	r3, [r7, #60]	; 0x3c


	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 8001da2:	f107 0308 	add.w	r3, r7, #8
 8001da6:	220c      	movs	r2, #12
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f008 fa0e 	bl	800a1cc <memset>
	i=0; //resetting i
 8001db0:	2300      	movs	r3, #0
 8001db2:	63bb      	str	r3, [r7, #56]	; 0x38

	while (RMC_buffer[idx] != ',')
 8001db4:	e002      	b.n	8001dbc <RMC_decode+0x5c>
	{
		idx++;  // ',' After time
 8001db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db8:	3301      	adds	r3, #1
 8001dba:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b2c      	cmp	r3, #44	; 0x2c
 8001dc6:	d1f6      	bne.n	8001db6 <RMC_decode+0x56>
	}

	idx++; //validity
 8001dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dca:	3301      	adds	r3, #1
 8001dcc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/*
	 *  'A' Indicates the data is valid
	 *  'V' indicates invalid data
	 */
	if (RMC_buffer[idx] == 'A')
 8001dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b41      	cmp	r3, #65	; 0x41
 8001dd8:	d103      	bne.n	8001de2 <RMC_decode+0x82>
	{
		RMC->validity_status= 1;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	e002      	b.n	8001de8 <RMC_decode+0x88>
	}
	else
	{
		RMC->validity_status =0;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
	}

	idx++; // ',' after validity
 8001de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dea:	3301      	adds	r3, #1
 8001dec:	63fb      	str	r3, [r7, #60]	; 0x3c
	/*
	 * skipping these parameters as we got them from GGA
	 */

	idx++; //latitude
 8001dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df0:	3301      	adds	r3, #1
 8001df2:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001df4:	e002      	b.n	8001dfc <RMC_decode+0x9c>
	{
		idx++;  // ',' after latitude
 8001df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001df8:	3301      	adds	r3, #1
 8001dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	4413      	add	r3, r2
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b2c      	cmp	r3, #44	; 0x2c
 8001e06:	d1f6      	bne.n	8001df6 <RMC_decode+0x96>
	}
	idx++; //north or south
 8001e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e0e:	e002      	b.n	8001e16 <RMC_decode+0xb6>
	{
		idx++;  // ',' after north or south
 8001e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e12:	3301      	adds	r3, #1
 8001e14:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b2c      	cmp	r3, #44	; 0x2c
 8001e20:	d1f6      	bne.n	8001e10 <RMC_decode+0xb0>
	}
	idx++; //longitude
 8001e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e24:	3301      	adds	r3, #1
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e28:	e002      	b.n	8001e30 <RMC_decode+0xd0>
	{
		idx++;  // ',' after longitude
 8001e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b2c      	cmp	r3, #44	; 0x2c
 8001e3a:	d1f6      	bne.n	8001e2a <RMC_decode+0xca>
	}
	idx++; //east or west
 8001e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3e:	3301      	adds	r3, #1
 8001e40:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e42:	e002      	b.n	8001e4a <RMC_decode+0xea>
	{
		idx++;  // ',' after east or west
 8001e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e46:	3301      	adds	r3, #1
 8001e48:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	4413      	add	r3, r2
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b2c      	cmp	r3, #44	; 0x2c
 8001e54:	d1f6      	bne.n	8001e44 <RMC_decode+0xe4>
	}

	/************************************************GET SPEED*****************************************************/
	idx++; // speed
 8001e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e58:	3301      	adds	r3, #1
 8001e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(data_buffer, '\0', 12);
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	220c      	movs	r2, #12
 8001e62:	2100      	movs	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f008 f9b1 	bl	800a1cc <memset>
	i=0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	63bb      	str	r3, [r7, #56]	; 0x38

	while (RMC_buffer[idx] != ',')
 8001e6e:	e00f      	b.n	8001e90 <RMC_decode+0x130>
	{
		data_buffer[i] = RMC_buffer[idx];
 8001e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	7819      	ldrb	r1, [r3, #0]
 8001e78:	f107 0208 	add.w	r2, r7, #8
 8001e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7e:	4413      	add	r3, r2
 8001e80:	460a      	mov	r2, r1
 8001e82:	701a      	strb	r2, [r3, #0]
		i++;
 8001e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e86:	3301      	adds	r3, #1
 8001e88:	63bb      	str	r3, [r7, #56]	; 0x38
		idx++;
 8001e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b2c      	cmp	r3, #44	; 0x2c
 8001e9a:	d1e9      	bne.n	8001e70 <RMC_decode+0x110>
	}

	//// if the speed have some data
	if (strlen (data_buffer) > 0)
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d06e      	beq.n	8001f84 <RMC_decode+0x224>
	{
		temp = (atoi(data_buffer));  // convert the data into the number
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f008 f92e 	bl	800a10c <atoi>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	84fb      	strh	r3, [r7, #38]	; 0x26
		j = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
		while (data_buffer[j] != '.')
 8001eb8:	e002      	b.n	8001ec0 <RMC_decode+0x160>
		{
			j++;   // same as above
 8001eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	637b      	str	r3, [r7, #52]	; 0x34
		while (data_buffer[j] != '.')
 8001ec0:	f107 0208 	add.w	r2, r7, #8
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec6:	4413      	add	r3, r2
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b2e      	cmp	r3, #46	; 0x2e
 8001ecc:	d1f5      	bne.n	8001eba <RMC_decode+0x15a>
		}
		j++;
 8001ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34

		decimal_length = (strlen(data_buffer))-j;
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe f979 	bl	80001d0 <strlen>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	623b      	str	r3, [r7, #32]
		decimal = atoi ((char *) data_buffer+j);
 8001ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee8:	f107 0208 	add.w	r2, r7, #8
 8001eec:	4413      	add	r3, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f008 f90c 	bl	800a10c <atoi>
 8001ef4:	61f8      	str	r0, [r7, #28]

		speed = temp + (decimal/pow(10, (decimal_length)));
 8001ef6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fb12 	bl	8000524 <__aeabi_i2d>
 8001f00:	4604      	mov	r4, r0
 8001f02:	460d      	mov	r5, r1
 8001f04:	69f8      	ldr	r0, [r7, #28]
 8001f06:	f7fe fb0d 	bl	8000524 <__aeabi_i2d>
 8001f0a:	4680      	mov	r8, r0
 8001f0c:	4689      	mov	r9, r1
 8001f0e:	6a38      	ldr	r0, [r7, #32]
 8001f10:	f7fe fb08 	bl	8000524 <__aeabi_i2d>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	ec43 2b11 	vmov	d1, r2, r3
 8001f1c:	ed9f 0b88 	vldr	d0, [pc, #544]	; 8002140 <RMC_decode+0x3e0>
 8001f20:	f00b faf2 	bl	800d508 <pow>
 8001f24:	ec53 2b10 	vmov	r2, r3, d0
 8001f28:	4640      	mov	r0, r8
 8001f2a:	4649      	mov	r1, r9
 8001f2c:	f7fe fc8e 	bl	800084c <__aeabi_ddiv>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4620      	mov	r0, r4
 8001f36:	4629      	mov	r1, r5
 8001f38:	f7fe f9a8 	bl	800028c <__adddf3>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4610      	mov	r0, r2
 8001f42:	4619      	mov	r1, r3
 8001f44:	f7fe fe50 	bl	8000be8 <__aeabi_d2f>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	61bb      	str	r3, [r7, #24]

		RMC->speed_over_gnd = floor(speed*2.1);
 8001f4c:	69b8      	ldr	r0, [r7, #24]
 8001f4e:	f7fe fafb 	bl	8000548 <__aeabi_f2d>
 8001f52:	a37f      	add	r3, pc, #508	; (adr r3, 8002150 <RMC_decode+0x3f0>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe fb4e 	bl	80005f8 <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	ec43 2b17 	vmov	d7, r2, r3
 8001f64:	eeb0 0a47 	vmov.f32	s0, s14
 8001f68:	eef0 0a67 	vmov.f32	s1, s15
 8001f6c:	f00b fa4c 	bl	800d408 <floor>
 8001f70:	ec53 2b10 	vmov	r2, r3, d0
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7fe fe36 	bl	8000be8 <__aeabi_d2f>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	e003      	b.n	8001f8c <RMC_decode+0x22c>
	}

	else RMC->speed_over_gnd = 0;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]

	/************************************************GET COURSE*****************************************************/
	idx++; // ','speed
 8001f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8e:	3301      	adds	r3, #1
 8001f90:	63fb      	str	r3, [r7, #60]	; 0x3c
//	memset(data_buffer, '\0', 12);
//	i=0;

	while (RMC_buffer[idx] != ',')
 8001f92:	e002      	b.n	8001f9a <RMC_decode+0x23a>
	{
//		data_buffer[i] = RMC_buffer[idx];
//		i++;
		idx++;
 8001f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f96:	3301      	adds	r3, #1
 8001f98:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMC_buffer[idx] != ',')
 8001f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b2c      	cmp	r3, #44	; 0x2c
 8001fa4:	d1f6      	bne.n	8001f94 <RMC_decode+0x234>
	}

	// if the speed have some data
	if (strlen (data_buffer) > 0)
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d05b      	beq.n	8002068 <RMC_decode+0x308>
	{
		temp = (atoi(data_buffer));  // convert the data into the number
 8001fb0:	f107 0308 	add.w	r3, r7, #8
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f008 f8a9 	bl	800a10c <atoi>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	84fb      	strh	r3, [r7, #38]	; 0x26
		j = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
		while (data_buffer[j] != '.')
 8001fc2:	e002      	b.n	8001fca <RMC_decode+0x26a>
		{
			j++;   // same as above
 8001fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	637b      	str	r3, [r7, #52]	; 0x34
		while (data_buffer[j] != '.')
 8001fca:	f107 0208 	add.w	r2, r7, #8
 8001fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd0:	4413      	add	r3, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8001fd6:	d1f5      	bne.n	8001fc4 <RMC_decode+0x264>
		}
		j++;
 8001fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fda:	3301      	adds	r3, #1
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34

		decimal_length = (strlen(data_buffer))-j;
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe f8f4 	bl	80001d0 <strlen>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	623b      	str	r3, [r7, #32]
		decimal = atoi ((char *) data_buffer+j);
 8001ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff2:	f107 0208 	add.w	r2, r7, #8
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f008 f887 	bl	800a10c <atoi>
 8001ffe:	61f8      	str	r0, [r7, #28]

		course = temp + (decimal/pow(10, (decimal_length)));
 8002000:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa8d 	bl	8000524 <__aeabi_i2d>
 800200a:	4604      	mov	r4, r0
 800200c:	460d      	mov	r5, r1
 800200e:	69f8      	ldr	r0, [r7, #28]
 8002010:	f7fe fa88 	bl	8000524 <__aeabi_i2d>
 8002014:	4680      	mov	r8, r0
 8002016:	4689      	mov	r9, r1
 8002018:	6a38      	ldr	r0, [r7, #32]
 800201a:	f7fe fa83 	bl	8000524 <__aeabi_i2d>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	ec43 2b11 	vmov	d1, r2, r3
 8002026:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8002140 <RMC_decode+0x3e0>
 800202a:	f00b fa6d 	bl	800d508 <pow>
 800202e:	ec53 2b10 	vmov	r2, r3, d0
 8002032:	4640      	mov	r0, r8
 8002034:	4649      	mov	r1, r9
 8002036:	f7fe fc09 	bl	800084c <__aeabi_ddiv>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4620      	mov	r0, r4
 8002040:	4629      	mov	r1, r5
 8002042:	f7fe f923 	bl	800028c <__adddf3>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fdcb 	bl	8000be8 <__aeabi_d2f>
 8002052:	4603      	mov	r3, r0
 8002054:	617b      	str	r3, [r7, #20]

		RMC->course_over_gnd = course;
 8002056:	edd7 7a05 	vldr	s15, [r7, #20]
 800205a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800205e:	ee17 2a90 	vmov	r2, s15
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	615a      	str	r2, [r3, #20]
 8002066:	e002      	b.n	800206e <RMC_decode+0x30e>
	}

	else RMC->course_over_gnd = 0;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]

	////****************************************GET DATE************************************************/////

	idx++;
 800206e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002070:	3301      	adds	r3, #1
 8002072:	63fb      	str	r3, [r7, #60]	; 0x3c

	// reach the first number in time
	i=0; //resetting i
 8002074:	2300      	movs	r3, #0
 8002076:	63bb      	str	r3, [r7, #56]	; 0x38

	memset(data_buffer, '\0', 12); //memset is a function to fill a block of memory with a particular value.
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	220c      	movs	r2, #12
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f008 f8a3 	bl	800a1cc <memset>

	while(RMC_buffer[idx] != ',') //copying the time data in a buffer
 8002086:	e00f      	b.n	80020a8 <RMC_decode+0x348>
	{
		data_buffer[i]= RMC_buffer[idx];
 8002088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	7819      	ldrb	r1, [r3, #0]
 8002090:	f107 0208 	add.w	r2, r7, #8
 8002094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002096:	4413      	add	r3, r2
 8002098:	460a      	mov	r2, r1
 800209a:	701a      	strb	r2, [r3, #0]
		i++;
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209e:	3301      	adds	r3, #1
 80020a0:	63bb      	str	r3, [r7, #56]	; 0x38
		idx++;
 80020a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a4:	3301      	adds	r3, #1
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(RMC_buffer[idx] != ',') //copying the time data in a buffer
 80020a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b2c      	cmp	r3, #44	; 0x2c
 80020b2:	d1e9      	bne.n	8002088 <RMC_decode+0x328>
	/*
	 * ex.
	 * date:131222
	 */

	day = atoi(data_buffer)/10000;   // get 13
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	4618      	mov	r0, r3
 80020ba:	f008 f827 	bl	800a10c <atoi>
 80020be:	4603      	mov	r3, r0
 80020c0:	4a21      	ldr	r2, [pc, #132]	; (8002148 <RMC_decode+0x3e8>)
 80020c2:	fb82 1203 	smull	r1, r2, r2, r3
 80020c6:	1312      	asrs	r2, r2, #12
 80020c8:	17db      	asrs	r3, r3, #31
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30

	month = ((atoi(data_buffer)/100)%100);  // get 12
 80020ce:	f107 0308 	add.w	r3, r7, #8
 80020d2:	4618      	mov	r0, r3
 80020d4:	f008 f81a 	bl	800a10c <atoi>
 80020d8:	4603      	mov	r3, r0
 80020da:	4a1c      	ldr	r2, [pc, #112]	; (800214c <RMC_decode+0x3ec>)
 80020dc:	fb82 1203 	smull	r1, r2, r2, r3
 80020e0:	1152      	asrs	r2, r2, #5
 80020e2:	17db      	asrs	r3, r3, #31
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	4a19      	ldr	r2, [pc, #100]	; (800214c <RMC_decode+0x3ec>)
 80020e8:	fb82 1203 	smull	r1, r2, r2, r3
 80020ec:	1151      	asrs	r1, r2, #5
 80020ee:	17da      	asrs	r2, r3, #31
 80020f0:	1a8a      	subs	r2, r1, r2
 80020f2:	2164      	movs	r1, #100	; 0x64
 80020f4:	fb01 f202 	mul.w	r2, r1, r2
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c

	year = (atoi(data_buffer)%100); //get 22
 80020fc:	f107 0308 	add.w	r3, r7, #8
 8002100:	4618      	mov	r0, r3
 8002102:	f008 f803 	bl	800a10c <atoi>
 8002106:	4603      	mov	r3, r0
 8002108:	4a10      	ldr	r2, [pc, #64]	; (800214c <RMC_decode+0x3ec>)
 800210a:	fb82 1203 	smull	r1, r2, r2, r3
 800210e:	1151      	asrs	r1, r2, #5
 8002110:	17da      	asrs	r2, r3, #31
 8002112:	1a8a      	subs	r2, r1, r2
 8002114:	2164      	movs	r1, #100	; 0x64
 8002116:	fb01 f202 	mul.w	r2, r1, r2
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28

	RMC->date.day=day;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002122:	601a      	str	r2, [r3, #0]
	RMC->date.month=month;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002128:	605a      	str	r2, [r3, #4]
	RMC->date.year=year;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800212e:	609a      	str	r2, [r3, #8]

}
 8002130:	bf00      	nop
 8002132:	3740      	adds	r7, #64	; 0x40
 8002134:	46bd      	mov	sp, r7
 8002136:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800213a:	bf00      	nop
 800213c:	f3af 8000 	nop.w
 8002140:	00000000 	.word	0x00000000
 8002144:	40240000 	.word	0x40240000
 8002148:	68db8bad 	.word	0x68db8bad
 800214c:	51eb851f 	.word	0x51eb851f
 8002150:	cccccccd 	.word	0xcccccccd
 8002154:	4000cccc 	.word	0x4000cccc

08002158 <HAL_UARTEx_RxEventCallback>:


/*buffer to receive data */
uint8_t g_usart1_rx_buf[USART_BUF_SIZE] = { 0 };
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <HAL_UARTEx_RxEventCallback+0x6c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d110      	bne.n	8002190 <HAL_UARTEx_RxEventCallback+0x38>
	{
		Flag=1;
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_UARTEx_RxEventCallback+0x70>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) RxBuf, RxBuf_SIZE);
 8002174:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002178:	4914      	ldr	r1, [pc, #80]	; (80021cc <HAL_UARTEx_RxEventCallback+0x74>)
 800217a:	4815      	ldr	r0, [pc, #84]	; (80021d0 <HAL_UARTEx_RxEventCallback+0x78>)
 800217c:	f004 f8e7 	bl	800634e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0208 	bic.w	r2, r2, #8
 800218e:	601a      	str	r2, [r3, #0]
	}
	if (huart->Instance == USART3)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <HAL_UARTEx_RxEventCallback+0x80>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d10f      	bne.n	80021ba <HAL_UARTEx_RxEventCallback+0x62>
	{
		Flag_Rec=1;
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_UARTEx_RxEventCallback+0x84>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t *) rx_data, sizeof(rx_data));
 80021a0:	220a      	movs	r2, #10
 80021a2:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_UARTEx_RxEventCallback+0x88>)
 80021a4:	480f      	ldr	r0, [pc, #60]	; (80021e4 <HAL_UARTEx_RxEventCallback+0x8c>)
 80021a6:	f004 f8d2 	bl	800634e <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <HAL_UARTEx_RxEventCallback+0x90>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_UARTEx_RxEventCallback+0x90>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0208 	bic.w	r2, r2, #8
 80021b8:	601a      	str	r2, [r3, #0]

	}
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40004400 	.word	0x40004400
 80021c8:	20000908 	.word	0x20000908
 80021cc:	200004f8 	.word	0x200004f8
 80021d0:	200002d8 	.word	0x200002d8
 80021d4:	200003c0 	.word	0x200003c0
 80021d8:	40004800 	.word	0x40004800
 80021dc:	20000b14 	.word	0x20000b14
 80021e0:	20000b08 	.word	0x20000b08
 80021e4:	2000031c 	.word	0x2000031c
 80021e8:	20000480 	.word	0x20000480

080021ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021f0:	f001 fb26 	bl	8003840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f4:	f000 f8ae 	bl	8002354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f8:	f000 fa64 	bl	80026c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80021fc:	f000 fa1c 	bl	8002638 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002200:	f000 f99c 	bl	800253c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002204:	f000 f910 	bl	8002428 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002208:	f000 f9c2 	bl	8002590 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800220c:	f000 f9ea 	bl	80025e4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuf, RxBuf_SIZE);
 8002210:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002214:	4933      	ldr	r1, [pc, #204]	; (80022e4 <main+0xf8>)
 8002216:	4834      	ldr	r0, [pc, #208]	; (80022e8 <main+0xfc>)
 8002218:	f004 f899 	bl	800634e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800221c:	4b33      	ldr	r3, [pc, #204]	; (80022ec <main+0x100>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b32      	ldr	r3, [pc, #200]	; (80022ec <main+0x100>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0208 	bic.w	r2, r2, #8
 800222a:	601a      	str	r2, [r3, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, rx_data, sizeof(rx_data));
 800222c:	220a      	movs	r2, #10
 800222e:	4930      	ldr	r1, [pc, #192]	; (80022f0 <main+0x104>)
 8002230:	4830      	ldr	r0, [pc, #192]	; (80022f4 <main+0x108>)
 8002232:	f004 f88c 	bl	800634e <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002236:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <main+0x10c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <main+0x10c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0208 	bic.w	r2, r2, #8
 8002244:	601a      	str	r2, [r3, #0]
	LCD_init(); /* Initialize the LCD */
 8002246:	f7fe fea1 	bl	8000f8c <LCD_init>
	LCD_displayStringRowColumn(0,0,"STM LCD Driver");
 800224a:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <main+0x110>)
 800224c:	2100      	movs	r1, #0
 800224e:	2000      	movs	r0, #0
 8002250:	f7fe ff88 	bl	8001164 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,3,"GRAD PROJECT");
 8002254:	4a2a      	ldr	r2, [pc, #168]	; (8002300 <main+0x114>)
 8002256:	2103      	movs	r1, #3
 8002258:	2001      	movs	r0, #1
 800225a:	f7fe ff83 	bl	8001164 <LCD_displayStringRowColumn>
	HAL_Delay(400); /* wait four seconds */
 800225e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002262:	f001 fb2f 	bl	80038c4 <HAL_Delay>

	LCD_clearScreen(); /* clear the LCD display */
 8002266:	f7fe ff92 	bl	800118e <LCD_clearScreen>
	LCD_displayString(" ");
 800226a:	4826      	ldr	r0, [pc, #152]	; (8002304 <main+0x118>)
 800226c:	f7fe ff32 	bl	80010d4 <LCD_displayString>
	LCD_displayStringRowColumn(1,3,"4-Bit Mode");
 8002270:	4a25      	ldr	r2, [pc, #148]	; (8002308 <main+0x11c>)
 8002272:	2103      	movs	r1, #3
 8002274:	2001      	movs	r0, #1
 8002276:	f7fe ff75 	bl	8001164 <LCD_displayStringRowColumn>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800227a:	f005 f9f9 	bl	8007670 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LidarREAD */
  LidarREADHandle = osThreadNew(StartLidarREAD, NULL, &LidarREAD_attributes);
 800227e:	4a23      	ldr	r2, [pc, #140]	; (800230c <main+0x120>)
 8002280:	2100      	movs	r1, #0
 8002282:	4823      	ldr	r0, [pc, #140]	; (8002310 <main+0x124>)
 8002284:	f005 fa3e 	bl	8007704 <osThreadNew>
 8002288:	4603      	mov	r3, r0
 800228a:	4a22      	ldr	r2, [pc, #136]	; (8002314 <main+0x128>)
 800228c:	6013      	str	r3, [r2, #0]

  /* creation of TakeAction_Lida */
  TakeAction_LidaHandle = osThreadNew(Start_TakeAction_Lidar, NULL, &TakeAction_Lida_attributes);
 800228e:	4a22      	ldr	r2, [pc, #136]	; (8002318 <main+0x12c>)
 8002290:	2100      	movs	r1, #0
 8002292:	4822      	ldr	r0, [pc, #136]	; (800231c <main+0x130>)
 8002294:	f005 fa36 	bl	8007704 <osThreadNew>
 8002298:	4603      	mov	r3, r0
 800229a:	4a21      	ldr	r2, [pc, #132]	; (8002320 <main+0x134>)
 800229c:	6013      	str	r3, [r2, #0]

  /* creation of Ultrasonic_Read */
  Ultrasonic_ReadHandle = osThreadNew(Start_Ultrasonic_Read, NULL, &Ultrasonic_Read_attributes);
 800229e:	4a21      	ldr	r2, [pc, #132]	; (8002324 <main+0x138>)
 80022a0:	2100      	movs	r1, #0
 80022a2:	4821      	ldr	r0, [pc, #132]	; (8002328 <main+0x13c>)
 80022a4:	f005 fa2e 	bl	8007704 <osThreadNew>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4a20      	ldr	r2, [pc, #128]	; (800232c <main+0x140>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* creation of GPS */
  GPSHandle = osThreadNew(Start_GPS, NULL, &GPS_attributes);
 80022ae:	4a20      	ldr	r2, [pc, #128]	; (8002330 <main+0x144>)
 80022b0:	2100      	movs	r1, #0
 80022b2:	4820      	ldr	r0, [pc, #128]	; (8002334 <main+0x148>)
 80022b4:	f005 fa26 	bl	8007704 <osThreadNew>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <main+0x14c>)
 80022bc:	6013      	str	r3, [r2, #0]

  /* creation of Send_Data */
  Send_DataHandle = osThreadNew(StartTask06, NULL, &Send_Data_attributes);
 80022be:	4a1f      	ldr	r2, [pc, #124]	; (800233c <main+0x150>)
 80022c0:	2100      	movs	r1, #0
 80022c2:	481f      	ldr	r0, [pc, #124]	; (8002340 <main+0x154>)
 80022c4:	f005 fa1e 	bl	8007704 <osThreadNew>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <main+0x158>)
 80022cc:	6013      	str	r3, [r2, #0]

  /* creation of Rec_Data */
  Rec_DataHandle = osThreadNew(Start_Rec_Transmit, NULL, &Rec_Data_attributes);
 80022ce:	4a1e      	ldr	r2, [pc, #120]	; (8002348 <main+0x15c>)
 80022d0:	2100      	movs	r1, #0
 80022d2:	481e      	ldr	r0, [pc, #120]	; (800234c <main+0x160>)
 80022d4:	f005 fa16 	bl	8007704 <osThreadNew>
 80022d8:	4603      	mov	r3, r0
 80022da:	4a1d      	ldr	r2, [pc, #116]	; (8002350 <main+0x164>)
 80022dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80022de:	f005 f9eb 	bl	80076b8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80022e2:	e7fe      	b.n	80022e2 <main+0xf6>
 80022e4:	200004f8 	.word	0x200004f8
 80022e8:	200002d8 	.word	0x200002d8
 80022ec:	200003c0 	.word	0x200003c0
 80022f0:	20000b08 	.word	0x20000b08
 80022f4:	2000031c 	.word	0x2000031c
 80022f8:	20000480 	.word	0x20000480
 80022fc:	0800e3a0 	.word	0x0800e3a0
 8002300:	0800e3b0 	.word	0x0800e3b0
 8002304:	0800e3c0 	.word	0x0800e3c0
 8002308:	0800e3c4 	.word	0x0800e3c4
 800230c:	0800e550 	.word	0x0800e550
 8002310:	0800286d 	.word	0x0800286d
 8002314:	200004e0 	.word	0x200004e0
 8002318:	0800e574 	.word	0x0800e574
 800231c:	080028e9 	.word	0x080028e9
 8002320:	200004e4 	.word	0x200004e4
 8002324:	0800e598 	.word	0x0800e598
 8002328:	08002995 	.word	0x08002995
 800232c:	200004e8 	.word	0x200004e8
 8002330:	0800e5bc 	.word	0x0800e5bc
 8002334:	080029cd 	.word	0x080029cd
 8002338:	200004ec 	.word	0x200004ec
 800233c:	0800e5e0 	.word	0x0800e5e0
 8002340:	08002b51 	.word	0x08002b51
 8002344:	200004f0 	.word	0x200004f0
 8002348:	0800e604 	.word	0x0800e604
 800234c:	08002cad 	.word	0x08002cad
 8002350:	200004f4 	.word	0x200004f4

08002354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b094      	sub	sp, #80	; 0x50
 8002358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800235a:	f107 0320 	add.w	r3, r7, #32
 800235e:	2230      	movs	r2, #48	; 0x30
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f007 ff32 	bl	800a1cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	2300      	movs	r3, #0
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	4b28      	ldr	r3, [pc, #160]	; (8002420 <SystemClock_Config+0xcc>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	4a27      	ldr	r2, [pc, #156]	; (8002420 <SystemClock_Config+0xcc>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002386:	6413      	str	r3, [r2, #64]	; 0x40
 8002388:	4b25      	ldr	r3, [pc, #148]	; (8002420 <SystemClock_Config+0xcc>)
 800238a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002394:	2300      	movs	r3, #0
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	4b22      	ldr	r3, [pc, #136]	; (8002424 <SystemClock_Config+0xd0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a21      	ldr	r2, [pc, #132]	; (8002424 <SystemClock_Config+0xd0>)
 800239e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <SystemClock_Config+0xd0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023b0:	2301      	movs	r3, #1
 80023b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ba:	2302      	movs	r3, #2
 80023bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023c4:	2304      	movs	r3, #4
 80023c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023c8:	23a8      	movs	r3, #168	; 0xa8
 80023ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023cc:	2302      	movs	r3, #2
 80023ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023d0:	2304      	movs	r3, #4
 80023d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d4:	f107 0320 	add.w	r3, r7, #32
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 f949 	bl	8004670 <HAL_RCC_OscConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023e4:	f000 fde6 	bl	8002fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e8:	230f      	movs	r3, #15
 80023ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ec:	2302      	movs	r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	2105      	movs	r1, #5
 8002406:	4618      	mov	r0, r3
 8002408:	f002 fbaa 	bl	8004b60 <HAL_RCC_ClockConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002412:	f000 fdcf 	bl	8002fb4 <Error_Handler>
  }
}
 8002416:	bf00      	nop
 8002418:	3750      	adds	r7, #80	; 0x50
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40007000 	.word	0x40007000

08002428 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800242e:	f107 0318 	add.w	r3, r7, #24
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800243c:	f107 0310 	add.w	r3, r7, #16
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002446:	463b      	mov	r3, r7
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002452:	4b38      	ldr	r3, [pc, #224]	; (8002534 <MX_TIM1_Init+0x10c>)
 8002454:	4a38      	ldr	r2, [pc, #224]	; (8002538 <MX_TIM1_Init+0x110>)
 8002456:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8002458:	4b36      	ldr	r3, [pc, #216]	; (8002534 <MX_TIM1_Init+0x10c>)
 800245a:	22a7      	movs	r2, #167	; 0xa7
 800245c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245e:	4b35      	ldr	r3, [pc, #212]	; (8002534 <MX_TIM1_Init+0x10c>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <MX_TIM1_Init+0x10c>)
 8002466:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800246a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246c:	4b31      	ldr	r3, [pc, #196]	; (8002534 <MX_TIM1_Init+0x10c>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <MX_TIM1_Init+0x10c>)
 8002474:	2200      	movs	r2, #0
 8002476:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002478:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <MX_TIM1_Init+0x10c>)
 800247a:	2200      	movs	r2, #0
 800247c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800247e:	482d      	ldr	r0, [pc, #180]	; (8002534 <MX_TIM1_Init+0x10c>)
 8002480:	f002 fdc0 	bl	8005004 <HAL_TIM_Base_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800248a:	f000 fd93 	bl	8002fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800248e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002492:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002494:	f107 0318 	add.w	r3, r7, #24
 8002498:	4619      	mov	r1, r3
 800249a:	4826      	ldr	r0, [pc, #152]	; (8002534 <MX_TIM1_Init+0x10c>)
 800249c:	f003 f998 	bl	80057d0 <HAL_TIM_ConfigClockSource>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80024a6:	f000 fd85 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80024aa:	4822      	ldr	r0, [pc, #136]	; (8002534 <MX_TIM1_Init+0x10c>)
 80024ac:	f002 fe6a 	bl	8005184 <HAL_TIM_IC_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80024b6:	f000 fd7d 	bl	8002fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	4619      	mov	r1, r3
 80024c8:	481a      	ldr	r0, [pc, #104]	; (8002534 <MX_TIM1_Init+0x10c>)
 80024ca:	f003 fd35 	bl	8005f38 <HAL_TIMEx_MasterConfigSynchronization>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80024d4:	f000 fd6e 	bl	8002fb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024d8:	2300      	movs	r3, #0
 80024da:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024dc:	2301      	movs	r3, #1
 80024de:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024e8:	463b      	mov	r3, r7
 80024ea:	2200      	movs	r2, #0
 80024ec:	4619      	mov	r1, r3
 80024ee:	4811      	ldr	r0, [pc, #68]	; (8002534 <MX_TIM1_Init+0x10c>)
 80024f0:	f003 f8d2 	bl	8005698 <HAL_TIM_IC_ConfigChannel>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80024fa:	f000 fd5b 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80024fe:	463b      	mov	r3, r7
 8002500:	2204      	movs	r2, #4
 8002502:	4619      	mov	r1, r3
 8002504:	480b      	ldr	r0, [pc, #44]	; (8002534 <MX_TIM1_Init+0x10c>)
 8002506:	f003 f8c7 	bl	8005698 <HAL_TIM_IC_ConfigChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8002510:	f000 fd50 	bl	8002fb4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002514:	463b      	mov	r3, r7
 8002516:	2208      	movs	r2, #8
 8002518:	4619      	mov	r1, r3
 800251a:	4806      	ldr	r0, [pc, #24]	; (8002534 <MX_TIM1_Init+0x10c>)
 800251c:	f003 f8bc 	bl	8005698 <HAL_TIM_IC_ConfigChannel>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8002526:	f000 fd45 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	3728      	adds	r7, #40	; 0x28
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	2000024c 	.word	0x2000024c
 8002538:	40010000 	.word	0x40010000

0800253c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <MX_USART1_UART_Init+0x50>)
 8002544:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002548:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800254c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002562:	220c      	movs	r2, #12
 8002564:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002566:	4b08      	ldr	r3, [pc, #32]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002572:	4805      	ldr	r0, [pc, #20]	; (8002588 <MX_USART1_UART_Init+0x4c>)
 8002574:	f003 fd70 	bl	8006058 <HAL_UART_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800257e:	f000 fd19 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000294 	.word	0x20000294
 800258c:	40011000 	.word	0x40011000

08002590 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <MX_USART2_UART_Init+0x50>)
 8002598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 800259c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025b6:	220c      	movs	r2, #12
 80025b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025c6:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_USART2_UART_Init+0x4c>)
 80025c8:	f003 fd46 	bl	8006058 <HAL_UART_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025d2:	f000 fcef 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200002d8 	.word	0x200002d8
 80025e0:	40004400 	.word	0x40004400

080025e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <MX_USART3_UART_Init+0x50>)
 80025ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 80025f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025f6:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025fc:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002602:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 800260a:	220c      	movs	r2, #12
 800260c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800261a:	4805      	ldr	r0, [pc, #20]	; (8002630 <MX_USART3_UART_Init+0x4c>)
 800261c:	f003 fd1c 	bl	8006058 <HAL_UART_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002626:	f000 fcc5 	bl	8002fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	2000031c 	.word	0x2000031c
 8002634:	40004800 	.word	0x40004800

08002638 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	607b      	str	r3, [r7, #4]
 8002642:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <MX_DMA_Init+0x88>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a1e      	ldr	r2, [pc, #120]	; (80026c0 <MX_DMA_Init+0x88>)
 8002648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <MX_DMA_Init+0x88>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	607b      	str	r3, [r7, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <MX_DMA_Init+0x88>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <MX_DMA_Init+0x88>)
 8002664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <MX_DMA_Init+0x88>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002676:	2200      	movs	r2, #0
 8002678:	2105      	movs	r1, #5
 800267a:	200c      	movs	r0, #12
 800267c:	f001 f9fe 	bl	8003a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002680:	200c      	movs	r0, #12
 8002682:	f001 fa17 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2105      	movs	r1, #5
 800268a:	200e      	movs	r0, #14
 800268c:	f001 f9f6 	bl	8003a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002690:	200e      	movs	r0, #14
 8002692:	f001 fa0f 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2105      	movs	r1, #5
 800269a:	2010      	movs	r0, #16
 800269c:	f001 f9ee 	bl	8003a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026a0:	2010      	movs	r0, #16
 80026a2:	f001 fa07 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2105      	movs	r1, #5
 80026aa:	203a      	movs	r0, #58	; 0x3a
 80026ac:	f001 f9e6 	bl	8003a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80026b0:	203a      	movs	r0, #58	; 0x3a
 80026b2:	f001 f9ff 	bl	8003ab4 <HAL_NVIC_EnableIRQ>

}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800

080026c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	; 0x30
 80026c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ca:	f107 031c 	add.w	r3, r7, #28
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <MX_GPIO_Init+0x190>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a5c      	ldr	r2, [pc, #368]	; (8002854 <MX_GPIO_Init+0x190>)
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b5a      	ldr	r3, [pc, #360]	; (8002854 <MX_GPIO_Init+0x190>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	4b56      	ldr	r3, [pc, #344]	; (8002854 <MX_GPIO_Init+0x190>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a55      	ldr	r2, [pc, #340]	; (8002854 <MX_GPIO_Init+0x190>)
 8002700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b53      	ldr	r3, [pc, #332]	; (8002854 <MX_GPIO_Init+0x190>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	4b4f      	ldr	r3, [pc, #316]	; (8002854 <MX_GPIO_Init+0x190>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a4e      	ldr	r2, [pc, #312]	; (8002854 <MX_GPIO_Init+0x190>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b4c      	ldr	r3, [pc, #304]	; (8002854 <MX_GPIO_Init+0x190>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	613b      	str	r3, [r7, #16]
 800272c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	4b48      	ldr	r3, [pc, #288]	; (8002854 <MX_GPIO_Init+0x190>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a47      	ldr	r2, [pc, #284]	; (8002854 <MX_GPIO_Init+0x190>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b45      	ldr	r3, [pc, #276]	; (8002854 <MX_GPIO_Init+0x190>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	4b41      	ldr	r3, [pc, #260]	; (8002854 <MX_GPIO_Init+0x190>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a40      	ldr	r2, [pc, #256]	; (8002854 <MX_GPIO_Init+0x190>)
 8002754:	f043 0310 	orr.w	r3, r3, #16
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <MX_GPIO_Init+0x190>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <MX_GPIO_Init+0x190>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a39      	ldr	r2, [pc, #228]	; (8002854 <MX_GPIO_Init+0x190>)
 8002770:	f043 0308 	orr.w	r3, r3, #8
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b37      	ldr	r3, [pc, #220]	; (8002854 <MX_GPIO_Init+0x190>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002782:	2200      	movs	r2, #0
 8002784:	210f      	movs	r1, #15
 8002786:	4834      	ldr	r0, [pc, #208]	; (8002858 <MX_GPIO_Init+0x194>)
 8002788:	f001 ff40 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800278c:	2200      	movs	r2, #0
 800278e:	210f      	movs	r1, #15
 8002790:	4832      	ldr	r0, [pc, #200]	; (800285c <MX_GPIO_Init+0x198>)
 8002792:	f001 ff3b 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8002796:	2200      	movs	r2, #0
 8002798:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 800279c:	4830      	ldr	r0, [pc, #192]	; (8002860 <MX_GPIO_Init+0x19c>)
 800279e:	f001 ff35 	bl	800460c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80027a2:	2200      	movs	r2, #0
 80027a4:	f24f 0107 	movw	r1, #61447	; 0xf007
 80027a8:	482e      	ldr	r0, [pc, #184]	; (8002864 <MX_GPIO_Init+0x1a0>)
 80027aa:	f001 ff2f 	bl	800460c <HAL_GPIO_WritePin>
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80027ae:	230f      	movs	r3, #15
 80027b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b2:	2301      	movs	r3, #1
 80027b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	4619      	mov	r1, r3
 80027c4:	4824      	ldr	r0, [pc, #144]	; (8002858 <MX_GPIO_Init+0x194>)
 80027c6:	f001 fd85 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027ca:	2301      	movs	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	4619      	mov	r1, r3
 80027de:	4822      	ldr	r0, [pc, #136]	; (8002868 <MX_GPIO_Init+0x1a4>)
 80027e0:	f001 fd78 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80027e4:	230f      	movs	r3, #15
 80027e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f4:	f107 031c 	add.w	r3, r7, #28
 80027f8:	4619      	mov	r1, r3
 80027fa:	4818      	ldr	r0, [pc, #96]	; (800285c <MX_GPIO_Init+0x198>)
 80027fc:	f001 fd6a 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8002800:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8002804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002806:	2301      	movs	r3, #1
 8002808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002812:	f107 031c 	add.w	r3, r7, #28
 8002816:	4619      	mov	r1, r3
 8002818:	4811      	ldr	r0, [pc, #68]	; (8002860 <MX_GPIO_Init+0x19c>)
 800281a:	f001 fd5b 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800281e:	f24f 0307 	movw	r3, #61447	; 0xf007
 8002822:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002824:	2301      	movs	r3, #1
 8002826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	4619      	mov	r1, r3
 8002836:	480b      	ldr	r0, [pc, #44]	; (8002864 <MX_GPIO_Init+0x1a0>)
 8002838:	f001 fd4c 	bl	80042d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800283c:	2200      	movs	r2, #0
 800283e:	2105      	movs	r1, #5
 8002840:	2006      	movs	r0, #6
 8002842:	f001 f91b 	bl	8003a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002846:	2006      	movs	r0, #6
 8002848:	f001 f934 	bl	8003ab4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800284c:	bf00      	nop
 800284e:	3730      	adds	r7, #48	; 0x30
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	40020800 	.word	0x40020800
 800285c:	40020400 	.word	0x40020400
 8002860:	40021000 	.word	0x40021000
 8002864:	40020c00 	.word	0x40020c00
 8002868:	40020000 	.word	0x40020000

0800286c <StartLidarREAD>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLidarREAD */
void StartLidarREAD(void *argument)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_DMA(&huart1, g_usart1_rx_buf, USART_BUF_SIZE);
 8002874:	2240      	movs	r2, #64	; 0x40
 8002876:	4916      	ldr	r1, [pc, #88]	; (80028d0 <StartLidarREAD+0x64>)
 8002878:	4816      	ldr	r0, [pc, #88]	; (80028d4 <StartLidarREAD+0x68>)
 800287a:	f003 fcb9 	bl	80061f0 <HAL_UART_Receive_DMA>

		/* enable uart IDLE  interrupt */
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <StartLidarREAD+0x68>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <StartLidarREAD+0x68>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0210 	orr.w	r2, r2, #16
 800288c:	60da      	str	r2, [r3, #12]
		if(Global_u16LidarDistance <=100)
 800288e:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <StartLidarREAD+0x6c>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d805      	bhi.n	80028a2 <StartLidarREAD+0x36>
		{
			Flag_obstacle=1;
 8002896:	4b11      	ldr	r3, [pc, #68]	; (80028dc <StartLidarREAD+0x70>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
			Flag_Drive=0;
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <StartLidarREAD+0x74>)
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
		}
		if(Global_u16LidarDistance < 1200)
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <StartLidarREAD+0x6c>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80028aa:	d203      	bcs.n	80028b4 <StartLidarREAD+0x48>
		{
			Check_Front_Obs=1;
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <StartLidarREAD+0x78>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	e008      	b.n	80028c6 <StartLidarREAD+0x5a>
		}
		else if(Global_u16LidarDistance == 65535)
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <StartLidarREAD+0x6c>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028bc:	4293      	cmp	r3, r2
 80028be:	d102      	bne.n	80028c6 <StartLidarREAD+0x5a>
		{
			Check_Front_Obs=0;
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <StartLidarREAD+0x78>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
		}
		osDelay(800);
 80028c6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80028ca:	f004 ffad 	bl	8007828 <osDelay>
		HAL_UART_Receive_DMA(&huart1, g_usart1_rx_buf, USART_BUF_SIZE);
 80028ce:	e7d1      	b.n	8002874 <StartLidarREAD+0x8>
 80028d0:	20000b24 	.word	0x20000b24
 80028d4:	20000294 	.word	0x20000294
 80028d8:	20000000 	.word	0x20000000
 80028dc:	20000b18 	.word	0x20000b18
 80028e0:	20000b1c 	.word	0x20000b1c
 80028e4:	20000b04 	.word	0x20000b04

080028e8 <Start_TakeAction_Lidar>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_TakeAction_Lidar */
void Start_TakeAction_Lidar(void *argument)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_TakeAction_Lidar */
	/* Infinite loop */
	for(;;)
	{
		if (Flag_obstacle == 1)
 80028f0:	4b21      	ldr	r3, [pc, #132]	; (8002978 <Start_TakeAction_Lidar+0x90>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d128      	bne.n	800294a <Start_TakeAction_Lidar+0x62>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,SET);
 80028f8:	2201      	movs	r2, #1
 80028fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028fe:	481f      	ldr	r0, [pc, #124]	; (800297c <Start_TakeAction_Lidar+0x94>)
 8002900:	f001 fe84 	bl	800460c <HAL_GPIO_WritePin>
      breaking_state();       //A.hamid
 8002904:	f000 fa78 	bl	8002df8 <breaking_state>

			LCD_clearScreen(); /* clear the LCD display */
 8002908:	f7fe fc41 	bl	800118e <LCD_clearScreen>
			LCD_displayString(" ");
 800290c:	481c      	ldr	r0, [pc, #112]	; (8002980 <Start_TakeAction_Lidar+0x98>)
 800290e:	f7fe fbe1 	bl	80010d4 <LCD_displayString>
			LCD_displayStringRowColumn(0,0,"Applying Brakes");
 8002912:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <Start_TakeAction_Lidar+0x9c>)
 8002914:	2100      	movs	r1, #0
 8002916:	2000      	movs	r0, #0
 8002918:	f7fe fc24 	bl	8001164 <LCD_displayStringRowColumn>
			HAL_Delay(200);
 800291c:	20c8      	movs	r0, #200	; 0xc8
 800291e:	f000 ffd1 	bl	80038c4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,RESET);
 8002922:	2200      	movs	r2, #0
 8002924:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002928:	4814      	ldr	r0, [pc, #80]	; (800297c <Start_TakeAction_Lidar+0x94>)
 800292a:	f001 fe6f 	bl	800460c <HAL_GPIO_WritePin>
			if(Global_u16LidarDistance >=101)
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <Start_TakeAction_Lidar+0xa0>)
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	2b64      	cmp	r3, #100	; 0x64
 8002934:	d902      	bls.n	800293c <Start_TakeAction_Lidar+0x54>
			{
				Flag_Drive=1;
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <Start_TakeAction_Lidar+0xa4>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]

			}
			Flag_obstacle=0;
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <Start_TakeAction_Lidar+0x90>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
			osDelay(200);
 8002942:	20c8      	movs	r0, #200	; 0xc8
 8002944:	f004 ff70 	bl	8007828 <osDelay>
 8002948:	e7d2      	b.n	80028f0 <Start_TakeAction_Lidar+0x8>

		}
		else if(Flag_Drive==1) {
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <Start_TakeAction_Lidar+0xa4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d1ce      	bne.n	80028f0 <Start_TakeAction_Lidar+0x8>
      safe_state(); //A.hamid 
 8002952:	f000 fa3f 	bl	8002dd4 <safe_state>

			LCD_clearScreen(); /* clear the LCD display */
 8002956:	f7fe fc1a 	bl	800118e <LCD_clearScreen>
			LCD_displayString(" ");
 800295a:	4809      	ldr	r0, [pc, #36]	; (8002980 <Start_TakeAction_Lidar+0x98>)
 800295c:	f7fe fbba 	bl	80010d4 <LCD_displayString>
			LCD_displayStringRowColumn(0,0,"Drive Mode");
 8002960:	4a0b      	ldr	r2, [pc, #44]	; (8002990 <Start_TakeAction_Lidar+0xa8>)
 8002962:	2100      	movs	r1, #0
 8002964:	2000      	movs	r0, #0
 8002966:	f7fe fbfd 	bl	8001164 <LCD_displayStringRowColumn>

			Flag_Drive=0;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <Start_TakeAction_Lidar+0xa4>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
			osDelay(20);
 8002970:	2014      	movs	r0, #20
 8002972:	f004 ff59 	bl	8007828 <osDelay>
		if (Flag_obstacle == 1)
 8002976:	e7bb      	b.n	80028f0 <Start_TakeAction_Lidar+0x8>
 8002978:	20000b18 	.word	0x20000b18
 800297c:	40020c00 	.word	0x40020c00
 8002980:	0800e3c0 	.word	0x0800e3c0
 8002984:	0800e3d0 	.word	0x0800e3d0
 8002988:	20000000 	.word	0x20000000
 800298c:	20000b1c 	.word	0x20000b1c
 8002990:	0800e3e0 	.word	0x0800e3e0

08002994 <Start_Ultrasonic_Read>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Ultrasonic_Read */
void Start_Ultrasonic_Read(void *argument)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Ultrasonic_Read */
	/* Infinite loop */
	HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_1);
 800299c:	2100      	movs	r1, #0
 800299e:	480a      	ldr	r0, [pc, #40]	; (80029c8 <Start_Ultrasonic_Read+0x34>)
 80029a0:	f002 fc4a 	bl	8005238 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_2);
 80029a4:	2104      	movs	r1, #4
 80029a6:	4808      	ldr	r0, [pc, #32]	; (80029c8 <Start_Ultrasonic_Read+0x34>)
 80029a8:	f002 fc46 	bl	8005238 <HAL_TIM_IC_Start_IT>
	//HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_3);


	for(;;)
	{
		UltraSonic_Read_Left();
 80029ac:	f7fe fcaa 	bl	8001304 <UltraSonic_Read_Left>
		osDelay(400);
 80029b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80029b4:	f004 ff38 	bl	8007828 <osDelay>

		UltraSonic_Read_Right();
 80029b8:	f7fe fcc4 	bl	8001344 <UltraSonic_Read_Right>
		osDelay(400);
 80029bc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80029c0:	f004 ff32 	bl	8007828 <osDelay>
		UltraSonic_Read_Left();
 80029c4:	e7f2      	b.n	80029ac <Start_Ultrasonic_Read+0x18>
 80029c6:	bf00      	nop
 80029c8:	2000024c 	.word	0x2000024c

080029cc <Start_GPS>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_GPS */
void Start_GPS(void *argument)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_GPS */
	/* Infinite loop */
	for(;;)
	{
		if (Flag==1)
 80029d4:	4b54      	ldr	r3, [pc, #336]	; (8002b28 <Start_GPS+0x15c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d1fb      	bne.n	80029d4 <Start_GPS+0x8>
		{
			//	if(Flag == 1){
			char *ptr = strstr((char *)RxBuf,"GPGGA");
 80029dc:	4953      	ldr	r1, [pc, #332]	; (8002b2c <Start_GPS+0x160>)
 80029de:	4854      	ldr	r0, [pc, #336]	; (8002b30 <Start_GPS+0x164>)
 80029e0:	f008 f8c3 	bl	800ab6a <strstr>
 80029e4:	60f8      	str	r0, [r7, #12]
			char *ptr1 = strstr((char *)RxBuf,"GPRMC");
 80029e6:	4953      	ldr	r1, [pc, #332]	; (8002b34 <Start_GPS+0x168>)
 80029e8:	4851      	ldr	r0, [pc, #324]	; (8002b30 <Start_GPS+0x164>)
 80029ea:	f008 f8be 	bl	800ab6a <strstr>
 80029ee:	60b8      	str	r0, [r7, #8]


			if(*ptr == 'G' )
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b47      	cmp	r3, #71	; 0x47
 80029f6:	d141      	bne.n	8002a7c <Start_GPS+0xb0>
			{
				if(*(ptr+1) == 'P' )
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	3301      	adds	r3, #1
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b50      	cmp	r3, #80	; 0x50
 8002a00:	d13c      	bne.n	8002a7c <Start_GPS+0xb0>

				{
					if(*(ptr+2) == 'G' )
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3302      	adds	r3, #2
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b47      	cmp	r3, #71	; 0x47
 8002a0a:	d137      	bne.n	8002a7c <Start_GPS+0xb0>
					{
						if(*(ptr+3) == 'G' )
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3303      	adds	r3, #3
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b47      	cmp	r3, #71	; 0x47
 8002a14:	d132      	bne.n	8002a7c <Start_GPS+0xb0>
						{
							if(*(ptr+4) == 'A' )
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b41      	cmp	r3, #65	; 0x41
 8002a1e:	d12d      	bne.n	8002a7c <Start_GPS+0xb0>
							{
								while(1)
								{
									GGA[msgindex]=*ptr;
 8002a20:	4b45      	ldr	r3, [pc, #276]	; (8002b38 <Start_GPS+0x16c>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	461a      	mov	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	7819      	ldrb	r1, [r3, #0]
 8002a2a:	4b44      	ldr	r3, [pc, #272]	; (8002b3c <Start_GPS+0x170>)
 8002a2c:	5499      	strb	r1, [r3, r2]
									msgindex++;
 8002a2e:	4b42      	ldr	r3, [pc, #264]	; (8002b38 <Start_GPS+0x16c>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	3301      	adds	r3, #1
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b40      	ldr	r3, [pc, #256]	; (8002b38 <Start_GPS+0x16c>)
 8002a38:	701a      	strb	r2, [r3, #0]
									*ptr =*(ptr+msgindex);
 8002a3a:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <Start_GPS+0x16c>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4413      	add	r3, r2
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	701a      	strb	r2, [r3, #0]
									if (*ptr=='*')
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a50:	d1e6      	bne.n	8002a20 <Start_GPS+0x54>
									{
										GGA[msgindex]='\n';
 8002a52:	4b39      	ldr	r3, [pc, #228]	; (8002b38 <Start_GPS+0x16c>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b38      	ldr	r3, [pc, #224]	; (8002b3c <Start_GPS+0x170>)
 8002a5a:	210a      	movs	r1, #10
 8002a5c:	5499      	strb	r1, [r3, r2]
										msgindex++;
 8002a5e:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <Start_GPS+0x16c>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <Start_GPS+0x16c>)
 8002a68:	701a      	strb	r2, [r3, #0]
										GGA[msgindex]='\0';
 8002a6a:	4b33      	ldr	r3, [pc, #204]	; (8002b38 <Start_GPS+0x16c>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <Start_GPS+0x170>)
 8002a72:	2100      	movs	r1, #0
 8002a74:	5499      	strb	r1, [r3, r2]
										msgindex=0;
 8002a76:	4b30      	ldr	r3, [pc, #192]	; (8002b38 <Start_GPS+0x16c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]
					}
				}
			}


			if(*ptr1 == 'G' )
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b47      	cmp	r3, #71	; 0x47
 8002a82:	d141      	bne.n	8002b08 <Start_GPS+0x13c>
			{
				if(*(ptr1+1) == 'P' )
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	3301      	adds	r3, #1
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b50      	cmp	r3, #80	; 0x50
 8002a8c:	d13c      	bne.n	8002b08 <Start_GPS+0x13c>

				{
					if(*(ptr1+2) == 'R' )
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	3302      	adds	r3, #2
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b52      	cmp	r3, #82	; 0x52
 8002a96:	d137      	bne.n	8002b08 <Start_GPS+0x13c>
					{
						if(*(ptr1+3) == 'M' )
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	3303      	adds	r3, #3
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b4d      	cmp	r3, #77	; 0x4d
 8002aa0:	d132      	bne.n	8002b08 <Start_GPS+0x13c>
						{
							if(*(ptr1+4) == 'C' )
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b43      	cmp	r3, #67	; 0x43
 8002aaa:	d12d      	bne.n	8002b08 <Start_GPS+0x13c>
							{
								while(1)
								{
									RMC[msgindexRMC]=*ptr1;
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <Start_GPS+0x174>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	7819      	ldrb	r1, [r3, #0]
 8002ab6:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <Start_GPS+0x178>)
 8002ab8:	5499      	strb	r1, [r3, r2]
									msgindexRMC++;
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <Start_GPS+0x174>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <Start_GPS+0x174>)
 8002ac4:	701a      	strb	r2, [r3, #0]
									*ptr1 =*(ptr1+msgindexRMC);
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <Start_GPS+0x174>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4413      	add	r3, r2
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	701a      	strb	r2, [r3, #0]
									if (*ptr1=='*')
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b2a      	cmp	r3, #42	; 0x2a
 8002adc:	d1e6      	bne.n	8002aac <Start_GPS+0xe0>
									{
										RMC[msgindexRMC]='\n';
 8002ade:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <Start_GPS+0x174>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <Start_GPS+0x178>)
 8002ae6:	210a      	movs	r1, #10
 8002ae8:	5499      	strb	r1, [r3, r2]
										msgindexRMC++;
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <Start_GPS+0x174>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	3301      	adds	r3, #1
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <Start_GPS+0x174>)
 8002af4:	701a      	strb	r2, [r3, #0]
										RMC[msgindexRMC]='\0';
 8002af6:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <Start_GPS+0x174>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b11      	ldr	r3, [pc, #68]	; (8002b44 <Start_GPS+0x178>)
 8002afe:	2100      	movs	r1, #0
 8002b00:	5499      	strb	r1, [r3, r2]
										msgindexRMC=0;
 8002b02:	4b0f      	ldr	r3, [pc, #60]	; (8002b40 <Start_GPS+0x174>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
							}
						}
					}
				}
			}
			RMC_decode(RMC, &RMC_DATA);
 8002b08:	490f      	ldr	r1, [pc, #60]	; (8002b48 <Start_GPS+0x17c>)
 8002b0a:	480e      	ldr	r0, [pc, #56]	; (8002b44 <Start_GPS+0x178>)
 8002b0c:	f7ff f928 	bl	8001d60 <RMC_decode>
			GGA_decode(GGA, &GGA_DATA);
 8002b10:	490e      	ldr	r1, [pc, #56]	; (8002b4c <Start_GPS+0x180>)
 8002b12:	480a      	ldr	r0, [pc, #40]	; (8002b3c <Start_GPS+0x170>)
 8002b14:	f7fe fde8 	bl	80016e8 <GGA_decode>
			Flag=0;
 8002b18:	4b03      	ldr	r3, [pc, #12]	; (8002b28 <Start_GPS+0x15c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
			osDelay(100);
 8002b1e:	2064      	movs	r0, #100	; 0x64
 8002b20:	f004 fe82 	bl	8007828 <osDelay>
		if (Flag==1)
 8002b24:	e756      	b.n	80029d4 <Start_GPS+0x8>
 8002b26:	bf00      	nop
 8002b28:	20000908 	.word	0x20000908
 8002b2c:	0800e3ec 	.word	0x0800e3ec
 8002b30:	200004f8 	.word	0x200004f8
 8002b34:	0800e3f4 	.word	0x0800e3f4
 8002b38:	200008b8 	.word	0x200008b8
 8002b3c:	20000868 	.word	0x20000868
 8002b40:	200008b9 	.word	0x200008b9
 8002b44:	20000818 	.word	0x20000818
 8002b48:	200008f0 	.word	0x200008f0
 8002b4c:	200008c0 	.word	0x200008c0

08002b50 <StartTask06>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask06 */
void StartTask06(void *argument)
{
 8002b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b52:	b0ad      	sub	sp, #180	; 0xb4
 8002b54:	af08      	add	r7, sp, #32
 8002b56:	6078      	str	r0, [r7, #4]
		char lat[30];
		char lon[30];
		char D_lat[30];
		char D_lon[30];

		gcvt(GGA_DATA.position.latitude, 10, lat);
 8002b58:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <StartTask06+0x124>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fd fcf3 	bl	8000548 <__aeabi_f2d>
 8002b62:	4604      	mov	r4, r0
 8002b64:	460d      	mov	r5, r1
 8002b66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	200a      	movs	r0, #10
 8002b6e:	ec45 4b10 	vmov	d0, r4, r5
 8002b72:	f007 facf 	bl	800a114 <gcvt>
		gcvt(GGA_DATA.position.logitude, 10, lon);
 8002b76:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <StartTask06+0x124>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fce4 	bl	8000548 <__aeabi_f2d>
 8002b80:	4604      	mov	r4, r0
 8002b82:	460d      	mov	r5, r1
 8002b84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b88:	4619      	mov	r1, r3
 8002b8a:	200a      	movs	r0, #10
 8002b8c:	ec45 4b10 	vmov	d0, r4, r5
 8002b90:	f007 fac0 	bl	800a114 <gcvt>
		gcvt(Destination_Latitude, 10, D_lat);
 8002b94:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <StartTask06+0x128>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fcd5 	bl	8000548 <__aeabi_f2d>
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	460d      	mov	r5, r1
 8002ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	200a      	movs	r0, #10
 8002baa:	ec45 4b10 	vmov	d0, r4, r5
 8002bae:	f007 fab1 	bl	800a114 <gcvt>
		gcvt(Destination_Longitude, 10, D_lon);
 8002bb2:	4b32      	ldr	r3, [pc, #200]	; (8002c7c <StartTask06+0x12c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fcc6 	bl	8000548 <__aeabi_f2d>
 8002bbc:	4604      	mov	r4, r0
 8002bbe:	460d      	mov	r5, r1
 8002bc0:	f107 030c 	add.w	r3, r7, #12
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	200a      	movs	r0, #10
 8002bc8:	ec45 4b10 	vmov	d0, r4, r5
 8002bcc:	f007 faa2 	bl	800a114 <gcvt>
				,
				RMC_DATA.date.day, RMC_DATA.date.month, RMC_DATA.date.year,
				GGA_DATA.time.hour, GGA_DATA.time.minuit, GGA_DATA.time.second, Vehicle_ID,
				lon, lat,(uint16_t)RMC_DATA.speed_over_gnd, Check_Front_Obs, Global_u16LidarDistance,
				Left_Distance, Right_Distance,Rear_Distance, D_lon, D_lat);*/
		int len = snprintf(test_data, sizeof(test_data), "{\n" //A.hamid changed id to string + routing command
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <StartTask06+0x130>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
				"\"5\": %s,\n" //dest lon
				"\"6\": %s\n}" // dest lat

				/*,RMC_DATA.date.year, RMC_DATA.date.month, RMC_DATA.date.day,
				GGA_DATA.time.hour, GGA_DATA.time.minuit, GGA_DATA.time.second*/, Vehicle_ID, Routing_command,
				/*lon, lat,*/(uint16_t)RMC_DATA.speed_over_gnd, Check_Front_Obs, Global_u16LidarDistance,
 8002bd4:	4a2b      	ldr	r2, [pc, #172]	; (8002c84 <StartTask06+0x134>)
 8002bd6:	edd2 7a04 	vldr	s15, [r2, #16]
 8002bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bde:	ee17 2a90 	vmov	r2, s15
 8002be2:	b292      	uxth	r2, r2
		int len = snprintf(test_data, sizeof(test_data), "{\n" //A.hamid changed id to string + routing command
 8002be4:	4615      	mov	r5, r2
 8002be6:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <StartTask06+0x138>)
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	4928      	ldr	r1, [pc, #160]	; (8002c8c <StartTask06+0x13c>)
 8002bec:	8809      	ldrh	r1, [r1, #0]
 8002bee:	460e      	mov	r6, r1
 8002bf0:	4927      	ldr	r1, [pc, #156]	; (8002c90 <StartTask06+0x140>)
 8002bf2:	6809      	ldr	r1, [r1, #0]
 8002bf4:	4827      	ldr	r0, [pc, #156]	; (8002c94 <StartTask06+0x144>)
 8002bf6:	6800      	ldr	r0, [r0, #0]
 8002bf8:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002bfc:	9407      	str	r4, [sp, #28]
 8002bfe:	f107 040c 	add.w	r4, r7, #12
 8002c02:	9406      	str	r4, [sp, #24]
 8002c04:	9005      	str	r0, [sp, #20]
 8002c06:	9104      	str	r1, [sp, #16]
 8002c08:	9603      	str	r6, [sp, #12]
 8002c0a:	9202      	str	r2, [sp, #8]
 8002c0c:	9501      	str	r5, [sp, #4]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <StartTask06+0x148>)
 8002c12:	4a22      	ldr	r2, [pc, #136]	; (8002c9c <StartTask06+0x14c>)
 8002c14:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c18:	4821      	ldr	r0, [pc, #132]	; (8002ca0 <StartTask06+0x150>)
 8002c1a:	f007 ff61 	bl	800aae0 <sniprintf>
 8002c1e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
				Left_Distance, Right_Distance, D_lon, D_lat);

		if(Routing_command == 1){ //A.hamid 
 8002c22:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <StartTask06+0x130>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d102      	bne.n	8002c30 <StartTask06+0xe0>
			Routing_command=0;
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <StartTask06+0x130>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

		OBSTACLE_FLAG       = "obsatcle flag"
		OBSTACLE_SPEED      = "obstacle speed"
		OBSTACLE_distance   = "obstacle distance"
		 */
		if (len < 0 || len >= sizeof(test_data)) {
 8002c30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	db17      	blt.n	8002c68 <StartTask06+0x118>
 8002c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c40:	d212      	bcs.n	8002c68 <StartTask06+0x118>
			// handle error
		} else {
			HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(&huart3, (uint8_t*)test_data, sizeof(test_data));
 8002c42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c46:	4916      	ldr	r1, [pc, #88]	; (8002ca0 <StartTask06+0x150>)
 8002c48:	4816      	ldr	r0, [pc, #88]	; (8002ca4 <StartTask06+0x154>)
 8002c4a:	f003 fa53 	bl	80060f4 <HAL_UART_Transmit_DMA>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			//HAL_Delay(100);
			if (status != HAL_OK) {
 8002c54:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <StartTask06+0x118>
				// handle error
			} else {
				printf("Transmitted %d bytes of data: %s\n", sizeof(test_data), test_data);
 8002c5c:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <StartTask06+0x150>)
 8002c5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c62:	4811      	ldr	r0, [pc, #68]	; (8002ca8 <StartTask06+0x158>)
 8002c64:	f007 ff24 	bl	800aab0 <iprintf>
			}
		}

		osDelay(1000);
 8002c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c6c:	f004 fddc 	bl	8007828 <osDelay>
	{
 8002c70:	e772      	b.n	8002b58 <StartTask06+0x8>
 8002c72:	bf00      	nop
 8002c74:	200008c0 	.word	0x200008c0
 8002c78:	20000008 	.word	0x20000008
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	20000b00 	.word	0x20000b00
 8002c84:	200008f0 	.word	0x200008f0
 8002c88:	20000b04 	.word	0x20000b04
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	20000234 	.word	0x20000234
 8002c94:	20000220 	.word	0x20000220
 8002c98:	0800e628 	.word	0x0800e628
 8002c9c:	0800e3fc 	.word	0x0800e3fc
 8002ca0:	2000090c 	.word	0x2000090c
 8002ca4:	2000031c 	.word	0x2000031c
 8002ca8:	0800e4ac 	.word	0x0800e4ac

08002cac <Start_Rec_Transmit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_Rec_Transmit */
void Start_Rec_Transmit(void *argument)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Rec_Transmit */
	/* Infinite loop */
	for(;;)
	{

		if (Flag_Rec == 1)
 8002cb4:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <Start_Rec_Transmit+0x98>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d1fb      	bne.n	8002cb4 <Start_Rec_Transmit+0x8>
		{
			rx_data[strcspn(rx_data, "\r\n")] = '\0';
 8002cbc:	4922      	ldr	r1, [pc, #136]	; (8002d48 <Start_Rec_Transmit+0x9c>)
 8002cbe:	4823      	ldr	r0, [pc, #140]	; (8002d4c <Start_Rec_Transmit+0xa0>)
 8002cc0:	f007 ff42 	bl	800ab48 <strcspn>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <Start_Rec_Transmit+0xa0>)
 8002cc8:	2100      	movs	r1, #0
 8002cca:	54d1      	strb	r1, [r2, r3]
			rx_data[strcspn(rx_data, "\r\n")] = '\0';
 8002ccc:	491e      	ldr	r1, [pc, #120]	; (8002d48 <Start_Rec_Transmit+0x9c>)
 8002cce:	481f      	ldr	r0, [pc, #124]	; (8002d4c <Start_Rec_Transmit+0xa0>)
 8002cd0:	f007 ff3a 	bl	800ab48 <strcspn>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4a1d      	ldr	r2, [pc, #116]	; (8002d4c <Start_Rec_Transmit+0xa0>)
 8002cd8:	2100      	movs	r1, #0
 8002cda:	54d1      	strb	r1, [r2, r3]
      //A.hamid split into 2 catgories warning and direction, states are defined in functions 
      // changed strcmp to str str
      // not tested!

			/*warning states*/
			if (strstr(rx_data, "Warning") == 0)
 8002cdc:	491c      	ldr	r1, [pc, #112]	; (8002d50 <Start_Rec_Transmit+0xa4>)
 8002cde:	481b      	ldr	r0, [pc, #108]	; (8002d4c <Start_Rec_Transmit+0xa0>)
 8002ce0:	f007 ff43 	bl	800ab6a <strstr>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <Start_Rec_Transmit+0x44>
			{
        warning_state();
 8002cea:	f000 f83b 	bl	8002d64 <warning_state>
 8002cee:	e008      	b.n	8002d02 <Start_Rec_Transmit+0x56>

			}else if(strstr(rx_data, "Safe") == 0){
 8002cf0:	4918      	ldr	r1, [pc, #96]	; (8002d54 <Start_Rec_Transmit+0xa8>)
 8002cf2:	4816      	ldr	r0, [pc, #88]	; (8002d4c <Start_Rec_Transmit+0xa0>)
 8002cf4:	f007 ff39 	bl	800ab6a <strstr>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <Start_Rec_Transmit+0x56>

        safe_state();
 8002cfe:	f000 f869 	bl	8002dd4 <safe_state>
      }else{}
			/*directions*/
			if (strstr(rx_data, "Right") == 0)
 8002d02:	4915      	ldr	r1, [pc, #84]	; (8002d58 <Start_Rec_Transmit+0xac>)
 8002d04:	4811      	ldr	r0, [pc, #68]	; (8002d4c <Start_Rec_Transmit+0xa0>)
 8002d06:	f007 ff30 	bl	800ab6a <strstr>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d102      	bne.n	8002d16 <Start_Rec_Transmit+0x6a>
			{
        right_state();
 8002d10:	f000 f8c0 	bl	8002e94 <right_state>
 8002d14:	e012      	b.n	8002d3c <Start_Rec_Transmit+0x90>
			}
			else if( strstr(rx_data, "Left") == 0)
 8002d16:	4911      	ldr	r1, [pc, #68]	; (8002d5c <Start_Rec_Transmit+0xb0>)
 8002d18:	480c      	ldr	r0, [pc, #48]	; (8002d4c <Start_Rec_Transmit+0xa0>)
 8002d1a:	f007 ff26 	bl	800ab6a <strstr>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d102      	bne.n	8002d2a <Start_Rec_Transmit+0x7e>
			{
        left_state();
 8002d24:	f000 f882 	bl	8002e2c <left_state>
 8002d28:	e008      	b.n	8002d3c <Start_Rec_Transmit+0x90>
			}
			else if (strstr(rx_data, "Straight") == 0)
 8002d2a:	490d      	ldr	r1, [pc, #52]	; (8002d60 <Start_Rec_Transmit+0xb4>)
 8002d2c:	4807      	ldr	r0, [pc, #28]	; (8002d4c <Start_Rec_Transmit+0xa0>)
 8002d2e:	f007 ff1c 	bl	800ab6a <strstr>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <Start_Rec_Transmit+0x90>
			{
        straight_state();
 8002d38:	f000 f8e0 	bl	8002efc <straight_state>
			}else{}


			Flag_Rec=0;
 8002d3c:	4b01      	ldr	r3, [pc, #4]	; (8002d44 <Start_Rec_Transmit+0x98>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
		if (Flag_Rec == 1)
 8002d42:	e7b7      	b.n	8002cb4 <Start_Rec_Transmit+0x8>
 8002d44:	20000b14 	.word	0x20000b14
 8002d48:	0800e4d0 	.word	0x0800e4d0
 8002d4c:	20000b08 	.word	0x20000b08
 8002d50:	0800e4d4 	.word	0x0800e4d4
 8002d54:	0800e4dc 	.word	0x0800e4dc
 8002d58:	0800e4e4 	.word	0x0800e4e4
 8002d5c:	0800e4ec 	.word	0x0800e4ec
 8002d60:	0800e4f4 	.word	0x0800e4f4

08002d64 <warning_state>:
		}	}
  /* USER CODE END Start_Rec_Transmit */
}
//A.hamid 
void warning_state(void){//A.hamid 
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
				blink_color = 4; // Red
 8002d6a:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <warning_state+0x60>)
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	701a      	strb	r2, [r3, #0]
//				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
//				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
//				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);

				LCD_clearScreen(); /* clear the LCD display */
 8002d70:	f7fe fa0d 	bl	800118e <LCD_clearScreen>
				LCD_displayString(" ");
 8002d74:	4814      	ldr	r0, [pc, #80]	; (8002dc8 <warning_state+0x64>)
 8002d76:	f7fe f9ad 	bl	80010d4 <LCD_displayString>
				LCD_displayStringRowColumn(1,3,"Warning!!");
 8002d7a:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <warning_state+0x68>)
 8002d7c:	2103      	movs	r1, #3
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f7fe f9f0 	bl	8001164 <LCD_displayStringRowColumn>
        for(int i=0; i<5 ; i++){
 8002d84:	2300      	movs	r3, #0
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	e014      	b.n	8002db4 <warning_state+0x50>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	2108      	movs	r1, #8
 8002d8e:	4810      	ldr	r0, [pc, #64]	; (8002dd0 <warning_state+0x6c>)
 8002d90:	f001 fc3c 	bl	800460c <HAL_GPIO_WritePin>
				osDelay(300);
 8002d94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002d98:	f004 fd46 	bl	8007828 <osDelay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2108      	movs	r1, #8
 8002da0:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <warning_state+0x6c>)
 8002da2:	f001 fc33 	bl	800460c <HAL_GPIO_WritePin>
        osDelay(300);
 8002da6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002daa:	f004 fd3d 	bl	8007828 <osDelay>
        for(int i=0; i<5 ; i++){
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3301      	adds	r3, #1
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	dde7      	ble.n	8002d8a <warning_state+0x26>
//				memset((rx_data), '\0', strlen(rx_data));


				// osDelay(1000);

}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000b20 	.word	0x20000b20
 8002dc8:	0800e3c0 	.word	0x0800e3c0
 8002dcc:	0800e500 	.word	0x0800e500
 8002dd0:	40020800 	.word	0x40020800

08002dd4 <safe_state>:
void safe_state(void){//A.hamid 
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2108      	movs	r1, #8
 8002ddc:	4804      	ldr	r0, [pc, #16]	; (8002df0 <safe_state+0x1c>)
 8002dde:	f001 fc15 	bl	800460c <HAL_GPIO_WritePin>
//				memset((rx_data), '\0', strlen(rx_data));

				LCD_clearScreen(); /* clear the LCD display */
 8002de2:	f7fe f9d4 	bl	800118e <LCD_clearScreen>
				LCD_displayString(" ");
 8002de6:	4803      	ldr	r0, [pc, #12]	; (8002df4 <safe_state+0x20>)
 8002de8:	f7fe f974 	bl	80010d4 <LCD_displayString>
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40020800 	.word	0x40020800
 8002df4:	0800e3c0 	.word	0x0800e3c0

08002df8 <breaking_state>:

void breaking_state(void){//A.hamid 
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	af00      	add	r7, sp, #0

    LCD_clearScreen(); /* clear the LCD display */
 8002dfc:	f7fe f9c7 	bl	800118e <LCD_clearScreen>
    LCD_displayString(" ");
 8002e00:	4807      	ldr	r0, [pc, #28]	; (8002e20 <breaking_state+0x28>)
 8002e02:	f7fe f967 	bl	80010d4 <LCD_displayString>
    LCD_displayStringRowColumn(1,3,"Break!!");
 8002e06:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <breaking_state+0x2c>)
 8002e08:	2103      	movs	r1, #3
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	f7fe f9aa 	bl	8001164 <LCD_displayStringRowColumn>

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 8002e10:	2201      	movs	r2, #1
 8002e12:	2108      	movs	r1, #8
 8002e14:	4804      	ldr	r0, [pc, #16]	; (8002e28 <breaking_state+0x30>)
 8002e16:	f001 fbf9 	bl	800460c <HAL_GPIO_WritePin>



}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	0800e3c0 	.word	0x0800e3c0
 8002e24:	0800e50c 	.word	0x0800e50c
 8002e28:	40020800 	.word	0x40020800

08002e2c <left_state>:
void left_state(void){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
				blink_color = 2; // Yellow
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <left_state+0x54>)
 8002e32:	2202      	movs	r2, #2
 8002e34:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8002e36:	2200      	movs	r2, #0
 8002e38:	2101      	movs	r1, #1
 8002e3a:	4812      	ldr	r0, [pc, #72]	; (8002e84 <left_state+0x58>)
 8002e3c:	f001 fbe6 	bl	800460c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8002e40:	2201      	movs	r2, #1
 8002e42:	2102      	movs	r1, #2
 8002e44:	480f      	ldr	r0, [pc, #60]	; (8002e84 <left_state+0x58>)
 8002e46:	f001 fbe1 	bl	800460c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	480d      	ldr	r0, [pc, #52]	; (8002e84 <left_state+0x58>)
 8002e50:	f001 fbdc 	bl	800460c <HAL_GPIO_WritePin>
//				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);  //A.hamid 
				memset((rx_data), '\0', strlen(rx_data));
 8002e54:	480c      	ldr	r0, [pc, #48]	; (8002e88 <left_state+0x5c>)
 8002e56:	f7fd f9bb 	bl	80001d0 <strlen>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4809      	ldr	r0, [pc, #36]	; (8002e88 <left_state+0x5c>)
 8002e62:	f007 f9b3 	bl	800a1cc <memset>

				LCD_clearScreen(); /* clear the LCD display */
 8002e66:	f7fe f992 	bl	800118e <LCD_clearScreen>
				LCD_displayString(" ");
 8002e6a:	4808      	ldr	r0, [pc, #32]	; (8002e8c <left_state+0x60>)
 8002e6c:	f7fe f932 	bl	80010d4 <LCD_displayString>
				LCD_displayStringRowColumn(1,3,"Turn Left");
 8002e70:	4a07      	ldr	r2, [pc, #28]	; (8002e90 <left_state+0x64>)
 8002e72:	2103      	movs	r1, #3
 8002e74:	2001      	movs	r0, #1
 8002e76:	f7fe f975 	bl	8001164 <LCD_displayStringRowColumn>

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000b20 	.word	0x20000b20
 8002e84:	40020800 	.word	0x40020800
 8002e88:	20000b08 	.word	0x20000b08
 8002e8c:	0800e3c0 	.word	0x0800e3c0
 8002e90:	0800e514 	.word	0x0800e514

08002e94 <right_state>:
void right_state(void){
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0

				blink_color = 1; // Green
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <right_state+0x54>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	4812      	ldr	r0, [pc, #72]	; (8002eec <right_state+0x58>)
 8002ea4:	f001 fbb2 	bl	800460c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2102      	movs	r1, #2
 8002eac:	480f      	ldr	r0, [pc, #60]	; (8002eec <right_state+0x58>)
 8002eae:	f001 fbad 	bl	800460c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2104      	movs	r1, #4
 8002eb6:	480d      	ldr	r0, [pc, #52]	; (8002eec <right_state+0x58>)
 8002eb8:	f001 fba8 	bl	800460c <HAL_GPIO_WritePin>
//				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);  //A.hamid 
				memset((rx_data), '\0', strlen(rx_data));
 8002ebc:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <right_state+0x5c>)
 8002ebe:	f7fd f987 	bl	80001d0 <strlen>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4809      	ldr	r0, [pc, #36]	; (8002ef0 <right_state+0x5c>)
 8002eca:	f007 f97f 	bl	800a1cc <memset>
				LCD_clearScreen(); /* clear the LCD display */
 8002ece:	f7fe f95e 	bl	800118e <LCD_clearScreen>
				LCD_displayString(" ");
 8002ed2:	4808      	ldr	r0, [pc, #32]	; (8002ef4 <right_state+0x60>)
 8002ed4:	f7fe f8fe 	bl	80010d4 <LCD_displayString>
				LCD_displayStringRowColumn(1,3,"Turn Right");
 8002ed8:	4a07      	ldr	r2, [pc, #28]	; (8002ef8 <right_state+0x64>)
 8002eda:	2103      	movs	r1, #3
 8002edc:	2001      	movs	r0, #1
 8002ede:	f7fe f941 	bl	8001164 <LCD_displayStringRowColumn>



}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000b20 	.word	0x20000b20
 8002eec:	40020800 	.word	0x40020800
 8002ef0:	20000b08 	.word	0x20000b08
 8002ef4:	0800e3c0 	.word	0x0800e3c0
 8002ef8:	0800e520 	.word	0x0800e520

08002efc <straight_state>:
void straight_state(void){
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0

  				blink_color = 3; // Blue
 8002f00:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <straight_state+0x54>)
 8002f02:	2203      	movs	r2, #3
 8002f04:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4812      	ldr	r0, [pc, #72]	; (8002f54 <straight_state+0x58>)
 8002f0c:	f001 fb7e 	bl	800460c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8002f10:	2200      	movs	r2, #0
 8002f12:	2102      	movs	r1, #2
 8002f14:	480f      	ldr	r0, [pc, #60]	; (8002f54 <straight_state+0x58>)
 8002f16:	f001 fb79 	bl	800460c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	2104      	movs	r1, #4
 8002f1e:	480d      	ldr	r0, [pc, #52]	; (8002f54 <straight_state+0x58>)
 8002f20:	f001 fb74 	bl	800460c <HAL_GPIO_WritePin>
//				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);  //A.hamid 
				memset((rx_data), '\0', strlen(rx_data));
 8002f24:	480c      	ldr	r0, [pc, #48]	; (8002f58 <straight_state+0x5c>)
 8002f26:	f7fd f953 	bl	80001d0 <strlen>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4809      	ldr	r0, [pc, #36]	; (8002f58 <straight_state+0x5c>)
 8002f32:	f007 f94b 	bl	800a1cc <memset>

				LCD_clearScreen(); /* clear the LCD display */
 8002f36:	f7fe f92a 	bl	800118e <LCD_clearScreen>
				LCD_displayString(" ");
 8002f3a:	4808      	ldr	r0, [pc, #32]	; (8002f5c <straight_state+0x60>)
 8002f3c:	f7fe f8ca 	bl	80010d4 <LCD_displayString>
				LCD_displayStringRowColumn(1,3,"Go Straight");
 8002f40:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <straight_state+0x64>)
 8002f42:	2103      	movs	r1, #3
 8002f44:	2001      	movs	r0, #1
 8002f46:	f7fe f90d 	bl	8001164 <LCD_displayStringRowColumn>

}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000b20 	.word	0x20000b20
 8002f54:	40020800 	.word	0x40020800
 8002f58:	20000b08 	.word	0x20000b08
 8002f5c:	0800e3c0 	.word	0x0800e3c0
 8002f60:	0800e52c 	.word	0x0800e52c

08002f64 <HAL_GPIO_EXTI_Callback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
//  UNUSED(GPIO_Pin);
	if(Routing_command==0){
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <HAL_GPIO_EXTI_Callback+0x28>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <HAL_GPIO_EXTI_Callback+0x1e>
		osDelay(20);
 8002f76:	2014      	movs	r0, #20
 8002f78:	f004 fc56 	bl	8007828 <osDelay>
		Routing_command=1;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <HAL_GPIO_EXTI_Callback+0x28>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]


  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000b00 	.word	0x20000b00

08002f90 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002fa2:	f000 fc6f 	bl	8003884 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40001000 	.word	0x40001000

08002fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb8:	b672      	cpsid	i
}
 8002fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002fbc:	e7fe      	b.n	8002fbc <Error_Handler+0x8>
	...

08002fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_MspInit+0x54>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a11      	ldr	r2, [pc, #68]	; (8003014 <HAL_MspInit+0x54>)
 8002fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <HAL_MspInit+0x54>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <HAL_MspInit+0x54>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <HAL_MspInit+0x54>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <HAL_MspInit+0x54>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	210f      	movs	r1, #15
 8003002:	f06f 0001 	mvn.w	r0, #1
 8003006:	f000 fd39 	bl	8003a7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023800 	.word	0x40023800

08003018 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	; 0x28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <HAL_TIM_Base_MspInit+0x94>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d134      	bne.n	80030a4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <HAL_TIM_Base_MspInit+0x98>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <HAL_TIM_Base_MspInit+0x98>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	6453      	str	r3, [r2, #68]	; 0x44
 800304a:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_TIM_Base_MspInit+0x98>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <HAL_TIM_Base_MspInit+0x98>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a14      	ldr	r2, [pc, #80]	; (80030b0 <HAL_TIM_Base_MspInit+0x98>)
 8003060:	f043 0310 	orr.w	r3, r3, #16
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_TIM_Base_MspInit+0x98>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8003072:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8003076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003078:	2302      	movs	r3, #2
 800307a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003080:	2300      	movs	r3, #0
 8003082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003084:	2301      	movs	r3, #1
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	4619      	mov	r1, r3
 800308e:	4809      	ldr	r0, [pc, #36]	; (80030b4 <HAL_TIM_Base_MspInit+0x9c>)
 8003090:	f001 f920 	bl	80042d4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	2105      	movs	r1, #5
 8003098:	201b      	movs	r0, #27
 800309a:	f000 fcef 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800309e:	201b      	movs	r0, #27
 80030a0:	f000 fd08 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80030a4:	bf00      	nop
 80030a6:	3728      	adds	r7, #40	; 0x28
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40010000 	.word	0x40010000
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40021000 	.word	0x40021000

080030b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08e      	sub	sp, #56	; 0x38
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a67      	ldr	r2, [pc, #412]	; (8003274 <HAL_UART_MspInit+0x1bc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d163      	bne.n	80031a2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	623b      	str	r3, [r7, #32]
 80030de:	4b66      	ldr	r3, [pc, #408]	; (8003278 <HAL_UART_MspInit+0x1c0>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4a65      	ldr	r2, [pc, #404]	; (8003278 <HAL_UART_MspInit+0x1c0>)
 80030e4:	f043 0310 	orr.w	r3, r3, #16
 80030e8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_UART_MspInit+0x1c0>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	623b      	str	r3, [r7, #32]
 80030f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	4b5f      	ldr	r3, [pc, #380]	; (8003278 <HAL_UART_MspInit+0x1c0>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a5e      	ldr	r2, [pc, #376]	; (8003278 <HAL_UART_MspInit+0x1c0>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b5c      	ldr	r3, [pc, #368]	; (8003278 <HAL_UART_MspInit+0x1c0>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003112:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003118:	2302      	movs	r3, #2
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311c:	2300      	movs	r3, #0
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003120:	2303      	movs	r3, #3
 8003122:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003124:	2307      	movs	r3, #7
 8003126:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800312c:	4619      	mov	r1, r3
 800312e:	4853      	ldr	r0, [pc, #332]	; (800327c <HAL_UART_MspInit+0x1c4>)
 8003130:	f001 f8d0 	bl	80042d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003134:	4b52      	ldr	r3, [pc, #328]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 8003136:	4a53      	ldr	r2, [pc, #332]	; (8003284 <HAL_UART_MspInit+0x1cc>)
 8003138:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800313a:	4b51      	ldr	r3, [pc, #324]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 800313c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003140:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003142:	4b4f      	ldr	r3, [pc, #316]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003148:	4b4d      	ldr	r3, [pc, #308]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 800314a:	2200      	movs	r2, #0
 800314c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800314e:	4b4c      	ldr	r3, [pc, #304]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 8003150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003154:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003156:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 8003158:	2200      	movs	r2, #0
 800315a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800315c:	4b48      	ldr	r3, [pc, #288]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 800315e:	2200      	movs	r2, #0
 8003160:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 8003164:	2200      	movs	r2, #0
 8003166:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003168:	4b45      	ldr	r3, [pc, #276]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 800316a:	2200      	movs	r2, #0
 800316c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800316e:	4b44      	ldr	r3, [pc, #272]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 8003170:	2200      	movs	r2, #0
 8003172:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003174:	4842      	ldr	r0, [pc, #264]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 8003176:	f000 fcab 	bl	8003ad0 <HAL_DMA_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003180:	f7ff ff18 	bl	8002fb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a3e      	ldr	r2, [pc, #248]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
 800318a:	4a3d      	ldr	r2, [pc, #244]	; (8003280 <HAL_UART_MspInit+0x1c8>)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003190:	2200      	movs	r2, #0
 8003192:	2105      	movs	r1, #5
 8003194:	2025      	movs	r0, #37	; 0x25
 8003196:	f000 fc71 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800319a:	2025      	movs	r0, #37	; 0x25
 800319c:	f000 fc8a 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80031a0:	e10f      	b.n	80033c2 <HAL_UART_MspInit+0x30a>
  else if(huart->Instance==USART2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a38      	ldr	r2, [pc, #224]	; (8003288 <HAL_UART_MspInit+0x1d0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d173      	bne.n	8003294 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	4b31      	ldr	r3, [pc, #196]	; (8003278 <HAL_UART_MspInit+0x1c0>)
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	4a30      	ldr	r2, [pc, #192]	; (8003278 <HAL_UART_MspInit+0x1c0>)
 80031b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ba:	6413      	str	r3, [r2, #64]	; 0x40
 80031bc:	4b2e      	ldr	r3, [pc, #184]	; (8003278 <HAL_UART_MspInit+0x1c0>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c4:	61bb      	str	r3, [r7, #24]
 80031c6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c8:	2300      	movs	r3, #0
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <HAL_UART_MspInit+0x1c0>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	4a29      	ldr	r2, [pc, #164]	; (8003278 <HAL_UART_MspInit+0x1c0>)
 80031d2:	f043 0301 	orr.w	r3, r3, #1
 80031d6:	6313      	str	r3, [r2, #48]	; 0x30
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <HAL_UART_MspInit+0x1c0>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031e4:	230c      	movs	r3, #12
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e8:	2302      	movs	r3, #2
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f0:	2303      	movs	r3, #3
 80031f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031f4:	2307      	movs	r3, #7
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031fc:	4619      	mov	r1, r3
 80031fe:	481f      	ldr	r0, [pc, #124]	; (800327c <HAL_UART_MspInit+0x1c4>)
 8003200:	f001 f868 	bl	80042d4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003204:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_UART_MspInit+0x1d4>)
 8003206:	4a22      	ldr	r2, [pc, #136]	; (8003290 <HAL_UART_MspInit+0x1d8>)
 8003208:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_UART_MspInit+0x1d4>)
 800320c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003210:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003212:	4b1e      	ldr	r3, [pc, #120]	; (800328c <HAL_UART_MspInit+0x1d4>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003218:	4b1c      	ldr	r3, [pc, #112]	; (800328c <HAL_UART_MspInit+0x1d4>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800321e:	4b1b      	ldr	r3, [pc, #108]	; (800328c <HAL_UART_MspInit+0x1d4>)
 8003220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003224:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003226:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_UART_MspInit+0x1d4>)
 8003228:	2200      	movs	r2, #0
 800322a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <HAL_UART_MspInit+0x1d4>)
 800322e:	2200      	movs	r2, #0
 8003230:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <HAL_UART_MspInit+0x1d4>)
 8003234:	2200      	movs	r2, #0
 8003236:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_UART_MspInit+0x1d4>)
 800323a:	2200      	movs	r2, #0
 800323c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_UART_MspInit+0x1d4>)
 8003240:	2200      	movs	r2, #0
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003244:	4811      	ldr	r0, [pc, #68]	; (800328c <HAL_UART_MspInit+0x1d4>)
 8003246:	f000 fc43 	bl	8003ad0 <HAL_DMA_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8003250:	f7ff feb0 	bl	8002fb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_UART_MspInit+0x1d4>)
 8003258:	639a      	str	r2, [r3, #56]	; 0x38
 800325a:	4a0c      	ldr	r2, [pc, #48]	; (800328c <HAL_UART_MspInit+0x1d4>)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003260:	2200      	movs	r2, #0
 8003262:	2105      	movs	r1, #5
 8003264:	2026      	movs	r0, #38	; 0x26
 8003266:	f000 fc09 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800326a:	2026      	movs	r0, #38	; 0x26
 800326c:	f000 fc22 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
}
 8003270:	e0a7      	b.n	80033c2 <HAL_UART_MspInit+0x30a>
 8003272:	bf00      	nop
 8003274:	40011000 	.word	0x40011000
 8003278:	40023800 	.word	0x40023800
 800327c:	40020000 	.word	0x40020000
 8003280:	20000360 	.word	0x20000360
 8003284:	40026440 	.word	0x40026440
 8003288:	40004400 	.word	0x40004400
 800328c:	200003c0 	.word	0x200003c0
 8003290:	40026088 	.word	0x40026088
  else if(huart->Instance==USART3)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a4c      	ldr	r2, [pc, #304]	; (80033cc <HAL_UART_MspInit+0x314>)
 800329a:	4293      	cmp	r3, r2
 800329c:	f040 8091 	bne.w	80033c2 <HAL_UART_MspInit+0x30a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	4b4a      	ldr	r3, [pc, #296]	; (80033d0 <HAL_UART_MspInit+0x318>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	4a49      	ldr	r2, [pc, #292]	; (80033d0 <HAL_UART_MspInit+0x318>)
 80032aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ae:	6413      	str	r3, [r2, #64]	; 0x40
 80032b0:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <HAL_UART_MspInit+0x318>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <HAL_UART_MspInit+0x318>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	4a42      	ldr	r2, [pc, #264]	; (80033d0 <HAL_UART_MspInit+0x318>)
 80032c6:	f043 0302 	orr.w	r3, r3, #2
 80032ca:	6313      	str	r3, [r2, #48]	; 0x30
 80032cc:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <HAL_UART_MspInit+0x318>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032de:	2302      	movs	r3, #2
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e6:	2303      	movs	r3, #3
 80032e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032ea:	2307      	movs	r3, #7
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f2:	4619      	mov	r1, r3
 80032f4:	4837      	ldr	r0, [pc, #220]	; (80033d4 <HAL_UART_MspInit+0x31c>)
 80032f6:	f000 ffed 	bl	80042d4 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80032fa:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <HAL_UART_MspInit+0x320>)
 80032fc:	4a37      	ldr	r2, [pc, #220]	; (80033dc <HAL_UART_MspInit+0x324>)
 80032fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003300:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <HAL_UART_MspInit+0x320>)
 8003302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003306:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003308:	4b33      	ldr	r3, [pc, #204]	; (80033d8 <HAL_UART_MspInit+0x320>)
 800330a:	2240      	movs	r2, #64	; 0x40
 800330c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800330e:	4b32      	ldr	r3, [pc, #200]	; (80033d8 <HAL_UART_MspInit+0x320>)
 8003310:	2200      	movs	r2, #0
 8003312:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003314:	4b30      	ldr	r3, [pc, #192]	; (80033d8 <HAL_UART_MspInit+0x320>)
 8003316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800331a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800331c:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <HAL_UART_MspInit+0x320>)
 800331e:	2200      	movs	r2, #0
 8003320:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003322:	4b2d      	ldr	r3, [pc, #180]	; (80033d8 <HAL_UART_MspInit+0x320>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_UART_MspInit+0x320>)
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800332e:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <HAL_UART_MspInit+0x320>)
 8003330:	2200      	movs	r2, #0
 8003332:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003334:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <HAL_UART_MspInit+0x320>)
 8003336:	2200      	movs	r2, #0
 8003338:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800333a:	4827      	ldr	r0, [pc, #156]	; (80033d8 <HAL_UART_MspInit+0x320>)
 800333c:	f000 fbc8 	bl	8003ad0 <HAL_DMA_Init>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_UART_MspInit+0x292>
      Error_Handler();
 8003346:	f7ff fe35 	bl	8002fb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a22      	ldr	r2, [pc, #136]	; (80033d8 <HAL_UART_MspInit+0x320>)
 800334e:	635a      	str	r2, [r3, #52]	; 0x34
 8003350:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <HAL_UART_MspInit+0x320>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003356:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <HAL_UART_MspInit+0x328>)
 8003358:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <HAL_UART_MspInit+0x32c>)
 800335a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800335c:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <HAL_UART_MspInit+0x328>)
 800335e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003362:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003364:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <HAL_UART_MspInit+0x328>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_UART_MspInit+0x328>)
 800336c:	2200      	movs	r2, #0
 800336e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_UART_MspInit+0x328>)
 8003372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003376:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_UART_MspInit+0x328>)
 800337a:	2200      	movs	r2, #0
 800337c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800337e:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <HAL_UART_MspInit+0x328>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003384:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_UART_MspInit+0x328>)
 8003386:	2200      	movs	r2, #0
 8003388:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_UART_MspInit+0x328>)
 800338c:	2200      	movs	r2, #0
 800338e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_UART_MspInit+0x328>)
 8003392:	2200      	movs	r2, #0
 8003394:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003396:	4812      	ldr	r0, [pc, #72]	; (80033e0 <HAL_UART_MspInit+0x328>)
 8003398:	f000 fb9a 	bl	8003ad0 <HAL_DMA_Init>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_UART_MspInit+0x2ee>
      Error_Handler();
 80033a2:	f7ff fe07 	bl	8002fb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a0d      	ldr	r2, [pc, #52]	; (80033e0 <HAL_UART_MspInit+0x328>)
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <HAL_UART_MspInit+0x328>)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2105      	movs	r1, #5
 80033b6:	2027      	movs	r0, #39	; 0x27
 80033b8:	f000 fb60 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80033bc:	2027      	movs	r0, #39	; 0x27
 80033be:	f000 fb79 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
}
 80033c2:	bf00      	nop
 80033c4:	3738      	adds	r7, #56	; 0x38
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40004800 	.word	0x40004800
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40020400 	.word	0x40020400
 80033d8:	20000420 	.word	0x20000420
 80033dc:	40026058 	.word	0x40026058
 80033e0:	20000480 	.word	0x20000480
 80033e4:	40026028 	.word	0x40026028

080033e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08e      	sub	sp, #56	; 0x38
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	4b33      	ldr	r3, [pc, #204]	; (80034cc <HAL_InitTick+0xe4>)
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	4a32      	ldr	r2, [pc, #200]	; (80034cc <HAL_InitTick+0xe4>)
 8003402:	f043 0310 	orr.w	r3, r3, #16
 8003406:	6413      	str	r3, [r2, #64]	; 0x40
 8003408:	4b30      	ldr	r3, [pc, #192]	; (80034cc <HAL_InitTick+0xe4>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003414:	f107 0210 	add.w	r2, r7, #16
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f001 fdbe 	bl	8004fa0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d103      	bne.n	8003436 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800342e:	f001 fd8f 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
 8003432:	6378      	str	r0, [r7, #52]	; 0x34
 8003434:	e004      	b.n	8003440 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003436:	f001 fd8b 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
 800343a:	4603      	mov	r3, r0
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003442:	4a23      	ldr	r2, [pc, #140]	; (80034d0 <HAL_InitTick+0xe8>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	0c9b      	lsrs	r3, r3, #18
 800344a:	3b01      	subs	r3, #1
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800344e:	4b21      	ldr	r3, [pc, #132]	; (80034d4 <HAL_InitTick+0xec>)
 8003450:	4a21      	ldr	r2, [pc, #132]	; (80034d8 <HAL_InitTick+0xf0>)
 8003452:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003454:	4b1f      	ldr	r3, [pc, #124]	; (80034d4 <HAL_InitTick+0xec>)
 8003456:	f240 32e7 	movw	r2, #999	; 0x3e7
 800345a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800345c:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <HAL_InitTick+0xec>)
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003462:	4b1c      	ldr	r3, [pc, #112]	; (80034d4 <HAL_InitTick+0xec>)
 8003464:	2200      	movs	r2, #0
 8003466:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003468:	4b1a      	ldr	r3, [pc, #104]	; (80034d4 <HAL_InitTick+0xec>)
 800346a:	2200      	movs	r2, #0
 800346c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800346e:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_InitTick+0xec>)
 8003470:	2200      	movs	r2, #0
 8003472:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003474:	4817      	ldr	r0, [pc, #92]	; (80034d4 <HAL_InitTick+0xec>)
 8003476:	f001 fdc5 	bl	8005004 <HAL_TIM_Base_Init>
 800347a:	4603      	mov	r3, r0
 800347c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003480:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003484:	2b00      	cmp	r3, #0
 8003486:	d11b      	bne.n	80034c0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003488:	4812      	ldr	r0, [pc, #72]	; (80034d4 <HAL_InitTick+0xec>)
 800348a:	f001 fe0b 	bl	80050a4 <HAL_TIM_Base_Start_IT>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003494:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003498:	2b00      	cmp	r3, #0
 800349a:	d111      	bne.n	80034c0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800349c:	2036      	movs	r0, #54	; 0x36
 800349e:	f000 fb09 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b0f      	cmp	r3, #15
 80034a6:	d808      	bhi.n	80034ba <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80034a8:	2200      	movs	r2, #0
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	2036      	movs	r0, #54	; 0x36
 80034ae:	f000 fae5 	bl	8003a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <HAL_InitTick+0xf4>)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	e002      	b.n	80034c0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80034c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3738      	adds	r7, #56	; 0x38
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40023800 	.word	0x40023800
 80034d0:	431bde83 	.word	0x431bde83
 80034d4:	20000b64 	.word	0x20000b64
 80034d8:	40001000 	.word	0x40001000
 80034dc:	20000010 	.word	0x20000010

080034e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80034e4:	e7fe      	b.n	80034e4 <NMI_Handler+0x4>

080034e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ea:	e7fe      	b.n	80034ea <HardFault_Handler+0x4>

080034ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034f0:	e7fe      	b.n	80034f0 <MemManage_Handler+0x4>

080034f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034f6:	e7fe      	b.n	80034f6 <BusFault_Handler+0x4>

080034f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034fc:	e7fe      	b.n	80034fc <UsageFault_Handler+0x4>

080034fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003510:	2001      	movs	r0, #1
 8003512:	f001 f895 	bl	8004640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <DMA1_Stream1_IRQHandler+0x10>)
 8003522:	f000 fc6d 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000480 	.word	0x20000480

08003530 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <DMA1_Stream3_IRQHandler+0x10>)
 8003536:	f000 fc63 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000420 	.word	0x20000420

08003544 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003548:	4802      	ldr	r0, [pc, #8]	; (8003554 <DMA1_Stream5_IRQHandler+0x10>)
 800354a:	f000 fc59 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200003c0 	.word	0x200003c0

08003558 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800355c:	4802      	ldr	r0, [pc, #8]	; (8003568 <TIM1_CC_IRQHandler+0x10>)
 800355e:	f001 ff93 	bl	8005488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2000024c 	.word	0x2000024c

0800356c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
	uint8_t error;

	if((__HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE) != RESET))
 8003576:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <USART1_IRQHandler+0x74>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b10      	cmp	r3, #16
 8003582:	d126      	bne.n	80035d2 <USART1_IRQHandler+0x66>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8003584:	2300      	movs	r3, #0
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <USART1_IRQHandler+0x74>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <USART1_IRQHandler+0x74>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	607b      	str	r3, [r7, #4]
 8003598:	687b      	ldr	r3, [r7, #4]

		tmp = huart1.Instance->SR;
 800359a:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <USART1_IRQHandler+0x74>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60fb      	str	r3, [r7, #12]
		tmp = huart1.Instance->DR;
 80035a2:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <USART1_IRQHandler+0x74>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	60fb      	str	r3, [r7, #12]

		HAL_UART_DMAStop(&huart1);
 80035aa:	480d      	ldr	r0, [pc, #52]	; (80035e0 <USART1_IRQHandler+0x74>)
 80035ac:	f002 fe50 	bl	8006250 <HAL_UART_DMAStop>

		tmp =  USART_BUF_SIZE - hdma_usart1_rx.Instance->NDTR;
 80035b0:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <USART1_IRQHandler+0x78>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80035ba:	60fb      	str	r3, [r7, #12]

		HAL_UART_Receive_DMA(&huart1, g_usart1_rx_buf, USART_BUF_SIZE);
 80035bc:	2240      	movs	r2, #64	; 0x40
 80035be:	490a      	ldr	r1, [pc, #40]	; (80035e8 <USART1_IRQHandler+0x7c>)
 80035c0:	4807      	ldr	r0, [pc, #28]	; (80035e0 <USART1_IRQHandler+0x74>)
 80035c2:	f002 fe15 	bl	80061f0 <HAL_UART_Receive_DMA>

		error=Lidar_get_distance(g_usart1_rx_buf, 9);
 80035c6:	2109      	movs	r1, #9
 80035c8:	4807      	ldr	r0, [pc, #28]	; (80035e8 <USART1_IRQHandler+0x7c>)
 80035ca:	f7fd fe1d 	bl	8001208 <Lidar_get_distance>
 80035ce:	4603      	mov	r3, r0
 80035d0:	72fb      	strb	r3, [r7, #11]
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035d2:	4803      	ldr	r0, [pc, #12]	; (80035e0 <USART1_IRQHandler+0x74>)
 80035d4:	f002 ff20 	bl	8006418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	3710      	adds	r7, #16
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000294 	.word	0x20000294
 80035e4:	20000360 	.word	0x20000360
 80035e8:	20000b24 	.word	0x20000b24

080035ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <USART2_IRQHandler+0x10>)
 80035f2:	f002 ff11 	bl	8006418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	200002d8 	.word	0x200002d8

08003600 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <USART3_IRQHandler+0x10>)
 8003606:	f002 ff07 	bl	8006418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	2000031c 	.word	0x2000031c

08003614 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003618:	4802      	ldr	r0, [pc, #8]	; (8003624 <TIM6_DAC_IRQHandler+0x10>)
 800361a:	f001 ff35 	bl	8005488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000b64 	.word	0x20000b64

08003628 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800362c:	4802      	ldr	r0, [pc, #8]	; (8003638 <DMA2_Stream2_IRQHandler+0x10>)
 800362e:	f000 fbe7 	bl	8003e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000360 	.word	0x20000360

0800363c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return 1;
 8003640:	2301      	movs	r3, #1
}
 8003642:	4618      	mov	r0, r3
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <_kill>:

int _kill(int pid, int sig)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003656:	f006 fd81 	bl	800a15c <__errno>
 800365a:	4603      	mov	r3, r0
 800365c:	2216      	movs	r2, #22
 800365e:	601a      	str	r2, [r3, #0]
  return -1;
 8003660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003664:	4618      	mov	r0, r3
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <_exit>:

void _exit (int status)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003674:	f04f 31ff 	mov.w	r1, #4294967295
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff ffe7 	bl	800364c <_kill>
  while (1) {}    /* Make sure we hang here */
 800367e:	e7fe      	b.n	800367e <_exit+0x12>

08003680 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e00a      	b.n	80036a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003692:	f3af 8000 	nop.w
 8003696:	4601      	mov	r1, r0
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	60ba      	str	r2, [r7, #8]
 800369e:	b2ca      	uxtb	r2, r1
 80036a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	3301      	adds	r3, #1
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	dbf0      	blt.n	8003692 <_read+0x12>
  }

  return len;
 80036b0:	687b      	ldr	r3, [r7, #4]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3718      	adds	r7, #24
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	e009      	b.n	80036e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	1c5a      	adds	r2, r3, #1
 80036d0:	60ba      	str	r2, [r7, #8]
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	3301      	adds	r3, #1
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	dbf1      	blt.n	80036cc <_write+0x12>
  }
  return len;
 80036e8:	687b      	ldr	r3, [r7, #4]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_close>:

int _close(int file)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800371a:	605a      	str	r2, [r3, #4]
  return 0;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <_isatty>:

int _isatty(int file)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003732:	2301      	movs	r3, #1
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003764:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <_sbrk+0x5c>)
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <_sbrk+0x60>)
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <_sbrk+0x64>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d102      	bne.n	800377e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <_sbrk+0x64>)
 800377a:	4a12      	ldr	r2, [pc, #72]	; (80037c4 <_sbrk+0x68>)
 800377c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <_sbrk+0x64>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	429a      	cmp	r2, r3
 800378a:	d207      	bcs.n	800379c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800378c:	f006 fce6 	bl	800a15c <__errno>
 8003790:	4603      	mov	r3, r0
 8003792:	220c      	movs	r2, #12
 8003794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003796:	f04f 33ff 	mov.w	r3, #4294967295
 800379a:	e009      	b.n	80037b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <_sbrk+0x64>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <_sbrk+0x64>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <_sbrk+0x64>)
 80037ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ae:	68fb      	ldr	r3, [r7, #12]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20020000 	.word	0x20020000
 80037bc:	00000400 	.word	0x00000400
 80037c0:	20000bac 	.word	0x20000bac
 80037c4:	20005518 	.word	0x20005518

080037c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <SystemInit+0x20>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <SystemInit+0x20>)
 80037d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003824 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037f0:	480d      	ldr	r0, [pc, #52]	; (8003828 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037f2:	490e      	ldr	r1, [pc, #56]	; (800382c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037f4:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037f8:	e002      	b.n	8003800 <LoopCopyDataInit>

080037fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037fe:	3304      	adds	r3, #4

08003800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003804:	d3f9      	bcc.n	80037fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003806:	4a0b      	ldr	r2, [pc, #44]	; (8003834 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003808:	4c0b      	ldr	r4, [pc, #44]	; (8003838 <LoopFillZerobss+0x26>)
  movs r3, #0
 800380a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800380c:	e001      	b.n	8003812 <LoopFillZerobss>

0800380e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800380e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003810:	3204      	adds	r2, #4

08003812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003814:	d3fb      	bcc.n	800380e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003816:	f7ff ffd7 	bl	80037c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800381a:	f006 fca5 	bl	800a168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800381e:	f7fe fce5 	bl	80021ec <main>
  bx  lr    
 8003822:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800382c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003830:	0800ea70 	.word	0x0800ea70
  ldr r2, =_sbss
 8003834:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003838:	20005514 	.word	0x20005514

0800383c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800383c:	e7fe      	b.n	800383c <ADC_IRQHandler>
	...

08003840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003844:	4b0e      	ldr	r3, [pc, #56]	; (8003880 <HAL_Init+0x40>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a0d      	ldr	r2, [pc, #52]	; (8003880 <HAL_Init+0x40>)
 800384a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800384e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_Init+0x40>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <HAL_Init+0x40>)
 8003856:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800385a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800385c:	4b08      	ldr	r3, [pc, #32]	; (8003880 <HAL_Init+0x40>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a07      	ldr	r2, [pc, #28]	; (8003880 <HAL_Init+0x40>)
 8003862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003866:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003868:	2003      	movs	r0, #3
 800386a:	f000 f8fc 	bl	8003a66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800386e:	200f      	movs	r0, #15
 8003870:	f7ff fdba 	bl	80033e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003874:	f7ff fba4 	bl	8002fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40023c00 	.word	0x40023c00

08003884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_IncTick+0x20>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <HAL_IncTick+0x24>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4413      	add	r3, r2
 8003894:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <HAL_IncTick+0x24>)
 8003896:	6013      	str	r3, [r2, #0]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000014 	.word	0x20000014
 80038a8:	20000bb0 	.word	0x20000bb0

080038ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return uwTick;
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <HAL_GetTick+0x14>)
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20000bb0 	.word	0x20000bb0

080038c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038cc:	f7ff ffee 	bl	80038ac <HAL_GetTick>
 80038d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d005      	beq.n	80038ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_Delay+0x44>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ea:	bf00      	nop
 80038ec:	f7ff ffde 	bl	80038ac <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d8f7      	bhi.n	80038ec <HAL_Delay+0x28>
  {
  }
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000014 	.word	0x20000014

0800390c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <__NVIC_SetPriorityGrouping+0x44>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003928:	4013      	ands	r3, r2
 800392a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003934:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800393c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800393e:	4a04      	ldr	r2, [pc, #16]	; (8003950 <__NVIC_SetPriorityGrouping+0x44>)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	60d3      	str	r3, [r2, #12]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <__NVIC_GetPriorityGrouping+0x18>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	0a1b      	lsrs	r3, r3, #8
 800395e:	f003 0307 	and.w	r3, r3, #7
}
 8003962:	4618      	mov	r0, r3
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	e000ed00 	.word	0xe000ed00

08003970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	2b00      	cmp	r3, #0
 8003980:	db0b      	blt.n	800399a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	f003 021f 	and.w	r2, r3, #31
 8003988:	4907      	ldr	r1, [pc, #28]	; (80039a8 <__NVIC_EnableIRQ+0x38>)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	095b      	lsrs	r3, r3, #5
 8003990:	2001      	movs	r0, #1
 8003992:	fa00 f202 	lsl.w	r2, r0, r2
 8003996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	e000e100 	.word	0xe000e100

080039ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	6039      	str	r1, [r7, #0]
 80039b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db0a      	blt.n	80039d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	490c      	ldr	r1, [pc, #48]	; (80039f8 <__NVIC_SetPriority+0x4c>)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	0112      	lsls	r2, r2, #4
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	440b      	add	r3, r1
 80039d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d4:	e00a      	b.n	80039ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4908      	ldr	r1, [pc, #32]	; (80039fc <__NVIC_SetPriority+0x50>)
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	3b04      	subs	r3, #4
 80039e4:	0112      	lsls	r2, r2, #4
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	440b      	add	r3, r1
 80039ea:	761a      	strb	r2, [r3, #24]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	e000e100 	.word	0xe000e100
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b089      	sub	sp, #36	; 0x24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f1c3 0307 	rsb	r3, r3, #7
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	bf28      	it	cs
 8003a1e:	2304      	movcs	r3, #4
 8003a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3304      	adds	r3, #4
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d902      	bls.n	8003a30 <NVIC_EncodePriority+0x30>
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3b03      	subs	r3, #3
 8003a2e:	e000      	b.n	8003a32 <NVIC_EncodePriority+0x32>
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a34:	f04f 32ff 	mov.w	r2, #4294967295
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	401a      	ands	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a48:	f04f 31ff 	mov.w	r1, #4294967295
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	43d9      	mvns	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a58:	4313      	orrs	r3, r2
         );
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3724      	adds	r7, #36	; 0x24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ff4c 	bl	800390c <__NVIC_SetPriorityGrouping>
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a8e:	f7ff ff61 	bl	8003954 <__NVIC_GetPriorityGrouping>
 8003a92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	6978      	ldr	r0, [r7, #20]
 8003a9a:	f7ff ffb1 	bl	8003a00 <NVIC_EncodePriority>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff80 	bl	80039ac <__NVIC_SetPriority>
}
 8003aac:	bf00      	nop
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff ff54 	bl	8003970 <__NVIC_EnableIRQ>
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003adc:	f7ff fee6 	bl	80038ac <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e099      	b.n	8003c20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b0c:	e00f      	b.n	8003b2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b0e:	f7ff fecd 	bl	80038ac <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b05      	cmp	r3, #5
 8003b1a:	d908      	bls.n	8003b2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2203      	movs	r2, #3
 8003b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e078      	b.n	8003c20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e8      	bne.n	8003b0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4b38      	ldr	r3, [pc, #224]	; (8003c28 <HAL_DMA_Init+0x158>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d107      	bne.n	8003b98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	4313      	orrs	r3, r2
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 0307 	bic.w	r3, r3, #7
 8003bae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d117      	bne.n	8003bf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00e      	beq.n	8003bf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fb01 	bl	80041dc <DMA_CheckFifoParam>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2240      	movs	r2, #64	; 0x40
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e016      	b.n	8003c20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fab8 	bl	8004170 <DMA_CalcBaseAndBitshift>
 8003c00:	4603      	mov	r3, r0
 8003c02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	223f      	movs	r2, #63	; 0x3f
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	f010803f 	.word	0xf010803f

08003c2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_DMA_Start_IT+0x26>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e040      	b.n	8003cd4 <HAL_DMA_Start_IT+0xa8>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d12f      	bne.n	8003cc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 fa4a 	bl	8004114 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	223f      	movs	r2, #63	; 0x3f
 8003c86:	409a      	lsls	r2, r3
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0216 	orr.w	r2, r2, #22
 8003c9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0208 	orr.w	r2, r2, #8
 8003cb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e005      	b.n	8003cd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cea:	f7ff fddf 	bl	80038ac <HAL_GetTick>
 8003cee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d008      	beq.n	8003d0e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2280      	movs	r2, #128	; 0x80
 8003d00:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e052      	b.n	8003db4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0216 	bic.w	r2, r2, #22
 8003d1c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d2c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <HAL_DMA_Abort+0x62>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0208 	bic.w	r2, r2, #8
 8003d4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d5e:	e013      	b.n	8003d88 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d60:	f7ff fda4 	bl	80038ac <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d90c      	bls.n	8003d88 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2220      	movs	r2, #32
 8003d72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2203      	movs	r2, #3
 8003d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e015      	b.n	8003db4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e4      	bne.n	8003d60 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	223f      	movs	r2, #63	; 0x3f
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d004      	beq.n	8003dda <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00c      	b.n	8003df4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2205      	movs	r2, #5
 8003dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0201 	bic.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e0c:	4b8e      	ldr	r3, [pc, #568]	; (8004048 <HAL_DMA_IRQHandler+0x248>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a8e      	ldr	r2, [pc, #568]	; (800404c <HAL_DMA_IRQHandler+0x24c>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	0a9b      	lsrs	r3, r3, #10
 8003e18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	2208      	movs	r2, #8
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01a      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0204 	bic.w	r2, r2, #4
 8003e52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	2208      	movs	r2, #8
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e70:	2201      	movs	r2, #1
 8003e72:	409a      	lsls	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d012      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00b      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	2201      	movs	r2, #1
 8003e90:	409a      	lsls	r2, r3
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f043 0202 	orr.w	r2, r3, #2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea6:	2204      	movs	r2, #4
 8003ea8:	409a      	lsls	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d012      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	f043 0204 	orr.w	r2, r3, #4
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	2210      	movs	r2, #16
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d043      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d03c      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	2210      	movs	r2, #16
 8003efc:	409a      	lsls	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d018      	beq.n	8003f42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d108      	bne.n	8003f30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d024      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	4798      	blx	r3
 8003f2e:	e01f      	b.n	8003f70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01b      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	4798      	blx	r3
 8003f40:	e016      	b.n	8003f70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d107      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0208 	bic.w	r2, r2, #8
 8003f5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f74:	2220      	movs	r2, #32
 8003f76:	409a      	lsls	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 808f 	beq.w	80040a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8087 	beq.w	80040a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	2220      	movs	r2, #32
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b05      	cmp	r3, #5
 8003fa8:	d136      	bne.n	8004018 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0216 	bic.w	r2, r2, #22
 8003fb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695a      	ldr	r2, [r3, #20]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <HAL_DMA_IRQHandler+0x1da>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0208 	bic.w	r2, r2, #8
 8003fe8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	223f      	movs	r2, #63	; 0x3f
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400a:	2b00      	cmp	r3, #0
 800400c:	d07e      	beq.n	800410c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	4798      	blx	r3
        }
        return;
 8004016:	e079      	b.n	800410c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01d      	beq.n	8004062 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10d      	bne.n	8004050 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004038:	2b00      	cmp	r3, #0
 800403a:	d031      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
 8004044:	e02c      	b.n	80040a0 <HAL_DMA_IRQHandler+0x2a0>
 8004046:	bf00      	nop
 8004048:	2000000c 	.word	0x2000000c
 800404c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d023      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
 8004060:	e01e      	b.n	80040a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10f      	bne.n	8004090 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0210 	bic.w	r2, r2, #16
 800407e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d032      	beq.n	800410e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d022      	beq.n	80040fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2205      	movs	r2, #5
 80040b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d307      	bcc.n	80040e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f2      	bne.n	80040cc <HAL_DMA_IRQHandler+0x2cc>
 80040e6:	e000      	b.n	80040ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
 800410a:	e000      	b.n	800410e <HAL_DMA_IRQHandler+0x30e>
        return;
 800410c:	bf00      	nop
    }
  }
}
 800410e:	3718      	adds	r7, #24
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004130:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b40      	cmp	r3, #64	; 0x40
 8004140:	d108      	bne.n	8004154 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004152:	e007      	b.n	8004164 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	60da      	str	r2, [r3, #12]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	3b10      	subs	r3, #16
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <DMA_CalcBaseAndBitshift+0x64>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800418a:	4a13      	ldr	r2, [pc, #76]	; (80041d8 <DMA_CalcBaseAndBitshift+0x68>)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4413      	add	r3, r2
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b03      	cmp	r3, #3
 800419c:	d909      	bls.n	80041b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041a6:	f023 0303 	bic.w	r3, r3, #3
 80041aa:	1d1a      	adds	r2, r3, #4
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	659a      	str	r2, [r3, #88]	; 0x58
 80041b0:	e007      	b.n	80041c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ba:	f023 0303 	bic.w	r3, r3, #3
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	aaaaaaab 	.word	0xaaaaaaab
 80041d8:	0800e644 	.word	0x0800e644

080041dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11f      	bne.n	8004236 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d856      	bhi.n	80042aa <DMA_CheckFifoParam+0xce>
 80041fc:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <DMA_CheckFifoParam+0x28>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004215 	.word	0x08004215
 8004208:	08004227 	.word	0x08004227
 800420c:	08004215 	.word	0x08004215
 8004210:	080042ab 	.word	0x080042ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d046      	beq.n	80042ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004224:	e043      	b.n	80042ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800422e:	d140      	bne.n	80042b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004234:	e03d      	b.n	80042b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423e:	d121      	bne.n	8004284 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b03      	cmp	r3, #3
 8004244:	d837      	bhi.n	80042b6 <DMA_CheckFifoParam+0xda>
 8004246:	a201      	add	r2, pc, #4	; (adr r2, 800424c <DMA_CheckFifoParam+0x70>)
 8004248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424c:	0800425d 	.word	0x0800425d
 8004250:	08004263 	.word	0x08004263
 8004254:	0800425d 	.word	0x0800425d
 8004258:	08004275 	.word	0x08004275
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      break;
 8004260:	e030      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d025      	beq.n	80042ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004272:	e022      	b.n	80042ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800427c:	d11f      	bne.n	80042be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004282:	e01c      	b.n	80042be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d903      	bls.n	8004292 <DMA_CheckFifoParam+0xb6>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d003      	beq.n	8004298 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004290:	e018      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
      break;
 8004296:	e015      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00e      	beq.n	80042c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
      break;
 80042a8:	e00b      	b.n	80042c2 <DMA_CheckFifoParam+0xe6>
      break;
 80042aa:	bf00      	nop
 80042ac:	e00a      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
      break;
 80042ae:	bf00      	nop
 80042b0:	e008      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
      break;
 80042b2:	bf00      	nop
 80042b4:	e006      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
      break;
 80042b6:	bf00      	nop
 80042b8:	e004      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
      break;
 80042ba:	bf00      	nop
 80042bc:	e002      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80042be:	bf00      	nop
 80042c0:	e000      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
      break;
 80042c2:	bf00      	nop
    }
  } 
  
  return status; 
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop

080042d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	; 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	e16b      	b.n	80045c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042f0:	2201      	movs	r2, #1
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4013      	ands	r3, r2
 8004302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	429a      	cmp	r2, r3
 800430a:	f040 815a 	bne.w	80045c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d005      	beq.n	8004326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004322:	2b02      	cmp	r3, #2
 8004324:	d130      	bne.n	8004388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	2203      	movs	r2, #3
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43db      	mvns	r3, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4013      	ands	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4313      	orrs	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800435c:	2201      	movs	r2, #1
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 0201 	and.w	r2, r3, #1
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	4313      	orrs	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	2b03      	cmp	r3, #3
 8004392:	d017      	beq.n	80043c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	2203      	movs	r2, #3
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	fa02 f303 	lsl.w	r3, r2, r3
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d123      	bne.n	8004418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	08da      	lsrs	r2, r3, #3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3208      	adds	r2, #8
 80043d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	220f      	movs	r2, #15
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	08da      	lsrs	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3208      	adds	r2, #8
 8004412:	69b9      	ldr	r1, [r7, #24]
 8004414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0203 	and.w	r2, r3, #3
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80b4 	beq.w	80045c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	4b60      	ldr	r3, [pc, #384]	; (80045e0 <HAL_GPIO_Init+0x30c>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	4a5f      	ldr	r2, [pc, #380]	; (80045e0 <HAL_GPIO_Init+0x30c>)
 8004464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004468:	6453      	str	r3, [r2, #68]	; 0x44
 800446a:	4b5d      	ldr	r3, [pc, #372]	; (80045e0 <HAL_GPIO_Init+0x30c>)
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004476:	4a5b      	ldr	r2, [pc, #364]	; (80045e4 <HAL_GPIO_Init+0x310>)
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	089b      	lsrs	r3, r3, #2
 800447c:	3302      	adds	r3, #2
 800447e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	220f      	movs	r2, #15
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a52      	ldr	r2, [pc, #328]	; (80045e8 <HAL_GPIO_Init+0x314>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d02b      	beq.n	80044fa <HAL_GPIO_Init+0x226>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a51      	ldr	r2, [pc, #324]	; (80045ec <HAL_GPIO_Init+0x318>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d025      	beq.n	80044f6 <HAL_GPIO_Init+0x222>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a50      	ldr	r2, [pc, #320]	; (80045f0 <HAL_GPIO_Init+0x31c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01f      	beq.n	80044f2 <HAL_GPIO_Init+0x21e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a4f      	ldr	r2, [pc, #316]	; (80045f4 <HAL_GPIO_Init+0x320>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d019      	beq.n	80044ee <HAL_GPIO_Init+0x21a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a4e      	ldr	r2, [pc, #312]	; (80045f8 <HAL_GPIO_Init+0x324>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_GPIO_Init+0x216>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4d      	ldr	r2, [pc, #308]	; (80045fc <HAL_GPIO_Init+0x328>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00d      	beq.n	80044e6 <HAL_GPIO_Init+0x212>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4c      	ldr	r2, [pc, #304]	; (8004600 <HAL_GPIO_Init+0x32c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <HAL_GPIO_Init+0x20e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a4b      	ldr	r2, [pc, #300]	; (8004604 <HAL_GPIO_Init+0x330>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_GPIO_Init+0x20a>
 80044da:	2307      	movs	r3, #7
 80044dc:	e00e      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044de:	2308      	movs	r3, #8
 80044e0:	e00c      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044e2:	2306      	movs	r3, #6
 80044e4:	e00a      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044e6:	2305      	movs	r3, #5
 80044e8:	e008      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044ea:	2304      	movs	r3, #4
 80044ec:	e006      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044ee:	2303      	movs	r3, #3
 80044f0:	e004      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e002      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044fa:	2300      	movs	r3, #0
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	f002 0203 	and.w	r2, r2, #3
 8004502:	0092      	lsls	r2, r2, #2
 8004504:	4093      	lsls	r3, r2
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800450c:	4935      	ldr	r1, [pc, #212]	; (80045e4 <HAL_GPIO_Init+0x310>)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	3302      	adds	r3, #2
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800451a:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <HAL_GPIO_Init+0x334>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800453e:	4a32      	ldr	r2, [pc, #200]	; (8004608 <HAL_GPIO_Init+0x334>)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004544:	4b30      	ldr	r3, [pc, #192]	; (8004608 <HAL_GPIO_Init+0x334>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004568:	4a27      	ldr	r2, [pc, #156]	; (8004608 <HAL_GPIO_Init+0x334>)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800456e:	4b26      	ldr	r3, [pc, #152]	; (8004608 <HAL_GPIO_Init+0x334>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004592:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <HAL_GPIO_Init+0x334>)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004598:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <HAL_GPIO_Init+0x334>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045bc:	4a12      	ldr	r2, [pc, #72]	; (8004608 <HAL_GPIO_Init+0x334>)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3301      	adds	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2b0f      	cmp	r3, #15
 80045cc:	f67f ae90 	bls.w	80042f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045d0:	bf00      	nop
 80045d2:	bf00      	nop
 80045d4:	3724      	adds	r7, #36	; 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40013800 	.word	0x40013800
 80045e8:	40020000 	.word	0x40020000
 80045ec:	40020400 	.word	0x40020400
 80045f0:	40020800 	.word	0x40020800
 80045f4:	40020c00 	.word	0x40020c00
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40021400 	.word	0x40021400
 8004600:	40021800 	.word	0x40021800
 8004604:	40021c00 	.word	0x40021c00
 8004608:	40013c00 	.word	0x40013c00

0800460c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	807b      	strh	r3, [r7, #2]
 8004618:	4613      	mov	r3, r2
 800461a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800461c:	787b      	ldrb	r3, [r7, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004622:	887a      	ldrh	r2, [r7, #2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004628:	e003      	b.n	8004632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800462a:	887b      	ldrh	r3, [r7, #2]
 800462c:	041a      	lsls	r2, r3, #16
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	619a      	str	r2, [r3, #24]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
	...

08004640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	4013      	ands	r3, r2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d006      	beq.n	8004664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004656:	4a05      	ldr	r2, [pc, #20]	; (800466c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004658:	88fb      	ldrh	r3, [r7, #6]
 800465a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fc80 	bl	8002f64 <HAL_GPIO_EXTI_Callback>
  }
}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40013c00 	.word	0x40013c00

08004670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e267      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d075      	beq.n	800477a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800468e:	4b88      	ldr	r3, [pc, #544]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 030c 	and.w	r3, r3, #12
 8004696:	2b04      	cmp	r3, #4
 8004698:	d00c      	beq.n	80046b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800469a:	4b85      	ldr	r3, [pc, #532]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d112      	bne.n	80046cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046a6:	4b82      	ldr	r3, [pc, #520]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b2:	d10b      	bne.n	80046cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b4:	4b7e      	ldr	r3, [pc, #504]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d05b      	beq.n	8004778 <HAL_RCC_OscConfig+0x108>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d157      	bne.n	8004778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e242      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d4:	d106      	bne.n	80046e4 <HAL_RCC_OscConfig+0x74>
 80046d6:	4b76      	ldr	r3, [pc, #472]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a75      	ldr	r2, [pc, #468]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	e01d      	b.n	8004720 <HAL_RCC_OscConfig+0xb0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046ec:	d10c      	bne.n	8004708 <HAL_RCC_OscConfig+0x98>
 80046ee:	4b70      	ldr	r3, [pc, #448]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6f      	ldr	r2, [pc, #444]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	4b6d      	ldr	r3, [pc, #436]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a6c      	ldr	r2, [pc, #432]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e00b      	b.n	8004720 <HAL_RCC_OscConfig+0xb0>
 8004708:	4b69      	ldr	r3, [pc, #420]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a68      	ldr	r2, [pc, #416]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800470e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	4b66      	ldr	r3, [pc, #408]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a65      	ldr	r2, [pc, #404]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800471a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800471e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d013      	beq.n	8004750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004728:	f7ff f8c0 	bl	80038ac <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004730:	f7ff f8bc 	bl	80038ac <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e207      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004742:	4b5b      	ldr	r3, [pc, #364]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCC_OscConfig+0xc0>
 800474e:	e014      	b.n	800477a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7ff f8ac 	bl	80038ac <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004758:	f7ff f8a8 	bl	80038ac <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b64      	cmp	r3, #100	; 0x64
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e1f3      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800476a:	4b51      	ldr	r3, [pc, #324]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0xe8>
 8004776:	e000      	b.n	800477a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d063      	beq.n	800484e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004786:	4b4a      	ldr	r3, [pc, #296]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00b      	beq.n	80047aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004792:	4b47      	ldr	r3, [pc, #284]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800479a:	2b08      	cmp	r3, #8
 800479c:	d11c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479e:	4b44      	ldr	r3, [pc, #272]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d116      	bne.n	80047d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047aa:	4b41      	ldr	r3, [pc, #260]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <HAL_RCC_OscConfig+0x152>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d001      	beq.n	80047c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e1c7      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c2:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4937      	ldr	r1, [pc, #220]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047d6:	e03a      	b.n	800484e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e0:	4b34      	ldr	r3, [pc, #208]	; (80048b4 <HAL_RCC_OscConfig+0x244>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7ff f861 	bl	80038ac <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047ee:	f7ff f85d 	bl	80038ac <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e1a8      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004800:	4b2b      	ldr	r3, [pc, #172]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480c:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4925      	ldr	r1, [pc, #148]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 800481c:	4313      	orrs	r3, r2
 800481e:	600b      	str	r3, [r1, #0]
 8004820:	e015      	b.n	800484e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <HAL_RCC_OscConfig+0x244>)
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7ff f840 	bl	80038ac <HAL_GetTick>
 800482c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004830:	f7ff f83c 	bl	80038ac <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e187      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004842:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d036      	beq.n	80048c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004862:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <HAL_RCC_OscConfig+0x248>)
 8004864:	2201      	movs	r2, #1
 8004866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7ff f820 	bl	80038ac <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004870:	f7ff f81c 	bl	80038ac <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e167      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004882:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCC_OscConfig+0x240>)
 8004884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x200>
 800488e:	e01b      	b.n	80048c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004890:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <HAL_RCC_OscConfig+0x248>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004896:	f7ff f809 	bl	80038ac <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800489c:	e00e      	b.n	80048bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800489e:	f7ff f805 	bl	80038ac <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d907      	bls.n	80048bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e150      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
 80048b0:	40023800 	.word	0x40023800
 80048b4:	42470000 	.word	0x42470000
 80048b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048bc:	4b88      	ldr	r3, [pc, #544]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1ea      	bne.n	800489e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 8097 	beq.w	8004a04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d6:	2300      	movs	r3, #0
 80048d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048da:	4b81      	ldr	r3, [pc, #516]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10f      	bne.n	8004906 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e6:	2300      	movs	r3, #0
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	4b7d      	ldr	r3, [pc, #500]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	4a7c      	ldr	r2, [pc, #496]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f4:	6413      	str	r3, [r2, #64]	; 0x40
 80048f6:	4b7a      	ldr	r3, [pc, #488]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fe:	60bb      	str	r3, [r7, #8]
 8004900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004902:	2301      	movs	r3, #1
 8004904:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004906:	4b77      	ldr	r3, [pc, #476]	; (8004ae4 <HAL_RCC_OscConfig+0x474>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490e:	2b00      	cmp	r3, #0
 8004910:	d118      	bne.n	8004944 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004912:	4b74      	ldr	r3, [pc, #464]	; (8004ae4 <HAL_RCC_OscConfig+0x474>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a73      	ldr	r2, [pc, #460]	; (8004ae4 <HAL_RCC_OscConfig+0x474>)
 8004918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491e:	f7fe ffc5 	bl	80038ac <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004926:	f7fe ffc1 	bl	80038ac <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e10c      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004938:	4b6a      	ldr	r3, [pc, #424]	; (8004ae4 <HAL_RCC_OscConfig+0x474>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d106      	bne.n	800495a <HAL_RCC_OscConfig+0x2ea>
 800494c:	4b64      	ldr	r3, [pc, #400]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	4a63      	ldr	r2, [pc, #396]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	6713      	str	r3, [r2, #112]	; 0x70
 8004958:	e01c      	b.n	8004994 <HAL_RCC_OscConfig+0x324>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b05      	cmp	r3, #5
 8004960:	d10c      	bne.n	800497c <HAL_RCC_OscConfig+0x30c>
 8004962:	4b5f      	ldr	r3, [pc, #380]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	4a5e      	ldr	r2, [pc, #376]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004968:	f043 0304 	orr.w	r3, r3, #4
 800496c:	6713      	str	r3, [r2, #112]	; 0x70
 800496e:	4b5c      	ldr	r3, [pc, #368]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	4a5b      	ldr	r2, [pc, #364]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	6713      	str	r3, [r2, #112]	; 0x70
 800497a:	e00b      	b.n	8004994 <HAL_RCC_OscConfig+0x324>
 800497c:	4b58      	ldr	r3, [pc, #352]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 800497e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004980:	4a57      	ldr	r2, [pc, #348]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	6713      	str	r3, [r2, #112]	; 0x70
 8004988:	4b55      	ldr	r3, [pc, #340]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	4a54      	ldr	r2, [pc, #336]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 800498e:	f023 0304 	bic.w	r3, r3, #4
 8004992:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d015      	beq.n	80049c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499c:	f7fe ff86 	bl	80038ac <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	f7fe ff82 	bl	80038ac <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e0cb      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ba:	4b49      	ldr	r3, [pc, #292]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80049bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0ee      	beq.n	80049a4 <HAL_RCC_OscConfig+0x334>
 80049c6:	e014      	b.n	80049f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c8:	f7fe ff70 	bl	80038ac <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ce:	e00a      	b.n	80049e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d0:	f7fe ff6c 	bl	80038ac <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f241 3288 	movw	r2, #5000	; 0x1388
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e0b5      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e6:	4b3e      	ldr	r3, [pc, #248]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80049e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1ee      	bne.n	80049d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d105      	bne.n	8004a04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049f8:	4b39      	ldr	r3, [pc, #228]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80049fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fc:	4a38      	ldr	r2, [pc, #224]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 80049fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80a1 	beq.w	8004b50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a0e:	4b34      	ldr	r3, [pc, #208]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d05c      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d141      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a22:	4b31      	ldr	r3, [pc, #196]	; (8004ae8 <HAL_RCC_OscConfig+0x478>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7fe ff40 	bl	80038ac <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a30:	f7fe ff3c 	bl	80038ac <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e087      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a42:	4b27      	ldr	r3, [pc, #156]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69da      	ldr	r2, [r3, #28]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	019b      	lsls	r3, r3, #6
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	3b01      	subs	r3, #1
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	061b      	lsls	r3, r3, #24
 8004a72:	491b      	ldr	r1, [pc, #108]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a78:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <HAL_RCC_OscConfig+0x478>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7e:	f7fe ff15 	bl	80038ac <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a84:	e008      	b.n	8004a98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a86:	f7fe ff11 	bl	80038ac <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d901      	bls.n	8004a98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e05c      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a98:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <HAL_RCC_OscConfig+0x416>
 8004aa4:	e054      	b.n	8004b50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa6:	4b10      	ldr	r3, [pc, #64]	; (8004ae8 <HAL_RCC_OscConfig+0x478>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aac:	f7fe fefe 	bl	80038ac <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ab4:	f7fe fefa 	bl	80038ac <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e045      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x444>
 8004ad2:	e03d      	b.n	8004b50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d107      	bne.n	8004aec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e038      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	40007000 	.word	0x40007000
 8004ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004aec:	4b1b      	ldr	r3, [pc, #108]	; (8004b5c <HAL_RCC_OscConfig+0x4ec>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d028      	beq.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d121      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d11a      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d111      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	3b01      	subs	r3, #1
 8004b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d107      	bne.n	8004b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800

08004b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0cc      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b74:	4b68      	ldr	r3, [pc, #416]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d90c      	bls.n	8004b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b65      	ldr	r3, [pc, #404]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b63      	ldr	r3, [pc, #396]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e0b8      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bb4:	4b59      	ldr	r3, [pc, #356]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4a58      	ldr	r2, [pc, #352]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bcc:	4b53      	ldr	r3, [pc, #332]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	4a52      	ldr	r2, [pc, #328]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd8:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	494d      	ldr	r1, [pc, #308]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d044      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d107      	bne.n	8004c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bfe:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d119      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e07f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d003      	beq.n	8004c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1e:	4b3f      	ldr	r3, [pc, #252]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e06f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c2e:	4b3b      	ldr	r3, [pc, #236]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e067      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3e:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f023 0203 	bic.w	r2, r3, #3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4934      	ldr	r1, [pc, #208]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c50:	f7fe fe2c 	bl	80038ac <HAL_GetTick>
 8004c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c56:	e00a      	b.n	8004c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c58:	f7fe fe28 	bl	80038ac <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e04f      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6e:	4b2b      	ldr	r3, [pc, #172]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 020c 	and.w	r2, r3, #12
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d1eb      	bne.n	8004c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c80:	4b25      	ldr	r3, [pc, #148]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d20c      	bcs.n	8004ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c96:	4b20      	ldr	r3, [pc, #128]	; (8004d18 <HAL_RCC_ClockConfig+0x1b8>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e032      	b.n	8004d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d008      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cb4:	4b19      	ldr	r3, [pc, #100]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	4916      	ldr	r1, [pc, #88]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cd2:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	490e      	ldr	r1, [pc, #56]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ce6:	f000 f821 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004cea:	4602      	mov	r2, r0
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	091b      	lsrs	r3, r3, #4
 8004cf2:	f003 030f 	and.w	r3, r3, #15
 8004cf6:	490a      	ldr	r1, [pc, #40]	; (8004d20 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf8:	5ccb      	ldrb	r3, [r1, r3]
 8004cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004cfe:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_RCC_ClockConfig+0x1c8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fe fb6e 	bl	80033e8 <HAL_InitTick>

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40023c00 	.word	0x40023c00
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	0800e62c 	.word	0x0800e62c
 8004d24:	2000000c 	.word	0x2000000c
 8004d28:	20000010 	.word	0x20000010

08004d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d30:	b094      	sub	sp, #80	; 0x50
 8004d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	647b      	str	r3, [r7, #68]	; 0x44
 8004d38:	2300      	movs	r3, #0
 8004d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d44:	4b79      	ldr	r3, [pc, #484]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 030c 	and.w	r3, r3, #12
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d00d      	beq.n	8004d6c <HAL_RCC_GetSysClockFreq+0x40>
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	f200 80e1 	bhi.w	8004f18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d002      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0x34>
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d003      	beq.n	8004d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d5e:	e0db      	b.n	8004f18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d60:	4b73      	ldr	r3, [pc, #460]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004d64:	e0db      	b.n	8004f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d66:	4b73      	ldr	r3, [pc, #460]	; (8004f34 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d6a:	e0d8      	b.n	8004f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d6c:	4b6f      	ldr	r3, [pc, #444]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d76:	4b6d      	ldr	r3, [pc, #436]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d063      	beq.n	8004e4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d82:	4b6a      	ldr	r3, [pc, #424]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	099b      	lsrs	r3, r3, #6
 8004d88:	2200      	movs	r2, #0
 8004d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d94:	633b      	str	r3, [r7, #48]	; 0x30
 8004d96:	2300      	movs	r3, #0
 8004d98:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	0159      	lsls	r1, r3, #5
 8004dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004db0:	0150      	lsls	r0, r2, #5
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4621      	mov	r1, r4
 8004db8:	1a51      	subs	r1, r2, r1
 8004dba:	6139      	str	r1, [r7, #16]
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	018b      	lsls	r3, r1, #6
 8004dd4:	4651      	mov	r1, sl
 8004dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dda:	4651      	mov	r1, sl
 8004ddc:	018a      	lsls	r2, r1, #6
 8004dde:	4651      	mov	r1, sl
 8004de0:	ebb2 0801 	subs.w	r8, r2, r1
 8004de4:	4659      	mov	r1, fp
 8004de6:	eb63 0901 	sbc.w	r9, r3, r1
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dfe:	4690      	mov	r8, r2
 8004e00:	4699      	mov	r9, r3
 8004e02:	4623      	mov	r3, r4
 8004e04:	eb18 0303 	adds.w	r3, r8, r3
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	462b      	mov	r3, r5
 8004e0c:	eb49 0303 	adc.w	r3, r9, r3
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e1e:	4629      	mov	r1, r5
 8004e20:	024b      	lsls	r3, r1, #9
 8004e22:	4621      	mov	r1, r4
 8004e24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e28:	4621      	mov	r1, r4
 8004e2a:	024a      	lsls	r2, r1, #9
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e32:	2200      	movs	r2, #0
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e3c:	f7fb ff24 	bl	8000c88 <__aeabi_uldivmod>
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4613      	mov	r3, r2
 8004e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e48:	e058      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e4a:	4b38      	ldr	r3, [pc, #224]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	099b      	lsrs	r3, r3, #6
 8004e50:	2200      	movs	r2, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	4611      	mov	r1, r2
 8004e56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e5a:	623b      	str	r3, [r7, #32]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e64:	4642      	mov	r2, r8
 8004e66:	464b      	mov	r3, r9
 8004e68:	f04f 0000 	mov.w	r0, #0
 8004e6c:	f04f 0100 	mov.w	r1, #0
 8004e70:	0159      	lsls	r1, r3, #5
 8004e72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e76:	0150      	lsls	r0, r2, #5
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4641      	mov	r1, r8
 8004e7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e82:	4649      	mov	r1, r9
 8004e84:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e9c:	ebb2 040a 	subs.w	r4, r2, sl
 8004ea0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	00eb      	lsls	r3, r5, #3
 8004eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eb2:	00e2      	lsls	r2, r4, #3
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	461d      	mov	r5, r3
 8004eb8:	4643      	mov	r3, r8
 8004eba:	18e3      	adds	r3, r4, r3
 8004ebc:	603b      	str	r3, [r7, #0]
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	eb45 0303 	adc.w	r3, r5, r3
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	028b      	lsls	r3, r1, #10
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004edc:	4621      	mov	r1, r4
 8004ede:	028a      	lsls	r2, r1, #10
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	61fa      	str	r2, [r7, #28]
 8004eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef0:	f7fb feca 	bl	8000c88 <__aeabi_uldivmod>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	4613      	mov	r3, r2
 8004efa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004efc:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	0c1b      	lsrs	r3, r3, #16
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	3301      	adds	r3, #1
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f16:	e002      	b.n	8004f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f18:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3750      	adds	r7, #80	; 0x50
 8004f24:	46bd      	mov	sp, r7
 8004f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	00f42400 	.word	0x00f42400
 8004f34:	007a1200 	.word	0x007a1200

08004f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f3c:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	2000000c 	.word	0x2000000c

08004f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f54:	f7ff fff0 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	0a9b      	lsrs	r3, r3, #10
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	4903      	ldr	r1, [pc, #12]	; (8004f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f66:	5ccb      	ldrb	r3, [r1, r3]
 8004f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800
 8004f74:	0800e63c 	.word	0x0800e63c

08004f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f7c:	f7ff ffdc 	bl	8004f38 <HAL_RCC_GetHCLKFreq>
 8004f80:	4602      	mov	r2, r0
 8004f82:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	0b5b      	lsrs	r3, r3, #13
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	4903      	ldr	r1, [pc, #12]	; (8004f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f8e:	5ccb      	ldrb	r3, [r1, r3]
 8004f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	0800e63c 	.word	0x0800e63c

08004fa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	220f      	movs	r2, #15
 8004fae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <HAL_RCC_GetClockConfig+0x5c>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f003 0203 	and.w	r2, r3, #3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <HAL_RCC_GetClockConfig+0x5c>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <HAL_RCC_GetClockConfig+0x5c>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_RCC_GetClockConfig+0x5c>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	08db      	lsrs	r3, r3, #3
 8004fda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004fe2:	4b07      	ldr	r3, [pc, #28]	; (8005000 <HAL_RCC_GetClockConfig+0x60>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0207 	and.w	r2, r3, #7
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	601a      	str	r2, [r3, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	40023800 	.word	0x40023800
 8005000:	40023c00 	.word	0x40023c00

08005004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e041      	b.n	800509a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fd fff4 	bl	8003018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3304      	adds	r3, #4
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f000 fcee 	bl	8005a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d001      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e04e      	b.n	800515a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0201 	orr.w	r2, r2, #1
 80050d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a23      	ldr	r2, [pc, #140]	; (8005168 <HAL_TIM_Base_Start_IT+0xc4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d022      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e6:	d01d      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1f      	ldr	r2, [pc, #124]	; (800516c <HAL_TIM_Base_Start_IT+0xc8>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d018      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <HAL_TIM_Base_Start_IT+0xcc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d013      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <HAL_TIM_Base_Start_IT+0xd0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00e      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1b      	ldr	r2, [pc, #108]	; (8005178 <HAL_TIM_Base_Start_IT+0xd4>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d009      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a19      	ldr	r2, [pc, #100]	; (800517c <HAL_TIM_Base_Start_IT+0xd8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_TIM_Base_Start_IT+0x80>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a18      	ldr	r2, [pc, #96]	; (8005180 <HAL_TIM_Base_Start_IT+0xdc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d111      	bne.n	8005148 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b06      	cmp	r3, #6
 8005134:	d010      	beq.n	8005158 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005146:	e007      	b.n	8005158 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40010400 	.word	0x40010400
 800517c:	40014000 	.word	0x40014000
 8005180:	40001800 	.word	0x40001800

08005184 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e041      	b.n	800521a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d106      	bne.n	80051b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f839 	bl	8005222 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3304      	adds	r3, #4
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f000 fc2e 	bl	8005a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d104      	bne.n	8005256 <HAL_TIM_IC_Start_IT+0x1e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005252:	b2db      	uxtb	r3, r3
 8005254:	e013      	b.n	800527e <HAL_TIM_IC_Start_IT+0x46>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b04      	cmp	r3, #4
 800525a:	d104      	bne.n	8005266 <HAL_TIM_IC_Start_IT+0x2e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005262:	b2db      	uxtb	r3, r3
 8005264:	e00b      	b.n	800527e <HAL_TIM_IC_Start_IT+0x46>
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b08      	cmp	r3, #8
 800526a:	d104      	bne.n	8005276 <HAL_TIM_IC_Start_IT+0x3e>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005272:	b2db      	uxtb	r3, r3
 8005274:	e003      	b.n	800527e <HAL_TIM_IC_Start_IT+0x46>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800527c:	b2db      	uxtb	r3, r3
 800527e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d104      	bne.n	8005290 <HAL_TIM_IC_Start_IT+0x58>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e013      	b.n	80052b8 <HAL_TIM_IC_Start_IT+0x80>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b04      	cmp	r3, #4
 8005294:	d104      	bne.n	80052a0 <HAL_TIM_IC_Start_IT+0x68>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e00b      	b.n	80052b8 <HAL_TIM_IC_Start_IT+0x80>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d104      	bne.n	80052b0 <HAL_TIM_IC_Start_IT+0x78>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e003      	b.n	80052b8 <HAL_TIM_IC_Start_IT+0x80>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052ba:	7bbb      	ldrb	r3, [r7, #14]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d102      	bne.n	80052c6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052c0:	7b7b      	ldrb	r3, [r7, #13]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d001      	beq.n	80052ca <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e0cc      	b.n	8005464 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d104      	bne.n	80052da <HAL_TIM_IC_Start_IT+0xa2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052d8:	e013      	b.n	8005302 <HAL_TIM_IC_Start_IT+0xca>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d104      	bne.n	80052ea <HAL_TIM_IC_Start_IT+0xb2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052e8:	e00b      	b.n	8005302 <HAL_TIM_IC_Start_IT+0xca>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_IC_Start_IT+0xc2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f8:	e003      	b.n	8005302 <HAL_TIM_IC_Start_IT+0xca>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <HAL_TIM_IC_Start_IT+0xda>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005310:	e013      	b.n	800533a <HAL_TIM_IC_Start_IT+0x102>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b04      	cmp	r3, #4
 8005316:	d104      	bne.n	8005322 <HAL_TIM_IC_Start_IT+0xea>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005320:	e00b      	b.n	800533a <HAL_TIM_IC_Start_IT+0x102>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d104      	bne.n	8005332 <HAL_TIM_IC_Start_IT+0xfa>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005330:	e003      	b.n	800533a <HAL_TIM_IC_Start_IT+0x102>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b0c      	cmp	r3, #12
 800533e:	d841      	bhi.n	80053c4 <HAL_TIM_IC_Start_IT+0x18c>
 8005340:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <HAL_TIM_IC_Start_IT+0x110>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	0800537d 	.word	0x0800537d
 800534c:	080053c5 	.word	0x080053c5
 8005350:	080053c5 	.word	0x080053c5
 8005354:	080053c5 	.word	0x080053c5
 8005358:	0800538f 	.word	0x0800538f
 800535c:	080053c5 	.word	0x080053c5
 8005360:	080053c5 	.word	0x080053c5
 8005364:	080053c5 	.word	0x080053c5
 8005368:	080053a1 	.word	0x080053a1
 800536c:	080053c5 	.word	0x080053c5
 8005370:	080053c5 	.word	0x080053c5
 8005374:	080053c5 	.word	0x080053c5
 8005378:	080053b3 	.word	0x080053b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0202 	orr.w	r2, r2, #2
 800538a:	60da      	str	r2, [r3, #12]
      break;
 800538c:	e01d      	b.n	80053ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f042 0204 	orr.w	r2, r2, #4
 800539c:	60da      	str	r2, [r3, #12]
      break;
 800539e:	e014      	b.n	80053ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0208 	orr.w	r2, r2, #8
 80053ae:	60da      	str	r2, [r3, #12]
      break;
 80053b0:	e00b      	b.n	80053ca <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 0210 	orr.w	r2, r2, #16
 80053c0:	60da      	str	r2, [r3, #12]
      break;
 80053c2:	e002      	b.n	80053ca <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
      break;
 80053c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d148      	bne.n	8005462 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2201      	movs	r2, #1
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fd87 	bl	8005eec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a22      	ldr	r2, [pc, #136]	; (800546c <HAL_TIM_IC_Start_IT+0x234>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d022      	beq.n	800542e <HAL_TIM_IC_Start_IT+0x1f6>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f0:	d01d      	beq.n	800542e <HAL_TIM_IC_Start_IT+0x1f6>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <HAL_TIM_IC_Start_IT+0x238>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d018      	beq.n	800542e <HAL_TIM_IC_Start_IT+0x1f6>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1c      	ldr	r2, [pc, #112]	; (8005474 <HAL_TIM_IC_Start_IT+0x23c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <HAL_TIM_IC_Start_IT+0x1f6>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <HAL_TIM_IC_Start_IT+0x240>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00e      	beq.n	800542e <HAL_TIM_IC_Start_IT+0x1f6>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a19      	ldr	r2, [pc, #100]	; (800547c <HAL_TIM_IC_Start_IT+0x244>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d009      	beq.n	800542e <HAL_TIM_IC_Start_IT+0x1f6>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a18      	ldr	r2, [pc, #96]	; (8005480 <HAL_TIM_IC_Start_IT+0x248>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d004      	beq.n	800542e <HAL_TIM_IC_Start_IT+0x1f6>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a16      	ldr	r2, [pc, #88]	; (8005484 <HAL_TIM_IC_Start_IT+0x24c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d111      	bne.n	8005452 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b06      	cmp	r3, #6
 800543e:	d010      	beq.n	8005462 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005450:	e007      	b.n	8005462 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40010000 	.word	0x40010000
 8005470:	40000400 	.word	0x40000400
 8005474:	40000800 	.word	0x40000800
 8005478:	40000c00 	.word	0x40000c00
 800547c:	40010400 	.word	0x40010400
 8005480:	40014000 	.word	0x40014000
 8005484:	40001800 	.word	0x40001800

08005488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b02      	cmp	r3, #2
 800549c:	d122      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d11b      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0202 	mvn.w	r2, #2
 80054b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fb ff5c 	bl	8001388 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fa88 	bl	80059e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fa8f 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d122      	bne.n	8005538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b04      	cmp	r3, #4
 80054fe:	d11b      	bne.n	8005538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0204 	mvn.w	r2, #4
 8005508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fb ff32 	bl	8001388 <HAL_TIM_IC_CaptureCallback>
 8005524:	e005      	b.n	8005532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fa5e 	bl	80059e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fa65 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b08      	cmp	r3, #8
 8005544:	d122      	bne.n	800558c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b08      	cmp	r3, #8
 8005552:	d11b      	bne.n	800558c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f06f 0208 	mvn.w	r2, #8
 800555c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2204      	movs	r2, #4
 8005562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fb ff08 	bl	8001388 <HAL_TIM_IC_CaptureCallback>
 8005578:	e005      	b.n	8005586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fa34 	bl	80059e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fa3b 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	2b10      	cmp	r3, #16
 8005598:	d122      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0310 	and.w	r3, r3, #16
 80055a4:	2b10      	cmp	r3, #16
 80055a6:	d11b      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0210 	mvn.w	r2, #16
 80055b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2208      	movs	r2, #8
 80055b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fb fede 	bl	8001388 <HAL_TIM_IC_CaptureCallback>
 80055cc:	e005      	b.n	80055da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fa0a 	bl	80059e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fa11 	bl	80059fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d10e      	bne.n	800560c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d107      	bne.n	800560c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0201 	mvn.w	r2, #1
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fd fcc2 	bl	8002f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005616:	2b80      	cmp	r3, #128	; 0x80
 8005618:	d10e      	bne.n	8005638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005624:	2b80      	cmp	r3, #128	; 0x80
 8005626:	d107      	bne.n	8005638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fd06 	bl	8006044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b40      	cmp	r3, #64	; 0x40
 8005644:	d10e      	bne.n	8005664 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d107      	bne.n	8005664 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800565c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f9d6 	bl	8005a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0320 	and.w	r3, r3, #32
 800566e:	2b20      	cmp	r3, #32
 8005670:	d10e      	bne.n	8005690 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0320 	and.w	r3, r3, #32
 800567c:	2b20      	cmp	r3, #32
 800567e:	d107      	bne.n	8005690 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0220 	mvn.w	r2, #32
 8005688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fcd0 	bl	8006030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005690:	bf00      	nop
 8005692:	3708      	adds	r7, #8
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e088      	b.n	80057c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6818      	ldr	r0, [r3, #0]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6819      	ldr	r1, [r3, #0]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	f000 fa46 	bl	8005b64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 020c 	bic.w	r2, r2, #12
 80056e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6999      	ldr	r1, [r3, #24]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	619a      	str	r2, [r3, #24]
 80056fa:	e060      	b.n	80057be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d11c      	bne.n	800573c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6818      	ldr	r0, [r3, #0]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	6819      	ldr	r1, [r3, #0]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f000 faca 	bl	8005caa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005724:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6999      	ldr	r1, [r3, #24]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	021a      	lsls	r2, r3, #8
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	619a      	str	r2, [r3, #24]
 800573a:	e040      	b.n	80057be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b08      	cmp	r3, #8
 8005740:	d11b      	bne.n	800577a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6818      	ldr	r0, [r3, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6819      	ldr	r1, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f000 fb17 	bl	8005d84 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 020c 	bic.w	r2, r2, #12
 8005764:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69d9      	ldr	r1, [r3, #28]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	61da      	str	r2, [r3, #28]
 8005778:	e021      	b.n	80057be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b0c      	cmp	r3, #12
 800577e:	d11c      	bne.n	80057ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	6819      	ldr	r1, [r3, #0]
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f000 fb34 	bl	8005dfc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	69da      	ldr	r2, [r3, #28]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80057a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	69d9      	ldr	r1, [r3, #28]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	021a      	lsls	r2, r3, #8
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	61da      	str	r2, [r3, #28]
 80057b8:	e001      	b.n	80057be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_TIM_ConfigClockSource+0x1c>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e0b4      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x186>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800580a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005812:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005824:	d03e      	beq.n	80058a4 <HAL_TIM_ConfigClockSource+0xd4>
 8005826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800582a:	f200 8087 	bhi.w	800593c <HAL_TIM_ConfigClockSource+0x16c>
 800582e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005832:	f000 8086 	beq.w	8005942 <HAL_TIM_ConfigClockSource+0x172>
 8005836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583a:	d87f      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b70      	cmp	r3, #112	; 0x70
 800583e:	d01a      	beq.n	8005876 <HAL_TIM_ConfigClockSource+0xa6>
 8005840:	2b70      	cmp	r3, #112	; 0x70
 8005842:	d87b      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b60      	cmp	r3, #96	; 0x60
 8005846:	d050      	beq.n	80058ea <HAL_TIM_ConfigClockSource+0x11a>
 8005848:	2b60      	cmp	r3, #96	; 0x60
 800584a:	d877      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x16c>
 800584c:	2b50      	cmp	r3, #80	; 0x50
 800584e:	d03c      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0xfa>
 8005850:	2b50      	cmp	r3, #80	; 0x50
 8005852:	d873      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x16c>
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	d058      	beq.n	800590a <HAL_TIM_ConfigClockSource+0x13a>
 8005858:	2b40      	cmp	r3, #64	; 0x40
 800585a:	d86f      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x16c>
 800585c:	2b30      	cmp	r3, #48	; 0x30
 800585e:	d064      	beq.n	800592a <HAL_TIM_ConfigClockSource+0x15a>
 8005860:	2b30      	cmp	r3, #48	; 0x30
 8005862:	d86b      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x16c>
 8005864:	2b20      	cmp	r3, #32
 8005866:	d060      	beq.n	800592a <HAL_TIM_ConfigClockSource+0x15a>
 8005868:	2b20      	cmp	r3, #32
 800586a:	d867      	bhi.n	800593c <HAL_TIM_ConfigClockSource+0x16c>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d05c      	beq.n	800592a <HAL_TIM_ConfigClockSource+0x15a>
 8005870:	2b10      	cmp	r3, #16
 8005872:	d05a      	beq.n	800592a <HAL_TIM_ConfigClockSource+0x15a>
 8005874:	e062      	b.n	800593c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6899      	ldr	r1, [r3, #8]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f000 fb11 	bl	8005eac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005898:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	609a      	str	r2, [r3, #8]
      break;
 80058a2:	e04f      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	6899      	ldr	r1, [r3, #8]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f000 fafa 	bl	8005eac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058c6:	609a      	str	r2, [r3, #8]
      break;
 80058c8:	e03c      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6859      	ldr	r1, [r3, #4]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	461a      	mov	r2, r3
 80058d8:	f000 f9b8 	bl	8005c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2150      	movs	r1, #80	; 0x50
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fac7 	bl	8005e76 <TIM_ITRx_SetConfig>
      break;
 80058e8:	e02c      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	6859      	ldr	r1, [r3, #4]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f000 fa14 	bl	8005d24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2160      	movs	r1, #96	; 0x60
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fab7 	bl	8005e76 <TIM_ITRx_SetConfig>
      break;
 8005908:	e01c      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6818      	ldr	r0, [r3, #0]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	6859      	ldr	r1, [r3, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	461a      	mov	r2, r3
 8005918:	f000 f998 	bl	8005c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2140      	movs	r1, #64	; 0x40
 8005922:	4618      	mov	r0, r3
 8005924:	f000 faa7 	bl	8005e76 <TIM_ITRx_SetConfig>
      break;
 8005928:	e00c      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4619      	mov	r1, r3
 8005934:	4610      	mov	r0, r2
 8005936:	f000 fa9e 	bl	8005e76 <TIM_ITRx_SetConfig>
      break;
 800593a:	e003      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	73fb      	strb	r3, [r7, #15]
      break;
 8005940:	e000      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b0c      	cmp	r3, #12
 8005972:	d831      	bhi.n	80059d8 <HAL_TIM_ReadCapturedValue+0x78>
 8005974:	a201      	add	r2, pc, #4	; (adr r2, 800597c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	080059b1 	.word	0x080059b1
 8005980:	080059d9 	.word	0x080059d9
 8005984:	080059d9 	.word	0x080059d9
 8005988:	080059d9 	.word	0x080059d9
 800598c:	080059bb 	.word	0x080059bb
 8005990:	080059d9 	.word	0x080059d9
 8005994:	080059d9 	.word	0x080059d9
 8005998:	080059d9 	.word	0x080059d9
 800599c:	080059c5 	.word	0x080059c5
 80059a0:	080059d9 	.word	0x080059d9
 80059a4:	080059d9 	.word	0x080059d9
 80059a8:	080059d9 	.word	0x080059d9
 80059ac:	080059cf 	.word	0x080059cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b6:	60fb      	str	r3, [r7, #12]

      break;
 80059b8:	e00f      	b.n	80059da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	60fb      	str	r3, [r7, #12]

      break;
 80059c2:	e00a      	b.n	80059da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ca:	60fb      	str	r3, [r7, #12]

      break;
 80059cc:	e005      	b.n	80059da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	60fb      	str	r3, [r7, #12]

      break;
 80059d6:	e000      	b.n	80059da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80059d8:	bf00      	nop
  }

  return tmpreg;
 80059da:	68fb      	ldr	r3, [r7, #12]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a40      	ldr	r2, [pc, #256]	; (8005b38 <TIM_Base_SetConfig+0x114>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a42:	d00f      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a3d      	ldr	r2, [pc, #244]	; (8005b3c <TIM_Base_SetConfig+0x118>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00b      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a3c      	ldr	r2, [pc, #240]	; (8005b40 <TIM_Base_SetConfig+0x11c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d007      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a3b      	ldr	r2, [pc, #236]	; (8005b44 <TIM_Base_SetConfig+0x120>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d003      	beq.n	8005a64 <TIM_Base_SetConfig+0x40>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a3a      	ldr	r2, [pc, #232]	; (8005b48 <TIM_Base_SetConfig+0x124>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d108      	bne.n	8005a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2f      	ldr	r2, [pc, #188]	; (8005b38 <TIM_Base_SetConfig+0x114>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d02b      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a84:	d027      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <TIM_Base_SetConfig+0x118>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d023      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a2b      	ldr	r2, [pc, #172]	; (8005b40 <TIM_Base_SetConfig+0x11c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d01f      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a2a      	ldr	r2, [pc, #168]	; (8005b44 <TIM_Base_SetConfig+0x120>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01b      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a29      	ldr	r2, [pc, #164]	; (8005b48 <TIM_Base_SetConfig+0x124>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d017      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a28      	ldr	r2, [pc, #160]	; (8005b4c <TIM_Base_SetConfig+0x128>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a27      	ldr	r2, [pc, #156]	; (8005b50 <TIM_Base_SetConfig+0x12c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00f      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a26      	ldr	r2, [pc, #152]	; (8005b54 <TIM_Base_SetConfig+0x130>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d00b      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a25      	ldr	r2, [pc, #148]	; (8005b58 <TIM_Base_SetConfig+0x134>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d007      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a24      	ldr	r2, [pc, #144]	; (8005b5c <TIM_Base_SetConfig+0x138>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a23      	ldr	r2, [pc, #140]	; (8005b60 <TIM_Base_SetConfig+0x13c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d108      	bne.n	8005ae8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005adc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <TIM_Base_SetConfig+0x114>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_Base_SetConfig+0xf8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a0c      	ldr	r2, [pc, #48]	; (8005b48 <TIM_Base_SetConfig+0x124>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d103      	bne.n	8005b24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	615a      	str	r2, [r3, #20]
}
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	40010000 	.word	0x40010000
 8005b3c:	40000400 	.word	0x40000400
 8005b40:	40000800 	.word	0x40000800
 8005b44:	40000c00 	.word	0x40000c00
 8005b48:	40010400 	.word	0x40010400
 8005b4c:	40014000 	.word	0x40014000
 8005b50:	40014400 	.word	0x40014400
 8005b54:	40014800 	.word	0x40014800
 8005b58:	40001800 	.word	0x40001800
 8005b5c:	40001c00 	.word	0x40001c00
 8005b60:	40002000 	.word	0x40002000

08005b64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	f023 0201 	bic.w	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a28      	ldr	r2, [pc, #160]	; (8005c30 <TIM_TI1_SetConfig+0xcc>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d01b      	beq.n	8005bca <TIM_TI1_SetConfig+0x66>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b98:	d017      	beq.n	8005bca <TIM_TI1_SetConfig+0x66>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4a25      	ldr	r2, [pc, #148]	; (8005c34 <TIM_TI1_SetConfig+0xd0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d013      	beq.n	8005bca <TIM_TI1_SetConfig+0x66>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4a24      	ldr	r2, [pc, #144]	; (8005c38 <TIM_TI1_SetConfig+0xd4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00f      	beq.n	8005bca <TIM_TI1_SetConfig+0x66>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a23      	ldr	r2, [pc, #140]	; (8005c3c <TIM_TI1_SetConfig+0xd8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00b      	beq.n	8005bca <TIM_TI1_SetConfig+0x66>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <TIM_TI1_SetConfig+0xdc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d007      	beq.n	8005bca <TIM_TI1_SetConfig+0x66>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4a21      	ldr	r2, [pc, #132]	; (8005c44 <TIM_TI1_SetConfig+0xe0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d003      	beq.n	8005bca <TIM_TI1_SetConfig+0x66>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4a20      	ldr	r2, [pc, #128]	; (8005c48 <TIM_TI1_SetConfig+0xe4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d101      	bne.n	8005bce <TIM_TI1_SetConfig+0x6a>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e000      	b.n	8005bd0 <TIM_TI1_SetConfig+0x6c>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	e003      	b.n	8005bee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f043 0301 	orr.w	r3, r3, #1
 8005bec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f023 030a 	bic.w	r3, r3, #10
 8005c08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f003 030a 	and.w	r3, r3, #10
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40000400 	.word	0x40000400
 8005c38:	40000800 	.word	0x40000800
 8005c3c:	40000c00 	.word	0x40000c00
 8005c40:	40010400 	.word	0x40010400
 8005c44:	40014000 	.word	0x40014000
 8005c48:	40001800 	.word	0x40001800

08005c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f023 0201 	bic.w	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f023 030a 	bic.w	r3, r3, #10
 8005c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	621a      	str	r2, [r3, #32]
}
 8005c9e:	bf00      	nop
 8005ca0:	371c      	adds	r7, #28
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b087      	sub	sp, #28
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f023 0210 	bic.w	r2, r3, #16
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ce8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	031b      	lsls	r3, r3, #12
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cfc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	693a      	ldr	r2, [r7, #16]
 8005d16:	621a      	str	r2, [r3, #32]
}
 8005d18:	bf00      	nop
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	f023 0210 	bic.w	r2, r3, #16
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	031b      	lsls	r3, r3, #12
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	621a      	str	r2, [r3, #32]
}
 8005d78:	bf00      	nop
 8005d7a:	371c      	adds	r7, #28
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f023 0303 	bic.w	r3, r3, #3
 8005db0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	021b      	lsls	r3, r3, #8
 8005dda:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	621a      	str	r2, [r3, #32]
}
 8005df0:	bf00      	nop
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	607a      	str	r2, [r7, #4]
 8005e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	031b      	lsls	r3, r3, #12
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005e4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	031b      	lsls	r3, r3, #12
 8005e54:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f043 0307 	orr.w	r3, r3, #7
 8005e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	609a      	str	r2, [r3, #8]
}
 8005ea0:	bf00      	nop
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	021a      	lsls	r2, r3, #8
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	609a      	str	r2, [r3, #8]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 031f 	and.w	r3, r3, #31
 8005efe:	2201      	movs	r2, #1
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a1a      	ldr	r2, [r3, #32]
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	401a      	ands	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6a1a      	ldr	r2, [r3, #32]
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 031f 	and.w	r3, r3, #31
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	fa01 f303 	lsl.w	r3, r1, r3
 8005f24:	431a      	orrs	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	621a      	str	r2, [r3, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
	...

08005f38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e05a      	b.n	8006006 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a21      	ldr	r2, [pc, #132]	; (8006014 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d022      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f9c:	d01d      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a1d      	ldr	r2, [pc, #116]	; (8006018 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d018      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1b      	ldr	r2, [pc, #108]	; (800601c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d013      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1a      	ldr	r2, [pc, #104]	; (8006020 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00e      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a18      	ldr	r2, [pc, #96]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d009      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a17      	ldr	r2, [pc, #92]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d004      	beq.n	8005fda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a15      	ldr	r2, [pc, #84]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d10c      	bne.n	8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40010000 	.word	0x40010000
 8006018:	40000400 	.word	0x40000400
 800601c:	40000800 	.word	0x40000800
 8006020:	40000c00 	.word	0x40000c00
 8006024:	40010400 	.word	0x40010400
 8006028:	40014000 	.word	0x40014000
 800602c:	40001800 	.word	0x40001800

08006030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e03f      	b.n	80060ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fd f81a 	bl	80030b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2224      	movs	r2, #36	; 0x24
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800609a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 f82f 	bl	8007100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	695a      	ldr	r2, [r3, #20]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2220      	movs	r2, #32
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08c      	sub	sp, #48	; 0x30
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b20      	cmp	r3, #32
 800610c:	d165      	bne.n	80061da <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_UART_Transmit_DMA+0x26>
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e05e      	b.n	80061dc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_UART_Transmit_DMA+0x38>
 8006128:	2302      	movs	r3, #2
 800612a:	e057      	b.n	80061dc <HAL_UART_Transmit_DMA+0xe8>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	88fa      	ldrh	r2, [r7, #6]
 800613e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2221      	movs	r2, #33	; 0x21
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006158:	4a22      	ldr	r2, [pc, #136]	; (80061e4 <HAL_UART_Transmit_DMA+0xf0>)
 800615a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006160:	4a21      	ldr	r2, [pc, #132]	; (80061e8 <HAL_UART_Transmit_DMA+0xf4>)
 8006162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006168:	4a20      	ldr	r2, [pc, #128]	; (80061ec <HAL_UART_Transmit_DMA+0xf8>)
 800616a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006170:	2200      	movs	r2, #0
 8006172:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006174:	f107 0308 	add.w	r3, r7, #8
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006180:	6819      	ldr	r1, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3304      	adds	r3, #4
 8006188:	461a      	mov	r2, r3
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	f7fd fd4e 	bl	8003c2c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006198:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3314      	adds	r3, #20
 80061a8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	617b      	str	r3, [r7, #20]
   return(result);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3314      	adds	r3, #20
 80061c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c2:	627a      	str	r2, [r7, #36]	; 0x24
 80061c4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c6:	6a39      	ldr	r1, [r7, #32]
 80061c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ca:	e841 2300 	strex	r3, r2, [r1]
 80061ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1e5      	bne.n	80061a2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e000      	b.n	80061dc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80061da:	2302      	movs	r3, #2
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3730      	adds	r7, #48	; 0x30
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	08006999 	.word	0x08006999
 80061e8:	08006a33 	.word	0x08006a33
 80061ec:	08006bab 	.word	0x08006bab

080061f0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	4613      	mov	r3, r2
 80061fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b20      	cmp	r3, #32
 8006208:	d11d      	bne.n	8006246 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_UART_Receive_DMA+0x26>
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e016      	b.n	8006248 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_UART_Receive_DMA+0x38>
 8006224:	2302      	movs	r3, #2
 8006226:	e00f      	b.n	8006248 <HAL_UART_Receive_DMA+0x58>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	461a      	mov	r2, r3
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fcff 	bl	8006c40 <UART_Start_Receive_DMA>
 8006242:	4603      	mov	r3, r0
 8006244:	e000      	b.n	8006248 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006246:	2302      	movs	r3, #2
  }
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b090      	sub	sp, #64	; 0x40
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006258:	2300      	movs	r3, #0
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006266:	2b80      	cmp	r3, #128	; 0x80
 8006268:	bf0c      	ite	eq
 800626a:	2301      	moveq	r3, #1
 800626c:	2300      	movne	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b21      	cmp	r3, #33	; 0x21
 800627c:	d128      	bne.n	80062d0 <HAL_UART_DMAStop+0x80>
 800627e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d025      	beq.n	80062d0 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3314      	adds	r3, #20
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	623b      	str	r3, [r7, #32]
   return(result);
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800629a:	63bb      	str	r3, [r7, #56]	; 0x38
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3314      	adds	r3, #20
 80062a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062a4:	633a      	str	r2, [r7, #48]	; 0x30
 80062a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d004      	beq.n	80062ca <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fd fd09 	bl	8003cdc <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fd56 	bl	8006d7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062da:	2b40      	cmp	r3, #64	; 0x40
 80062dc:	bf0c      	ite	eq
 80062de:	2301      	moveq	r3, #1
 80062e0:	2300      	movne	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b22      	cmp	r3, #34	; 0x22
 80062f0:	d128      	bne.n	8006344 <HAL_UART_DMAStop+0xf4>
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d025      	beq.n	8006344 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3314      	adds	r3, #20
 80062fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	e853 3f00 	ldrex	r3, [r3]
 8006306:	60fb      	str	r3, [r7, #12]
   return(result);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630e:	637b      	str	r3, [r7, #52]	; 0x34
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3314      	adds	r3, #20
 8006316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006318:	61fa      	str	r2, [r7, #28]
 800631a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	69b9      	ldr	r1, [r7, #24]
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	617b      	str	r3, [r7, #20]
   return(result);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e5      	bne.n	80062f8 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	2b00      	cmp	r3, #0
 8006332:	d004      	beq.n	800633e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	4618      	mov	r0, r3
 800633a:	f7fd fccf 	bl	8003cdc <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fd44 	bl	8006dcc <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3740      	adds	r7, #64	; 0x40
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b08c      	sub	sp, #48	; 0x30
 8006352:	af00      	add	r7, sp, #0
 8006354:	60f8      	str	r0, [r7, #12]
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	4613      	mov	r3, r2
 800635a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006362:	b2db      	uxtb	r3, r3
 8006364:	2b20      	cmp	r3, #32
 8006366:	d152      	bne.n	800640e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800636e:	88fb      	ldrh	r3, [r7, #6]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e04b      	b.n	8006410 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006382:	2302      	movs	r3, #2
 8006384:	e044      	b.n	8006410 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	461a      	mov	r2, r3
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 fc50 	bl	8006c40 <UART_Start_Receive_DMA>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80063a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d12c      	bne.n	8006408 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d125      	bne.n	8006402 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063b6:	2300      	movs	r3, #0
 80063b8:	613b      	str	r3, [r7, #16]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	330c      	adds	r3, #12
 80063d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	617b      	str	r3, [r7, #20]
   return(result);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f043 0310 	orr.w	r3, r3, #16
 80063e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	330c      	adds	r3, #12
 80063ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ec:	627a      	str	r2, [r7, #36]	; 0x24
 80063ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	6a39      	ldr	r1, [r7, #32]
 80063f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e5      	bne.n	80063cc <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006400:	e002      	b.n	8006408 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8006408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800640c:	e000      	b.n	8006410 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800640e:	2302      	movs	r3, #2
  }
}
 8006410:	4618      	mov	r0, r3
 8006412:	3730      	adds	r7, #48	; 0x30
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b0ba      	sub	sp, #232	; 0xe8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800643e:	2300      	movs	r3, #0
 8006440:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006444:	2300      	movs	r3, #0
 8006446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800644a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10f      	bne.n	800647e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800645e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006462:	f003 0320 	and.w	r3, r3, #32
 8006466:	2b00      	cmp	r3, #0
 8006468:	d009      	beq.n	800647e <HAL_UART_IRQHandler+0x66>
 800646a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800646e:	f003 0320 	and.w	r3, r3, #32
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fd87 	bl	8006f8a <UART_Receive_IT>
      return;
 800647c:	e256      	b.n	800692c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800647e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 80de 	beq.w	8006644 <HAL_UART_IRQHandler+0x22c>
 8006488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006498:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80d1 	beq.w	8006644 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00b      	beq.n	80064c6 <HAL_UART_IRQHandler+0xae>
 80064ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d005      	beq.n	80064c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	f043 0201 	orr.w	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00b      	beq.n	80064ea <HAL_UART_IRQHandler+0xd2>
 80064d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d005      	beq.n	80064ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f043 0202 	orr.w	r2, r3, #2
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <HAL_UART_IRQHandler+0xf6>
 80064f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	f043 0204 	orr.w	r2, r3, #4
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800650e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d011      	beq.n	800653e <HAL_UART_IRQHandler+0x126>
 800651a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800651e:	f003 0320 	and.w	r3, r3, #32
 8006522:	2b00      	cmp	r3, #0
 8006524:	d105      	bne.n	8006532 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006526:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800652a:	f003 0301 	and.w	r3, r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d005      	beq.n	800653e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	f043 0208 	orr.w	r2, r3, #8
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 81ed 	beq.w	8006922 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654c:	f003 0320 	and.w	r3, r3, #32
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <HAL_UART_IRQHandler+0x14e>
 8006554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006558:	f003 0320 	and.w	r3, r3, #32
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fd12 	bl	8006f8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006570:	2b40      	cmp	r3, #64	; 0x40
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	2b00      	cmp	r3, #0
 8006588:	d103      	bne.n	8006592 <HAL_UART_IRQHandler+0x17a>
 800658a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800658e:	2b00      	cmp	r3, #0
 8006590:	d04f      	beq.n	8006632 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fc1a 	bl	8006dcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b40      	cmp	r3, #64	; 0x40
 80065a4:	d141      	bne.n	800662a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3314      	adds	r3, #20
 80065ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3314      	adds	r3, #20
 80065ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1d9      	bne.n	80065a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d013      	beq.n	8006622 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	4a7d      	ldr	r2, [pc, #500]	; (80067f4 <HAL_UART_IRQHandler+0x3dc>)
 8006600:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006606:	4618      	mov	r0, r3
 8006608:	f7fd fbd8 	bl	8003dbc <HAL_DMA_Abort_IT>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d016      	beq.n	8006640 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800661c:	4610      	mov	r0, r2
 800661e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006620:	e00e      	b.n	8006640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f9ae 	bl	8006984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006628:	e00a      	b.n	8006640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f9aa 	bl	8006984 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006630:	e006      	b.n	8006640 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f9a6 	bl	8006984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800663e:	e170      	b.n	8006922 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006640:	bf00      	nop
    return;
 8006642:	e16e      	b.n	8006922 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006648:	2b01      	cmp	r3, #1
 800664a:	f040 814a 	bne.w	80068e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800664e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 8143 	beq.w	80068e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800665c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b00      	cmp	r3, #0
 8006666:	f000 813c 	beq.w	80068e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800666a:	2300      	movs	r3, #0
 800666c:	60bb      	str	r3, [r7, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60bb      	str	r3, [r7, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	60bb      	str	r3, [r7, #8]
 800667e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668a:	2b40      	cmp	r3, #64	; 0x40
 800668c:	f040 80b4 	bne.w	80067f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800669c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 8140 	beq.w	8006926 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066ae:	429a      	cmp	r2, r3
 80066b0:	f080 8139 	bcs.w	8006926 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c6:	f000 8088 	beq.w	80067da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	330c      	adds	r3, #12
 80066d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006702:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800670e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1d9      	bne.n	80066ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3314      	adds	r3, #20
 800671c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3314      	adds	r3, #20
 8006736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800673a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800673e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006742:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800674c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e1      	bne.n	8006716 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3314      	adds	r3, #20
 8006758:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3314      	adds	r3, #20
 8006772:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006776:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006778:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800677c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800677e:	e841 2300 	strex	r3, r2, [r1]
 8006782:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1e3      	bne.n	8006752 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	330c      	adds	r3, #12
 800679e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a2:	e853 3f00 	ldrex	r3, [r3]
 80067a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067aa:	f023 0310 	bic.w	r3, r3, #16
 80067ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	330c      	adds	r3, #12
 80067b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80067be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e3      	bne.n	8006798 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7fd fa81 	bl	8003cdc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fb fcb4 	bl	8002158 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067f0:	e099      	b.n	8006926 <HAL_UART_IRQHandler+0x50e>
 80067f2:	bf00      	nop
 80067f4:	08006e93 	.word	0x08006e93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006800:	b29b      	uxth	r3, r3
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800680c:	b29b      	uxth	r3, r3
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 808b 	beq.w	800692a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006814:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 8086 	beq.w	800692a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	330c      	adds	r3, #12
 8006824:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800682e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006830:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006834:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	330c      	adds	r3, #12
 800683e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006842:	647a      	str	r2, [r7, #68]	; 0x44
 8006844:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e3      	bne.n	800681e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3314      	adds	r3, #20
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	623b      	str	r3, [r7, #32]
   return(result);
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	f023 0301 	bic.w	r3, r3, #1
 800686c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3314      	adds	r3, #20
 8006876:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800687a:	633a      	str	r2, [r7, #48]	; 0x30
 800687c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e3      	bne.n	8006856 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2220      	movs	r2, #32
 8006892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	330c      	adds	r3, #12
 80068a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f023 0310 	bic.w	r3, r3, #16
 80068b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068c0:	61fa      	str	r2, [r7, #28]
 80068c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	69b9      	ldr	r1, [r7, #24]
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	617b      	str	r3, [r7, #20]
   return(result);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e3      	bne.n	800689c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fb fc3c 	bl	8002158 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068e0:	e023      	b.n	800692a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_UART_IRQHandler+0x4ea>
 80068ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fadd 	bl	8006eba <UART_Transmit_IT>
    return;
 8006900:	e014      	b.n	800692c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00e      	beq.n	800692c <HAL_UART_IRQHandler+0x514>
 800690e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006916:	2b00      	cmp	r3, #0
 8006918:	d008      	beq.n	800692c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 fb1d 	bl	8006f5a <UART_EndTransmit_IT>
    return;
 8006920:	e004      	b.n	800692c <HAL_UART_IRQHandler+0x514>
    return;
 8006922:	bf00      	nop
 8006924:	e002      	b.n	800692c <HAL_UART_IRQHandler+0x514>
      return;
 8006926:	bf00      	nop
 8006928:	e000      	b.n	800692c <HAL_UART_IRQHandler+0x514>
      return;
 800692a:	bf00      	nop
  }
}
 800692c:	37e8      	adds	r7, #232	; 0xe8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop

08006934 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b090      	sub	sp, #64	; 0x40
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d137      	bne.n	8006a24 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80069b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b6:	2200      	movs	r2, #0
 80069b8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80069ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3314      	adds	r3, #20
 80069c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	623b      	str	r3, [r7, #32]
   return(result);
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80069d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3314      	adds	r3, #20
 80069d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069da:	633a      	str	r2, [r7, #48]	; 0x30
 80069dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e5      	bne.n	80069ba <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	330c      	adds	r3, #12
 80069f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a04:	637b      	str	r3, [r7, #52]	; 0x34
 8006a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a0e:	61fa      	str	r2, [r7, #28]
 8006a10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	69b9      	ldr	r1, [r7, #24]
 8006a14:	69fa      	ldr	r2, [r7, #28]
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e5      	bne.n	80069ee <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a22:	e002      	b.n	8006a2a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006a24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a26:	f7ff ff85 	bl	8006934 <HAL_UART_TxCpltCallback>
}
 8006a2a:	bf00      	nop
 8006a2c:	3740      	adds	r7, #64	; 0x40
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7ff ff81 	bl	8006948 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a46:	bf00      	nop
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b09c      	sub	sp, #112	; 0x70
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d172      	bne.n	8006b50 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	330c      	adds	r3, #12
 8006a76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a86:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a90:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e5      	bne.n	8006a70 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3314      	adds	r3, #20
 8006aaa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab6:	f023 0301 	bic.w	r3, r3, #1
 8006aba:	667b      	str	r3, [r7, #100]	; 0x64
 8006abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3314      	adds	r3, #20
 8006ac2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ac4:	647a      	str	r2, [r7, #68]	; 0x44
 8006ac6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e5      	bne.n	8006aa4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3314      	adds	r3, #20
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	623b      	str	r3, [r7, #32]
   return(result);
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aee:	663b      	str	r3, [r7, #96]	; 0x60
 8006af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3314      	adds	r3, #20
 8006af6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006af8:	633a      	str	r2, [r7, #48]	; 0x30
 8006afa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e5      	bne.n	8006ad8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d119      	bne.n	8006b50 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	330c      	adds	r3, #12
 8006b22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0310 	bic.w	r3, r3, #16
 8006b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b3c:	61fa      	str	r2, [r7, #28]
 8006b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	69b9      	ldr	r1, [r7, #24]
 8006b42:	69fa      	ldr	r2, [r7, #28]
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	617b      	str	r3, [r7, #20]
   return(result);
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e5      	bne.n	8006b1c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d106      	bne.n	8006b66 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b60:	f7fb fafa 	bl	8002158 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b64:	e002      	b.n	8006b6c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006b66:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b68:	f7ff fef8 	bl	800695c <HAL_UART_RxCpltCallback>
}
 8006b6c:	bf00      	nop
 8006b6e:	3770      	adds	r7, #112	; 0x70
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d108      	bne.n	8006b9c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b8e:	085b      	lsrs	r3, r3, #1
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	4619      	mov	r1, r3
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f7fb fadf 	bl	8002158 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b9a:	e002      	b.n	8006ba2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7ff fee7 	bl	8006970 <HAL_UART_RxHalfCpltCallback>
}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc6:	2b80      	cmp	r3, #128	; 0x80
 8006bc8:	bf0c      	ite	eq
 8006bca:	2301      	moveq	r3, #1
 8006bcc:	2300      	movne	r3, #0
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b21      	cmp	r3, #33	; 0x21
 8006bdc:	d108      	bne.n	8006bf0 <UART_DMAError+0x46>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d005      	beq.n	8006bf0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2200      	movs	r2, #0
 8006be8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006bea:	68b8      	ldr	r0, [r7, #8]
 8006bec:	f000 f8c6 	bl	8006d7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	bf0c      	ite	eq
 8006bfe:	2301      	moveq	r3, #1
 8006c00:	2300      	movne	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b22      	cmp	r3, #34	; 0x22
 8006c10:	d108      	bne.n	8006c24 <UART_DMAError+0x7a>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006c1e:	68b8      	ldr	r0, [r7, #8]
 8006c20:	f000 f8d4 	bl	8006dcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c28:	f043 0210 	orr.w	r2, r3, #16
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c30:	68b8      	ldr	r0, [r7, #8]
 8006c32:	f7ff fea7 	bl	8006984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c36:	bf00      	nop
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b098      	sub	sp, #96	; 0x60
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2222      	movs	r2, #34	; 0x22
 8006c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	4a40      	ldr	r2, [pc, #256]	; (8006d70 <UART_Start_Receive_DMA+0x130>)
 8006c6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	4a3f      	ldr	r2, [pc, #252]	; (8006d74 <UART_Start_Receive_DMA+0x134>)
 8006c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	4a3e      	ldr	r2, [pc, #248]	; (8006d78 <UART_Start_Receive_DMA+0x138>)
 8006c7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	2200      	movs	r2, #0
 8006c86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006c88:	f107 0308 	add.w	r3, r7, #8
 8006c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	88fb      	ldrh	r3, [r7, #6]
 8006ca0:	f7fc ffc4 	bl	8003c2c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	613b      	str	r3, [r7, #16]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	613b      	str	r3, [r7, #16]
 8006cb8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d019      	beq.n	8006cfe <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006cea:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006cec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006cf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3314      	adds	r3, #20
 8006d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	f043 0301 	orr.w	r3, r3, #1
 8006d14:	657b      	str	r3, [r7, #84]	; 0x54
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3314      	adds	r3, #20
 8006d1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d1e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e5      	bne.n	8006cfe <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3314      	adds	r3, #20
 8006d38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	617b      	str	r3, [r7, #20]
   return(result);
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d48:	653b      	str	r3, [r7, #80]	; 0x50
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3314      	adds	r3, #20
 8006d50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d52:	627a      	str	r2, [r7, #36]	; 0x24
 8006d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	6a39      	ldr	r1, [r7, #32]
 8006d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d5a:	e841 2300 	strex	r3, r2, [r1]
 8006d5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1e5      	bne.n	8006d32 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3760      	adds	r7, #96	; 0x60
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	08006a4f 	.word	0x08006a4f
 8006d74:	08006b75 	.word	0x08006b75
 8006d78:	08006bab 	.word	0x08006bab

08006d7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b089      	sub	sp, #36	; 0x24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	330c      	adds	r3, #12
 8006d8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	330c      	adds	r3, #12
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	61ba      	str	r2, [r7, #24]
 8006da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	6979      	ldr	r1, [r7, #20]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	e841 2300 	strex	r3, r2, [r1]
 8006db0:	613b      	str	r3, [r7, #16]
   return(result);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e5      	bne.n	8006d84 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006dc0:	bf00      	nop
 8006dc2:	3724      	adds	r7, #36	; 0x24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b095      	sub	sp, #84	; 0x54
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330c      	adds	r3, #12
 8006df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006df4:	643a      	str	r2, [r7, #64]	; 0x40
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e5      	bne.n	8006dd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3314      	adds	r3, #20
 8006e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3314      	adds	r3, #20
 8006e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e5      	bne.n	8006e08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d119      	bne.n	8006e78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f023 0310 	bic.w	r3, r3, #16
 8006e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e64:	61ba      	str	r2, [r7, #24]
 8006e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6979      	ldr	r1, [r7, #20]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	613b      	str	r3, [r7, #16]
   return(result);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e86:	bf00      	nop
 8006e88:	3754      	adds	r7, #84	; 0x54
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f7ff fd69 	bl	8006984 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b21      	cmp	r3, #33	; 0x21
 8006ecc:	d13e      	bne.n	8006f4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed6:	d114      	bne.n	8006f02 <UART_Transmit_IT+0x48>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d110      	bne.n	8006f02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	1c9a      	adds	r2, r3, #2
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	621a      	str	r2, [r3, #32]
 8006f00:	e008      	b.n	8006f14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	1c59      	adds	r1, r3, #1
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6211      	str	r1, [r2, #32]
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	4619      	mov	r1, r3
 8006f22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10f      	bne.n	8006f48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e000      	b.n	8006f4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff fcda 	bl	8006934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b08c      	sub	sp, #48	; 0x30
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b22      	cmp	r3, #34	; 0x22
 8006f9c:	f040 80ab 	bne.w	80070f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa8:	d117      	bne.n	8006fda <UART_Receive_IT+0x50>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d113      	bne.n	8006fda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	1c9a      	adds	r2, r3, #2
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8006fd8:	e026      	b.n	8007028 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fec:	d007      	beq.n	8006ffe <UART_Receive_IT+0x74>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <UART_Receive_IT+0x82>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	b2da      	uxtb	r2, r3
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	e008      	b.n	800701e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007018:	b2da      	uxtb	r2, r3
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29b      	uxth	r3, r3
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4619      	mov	r1, r3
 8007036:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007038:	2b00      	cmp	r3, #0
 800703a:	d15a      	bne.n	80070f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0220 	bic.w	r2, r2, #32
 800704a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800705a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695a      	ldr	r2, [r3, #20]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	2b01      	cmp	r3, #1
 800707a:	d135      	bne.n	80070e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	330c      	adds	r3, #12
 8007088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	613b      	str	r3, [r7, #16]
   return(result);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f023 0310 	bic.w	r3, r3, #16
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	330c      	adds	r3, #12
 80070a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a2:	623a      	str	r2, [r7, #32]
 80070a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	69f9      	ldr	r1, [r7, #28]
 80070a8:	6a3a      	ldr	r2, [r7, #32]
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e5      	bne.n	8007082 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d10a      	bne.n	80070da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7fb f839 	bl	8002158 <HAL_UARTEx_RxEventCallback>
 80070e6:	e002      	b.n	80070ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff fc37 	bl	800695c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e002      	b.n	80070f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e000      	b.n	80070f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070f6:	2302      	movs	r3, #2
  }
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3730      	adds	r7, #48	; 0x30
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007104:	b0c0      	sub	sp, #256	; 0x100
 8007106:	af00      	add	r7, sp, #0
 8007108:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711c:	68d9      	ldr	r1, [r3, #12]
 800711e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	ea40 0301 	orr.w	r3, r0, r1
 8007128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800712a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	431a      	orrs	r2, r3
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	431a      	orrs	r2, r3
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	4313      	orrs	r3, r2
 8007148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007158:	f021 010c 	bic.w	r1, r1, #12
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007166:	430b      	orrs	r3, r1
 8007168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800716a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717a:	6999      	ldr	r1, [r3, #24]
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	ea40 0301 	orr.w	r3, r0, r1
 8007186:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b8f      	ldr	r3, [pc, #572]	; (80073cc <UART_SetConfig+0x2cc>)
 8007190:	429a      	cmp	r2, r3
 8007192:	d005      	beq.n	80071a0 <UART_SetConfig+0xa0>
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4b8d      	ldr	r3, [pc, #564]	; (80073d0 <UART_SetConfig+0x2d0>)
 800719c:	429a      	cmp	r2, r3
 800719e:	d104      	bne.n	80071aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071a0:	f7fd feea 	bl	8004f78 <HAL_RCC_GetPCLK2Freq>
 80071a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071a8:	e003      	b.n	80071b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071aa:	f7fd fed1 	bl	8004f50 <HAL_RCC_GetPCLK1Freq>
 80071ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071bc:	f040 810c 	bne.w	80073d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071c4:	2200      	movs	r2, #0
 80071c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071d2:	4622      	mov	r2, r4
 80071d4:	462b      	mov	r3, r5
 80071d6:	1891      	adds	r1, r2, r2
 80071d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80071da:	415b      	adcs	r3, r3
 80071dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071e2:	4621      	mov	r1, r4
 80071e4:	eb12 0801 	adds.w	r8, r2, r1
 80071e8:	4629      	mov	r1, r5
 80071ea:	eb43 0901 	adc.w	r9, r3, r1
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007202:	4690      	mov	r8, r2
 8007204:	4699      	mov	r9, r3
 8007206:	4623      	mov	r3, r4
 8007208:	eb18 0303 	adds.w	r3, r8, r3
 800720c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007210:	462b      	mov	r3, r5
 8007212:	eb49 0303 	adc.w	r3, r9, r3
 8007216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800721a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007226:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800722a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800722e:	460b      	mov	r3, r1
 8007230:	18db      	adds	r3, r3, r3
 8007232:	653b      	str	r3, [r7, #80]	; 0x50
 8007234:	4613      	mov	r3, r2
 8007236:	eb42 0303 	adc.w	r3, r2, r3
 800723a:	657b      	str	r3, [r7, #84]	; 0x54
 800723c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007244:	f7f9 fd20 	bl	8000c88 <__aeabi_uldivmod>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4b61      	ldr	r3, [pc, #388]	; (80073d4 <UART_SetConfig+0x2d4>)
 800724e:	fba3 2302 	umull	r2, r3, r3, r2
 8007252:	095b      	lsrs	r3, r3, #5
 8007254:	011c      	lsls	r4, r3, #4
 8007256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800725a:	2200      	movs	r2, #0
 800725c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007260:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007264:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007268:	4642      	mov	r2, r8
 800726a:	464b      	mov	r3, r9
 800726c:	1891      	adds	r1, r2, r2
 800726e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007270:	415b      	adcs	r3, r3
 8007272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007278:	4641      	mov	r1, r8
 800727a:	eb12 0a01 	adds.w	sl, r2, r1
 800727e:	4649      	mov	r1, r9
 8007280:	eb43 0b01 	adc.w	fp, r3, r1
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007290:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007298:	4692      	mov	sl, r2
 800729a:	469b      	mov	fp, r3
 800729c:	4643      	mov	r3, r8
 800729e:	eb1a 0303 	adds.w	r3, sl, r3
 80072a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072a6:	464b      	mov	r3, r9
 80072a8:	eb4b 0303 	adc.w	r3, fp, r3
 80072ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072c4:	460b      	mov	r3, r1
 80072c6:	18db      	adds	r3, r3, r3
 80072c8:	643b      	str	r3, [r7, #64]	; 0x40
 80072ca:	4613      	mov	r3, r2
 80072cc:	eb42 0303 	adc.w	r3, r2, r3
 80072d0:	647b      	str	r3, [r7, #68]	; 0x44
 80072d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072da:	f7f9 fcd5 	bl	8000c88 <__aeabi_uldivmod>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4611      	mov	r1, r2
 80072e4:	4b3b      	ldr	r3, [pc, #236]	; (80073d4 <UART_SetConfig+0x2d4>)
 80072e6:	fba3 2301 	umull	r2, r3, r3, r1
 80072ea:	095b      	lsrs	r3, r3, #5
 80072ec:	2264      	movs	r2, #100	; 0x64
 80072ee:	fb02 f303 	mul.w	r3, r2, r3
 80072f2:	1acb      	subs	r3, r1, r3
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072fa:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <UART_SetConfig+0x2d4>)
 80072fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007300:	095b      	lsrs	r3, r3, #5
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007308:	441c      	add	r4, r3
 800730a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800730e:	2200      	movs	r2, #0
 8007310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007314:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007318:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800731c:	4642      	mov	r2, r8
 800731e:	464b      	mov	r3, r9
 8007320:	1891      	adds	r1, r2, r2
 8007322:	63b9      	str	r1, [r7, #56]	; 0x38
 8007324:	415b      	adcs	r3, r3
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800732c:	4641      	mov	r1, r8
 800732e:	1851      	adds	r1, r2, r1
 8007330:	6339      	str	r1, [r7, #48]	; 0x30
 8007332:	4649      	mov	r1, r9
 8007334:	414b      	adcs	r3, r1
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
 8007338:	f04f 0200 	mov.w	r2, #0
 800733c:	f04f 0300 	mov.w	r3, #0
 8007340:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007344:	4659      	mov	r1, fp
 8007346:	00cb      	lsls	r3, r1, #3
 8007348:	4651      	mov	r1, sl
 800734a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800734e:	4651      	mov	r1, sl
 8007350:	00ca      	lsls	r2, r1, #3
 8007352:	4610      	mov	r0, r2
 8007354:	4619      	mov	r1, r3
 8007356:	4603      	mov	r3, r0
 8007358:	4642      	mov	r2, r8
 800735a:	189b      	adds	r3, r3, r2
 800735c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007360:	464b      	mov	r3, r9
 8007362:	460a      	mov	r2, r1
 8007364:	eb42 0303 	adc.w	r3, r2, r3
 8007368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007378:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800737c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007380:	460b      	mov	r3, r1
 8007382:	18db      	adds	r3, r3, r3
 8007384:	62bb      	str	r3, [r7, #40]	; 0x28
 8007386:	4613      	mov	r3, r2
 8007388:	eb42 0303 	adc.w	r3, r2, r3
 800738c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800738e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007392:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007396:	f7f9 fc77 	bl	8000c88 <__aeabi_uldivmod>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <UART_SetConfig+0x2d4>)
 80073a0:	fba3 1302 	umull	r1, r3, r3, r2
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	2164      	movs	r1, #100	; 0x64
 80073a8:	fb01 f303 	mul.w	r3, r1, r3
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	3332      	adds	r3, #50	; 0x32
 80073b2:	4a08      	ldr	r2, [pc, #32]	; (80073d4 <UART_SetConfig+0x2d4>)
 80073b4:	fba2 2303 	umull	r2, r3, r2, r3
 80073b8:	095b      	lsrs	r3, r3, #5
 80073ba:	f003 0207 	and.w	r2, r3, #7
 80073be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4422      	add	r2, r4
 80073c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073c8:	e105      	b.n	80075d6 <UART_SetConfig+0x4d6>
 80073ca:	bf00      	nop
 80073cc:	40011000 	.word	0x40011000
 80073d0:	40011400 	.word	0x40011400
 80073d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073dc:	2200      	movs	r2, #0
 80073de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073ea:	4642      	mov	r2, r8
 80073ec:	464b      	mov	r3, r9
 80073ee:	1891      	adds	r1, r2, r2
 80073f0:	6239      	str	r1, [r7, #32]
 80073f2:	415b      	adcs	r3, r3
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
 80073f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073fa:	4641      	mov	r1, r8
 80073fc:	1854      	adds	r4, r2, r1
 80073fe:	4649      	mov	r1, r9
 8007400:	eb43 0501 	adc.w	r5, r3, r1
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	f04f 0300 	mov.w	r3, #0
 800740c:	00eb      	lsls	r3, r5, #3
 800740e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007412:	00e2      	lsls	r2, r4, #3
 8007414:	4614      	mov	r4, r2
 8007416:	461d      	mov	r5, r3
 8007418:	4643      	mov	r3, r8
 800741a:	18e3      	adds	r3, r4, r3
 800741c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007420:	464b      	mov	r3, r9
 8007422:	eb45 0303 	adc.w	r3, r5, r3
 8007426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800742a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007446:	4629      	mov	r1, r5
 8007448:	008b      	lsls	r3, r1, #2
 800744a:	4621      	mov	r1, r4
 800744c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007450:	4621      	mov	r1, r4
 8007452:	008a      	lsls	r2, r1, #2
 8007454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007458:	f7f9 fc16 	bl	8000c88 <__aeabi_uldivmod>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4b60      	ldr	r3, [pc, #384]	; (80075e4 <UART_SetConfig+0x4e4>)
 8007462:	fba3 2302 	umull	r2, r3, r3, r2
 8007466:	095b      	lsrs	r3, r3, #5
 8007468:	011c      	lsls	r4, r3, #4
 800746a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800746e:	2200      	movs	r2, #0
 8007470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007474:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007478:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800747c:	4642      	mov	r2, r8
 800747e:	464b      	mov	r3, r9
 8007480:	1891      	adds	r1, r2, r2
 8007482:	61b9      	str	r1, [r7, #24]
 8007484:	415b      	adcs	r3, r3
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800748c:	4641      	mov	r1, r8
 800748e:	1851      	adds	r1, r2, r1
 8007490:	6139      	str	r1, [r7, #16]
 8007492:	4649      	mov	r1, r9
 8007494:	414b      	adcs	r3, r1
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074a4:	4659      	mov	r1, fp
 80074a6:	00cb      	lsls	r3, r1, #3
 80074a8:	4651      	mov	r1, sl
 80074aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ae:	4651      	mov	r1, sl
 80074b0:	00ca      	lsls	r2, r1, #3
 80074b2:	4610      	mov	r0, r2
 80074b4:	4619      	mov	r1, r3
 80074b6:	4603      	mov	r3, r0
 80074b8:	4642      	mov	r2, r8
 80074ba:	189b      	adds	r3, r3, r2
 80074bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074c0:	464b      	mov	r3, r9
 80074c2:	460a      	mov	r2, r1
 80074c4:	eb42 0303 	adc.w	r3, r2, r3
 80074c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80074d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	f04f 0300 	mov.w	r3, #0
 80074e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074e4:	4649      	mov	r1, r9
 80074e6:	008b      	lsls	r3, r1, #2
 80074e8:	4641      	mov	r1, r8
 80074ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ee:	4641      	mov	r1, r8
 80074f0:	008a      	lsls	r2, r1, #2
 80074f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074f6:	f7f9 fbc7 	bl	8000c88 <__aeabi_uldivmod>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4b39      	ldr	r3, [pc, #228]	; (80075e4 <UART_SetConfig+0x4e4>)
 8007500:	fba3 1302 	umull	r1, r3, r3, r2
 8007504:	095b      	lsrs	r3, r3, #5
 8007506:	2164      	movs	r1, #100	; 0x64
 8007508:	fb01 f303 	mul.w	r3, r1, r3
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	3332      	adds	r3, #50	; 0x32
 8007512:	4a34      	ldr	r2, [pc, #208]	; (80075e4 <UART_SetConfig+0x4e4>)
 8007514:	fba2 2303 	umull	r2, r3, r2, r3
 8007518:	095b      	lsrs	r3, r3, #5
 800751a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800751e:	441c      	add	r4, r3
 8007520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007524:	2200      	movs	r2, #0
 8007526:	673b      	str	r3, [r7, #112]	; 0x70
 8007528:	677a      	str	r2, [r7, #116]	; 0x74
 800752a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800752e:	4642      	mov	r2, r8
 8007530:	464b      	mov	r3, r9
 8007532:	1891      	adds	r1, r2, r2
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	415b      	adcs	r3, r3
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800753e:	4641      	mov	r1, r8
 8007540:	1851      	adds	r1, r2, r1
 8007542:	6039      	str	r1, [r7, #0]
 8007544:	4649      	mov	r1, r9
 8007546:	414b      	adcs	r3, r1
 8007548:	607b      	str	r3, [r7, #4]
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007556:	4659      	mov	r1, fp
 8007558:	00cb      	lsls	r3, r1, #3
 800755a:	4651      	mov	r1, sl
 800755c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007560:	4651      	mov	r1, sl
 8007562:	00ca      	lsls	r2, r1, #3
 8007564:	4610      	mov	r0, r2
 8007566:	4619      	mov	r1, r3
 8007568:	4603      	mov	r3, r0
 800756a:	4642      	mov	r2, r8
 800756c:	189b      	adds	r3, r3, r2
 800756e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007570:	464b      	mov	r3, r9
 8007572:	460a      	mov	r2, r1
 8007574:	eb42 0303 	adc.w	r3, r2, r3
 8007578:	66fb      	str	r3, [r7, #108]	; 0x6c
 800757a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	663b      	str	r3, [r7, #96]	; 0x60
 8007584:	667a      	str	r2, [r7, #100]	; 0x64
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007592:	4649      	mov	r1, r9
 8007594:	008b      	lsls	r3, r1, #2
 8007596:	4641      	mov	r1, r8
 8007598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800759c:	4641      	mov	r1, r8
 800759e:	008a      	lsls	r2, r1, #2
 80075a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075a4:	f7f9 fb70 	bl	8000c88 <__aeabi_uldivmod>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <UART_SetConfig+0x4e4>)
 80075ae:	fba3 1302 	umull	r1, r3, r3, r2
 80075b2:	095b      	lsrs	r3, r3, #5
 80075b4:	2164      	movs	r1, #100	; 0x64
 80075b6:	fb01 f303 	mul.w	r3, r1, r3
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	3332      	adds	r3, #50	; 0x32
 80075c0:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <UART_SetConfig+0x4e4>)
 80075c2:	fba2 2303 	umull	r2, r3, r2, r3
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	f003 020f 	and.w	r2, r3, #15
 80075cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4422      	add	r2, r4
 80075d4:	609a      	str	r2, [r3, #8]
}
 80075d6:	bf00      	nop
 80075d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075dc:	46bd      	mov	sp, r7
 80075de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075e2:	bf00      	nop
 80075e4:	51eb851f 	.word	0x51eb851f

080075e8 <__NVIC_SetPriority>:
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	4603      	mov	r3, r0
 80075f0:	6039      	str	r1, [r7, #0]
 80075f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	db0a      	blt.n	8007612 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	490c      	ldr	r1, [pc, #48]	; (8007634 <__NVIC_SetPriority+0x4c>)
 8007602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007606:	0112      	lsls	r2, r2, #4
 8007608:	b2d2      	uxtb	r2, r2
 800760a:	440b      	add	r3, r1
 800760c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007610:	e00a      	b.n	8007628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	b2da      	uxtb	r2, r3
 8007616:	4908      	ldr	r1, [pc, #32]	; (8007638 <__NVIC_SetPriority+0x50>)
 8007618:	79fb      	ldrb	r3, [r7, #7]
 800761a:	f003 030f 	and.w	r3, r3, #15
 800761e:	3b04      	subs	r3, #4
 8007620:	0112      	lsls	r2, r2, #4
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	440b      	add	r3, r1
 8007626:	761a      	strb	r2, [r3, #24]
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	e000e100 	.word	0xe000e100
 8007638:	e000ed00 	.word	0xe000ed00

0800763c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007640:	4b05      	ldr	r3, [pc, #20]	; (8007658 <SysTick_Handler+0x1c>)
 8007642:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007644:	f001 fcfe 	bl	8009044 <xTaskGetSchedulerState>
 8007648:	4603      	mov	r3, r0
 800764a:	2b01      	cmp	r3, #1
 800764c:	d001      	beq.n	8007652 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800764e:	f002 fae3 	bl	8009c18 <xPortSysTickHandler>
  }
}
 8007652:	bf00      	nop
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	e000e010 	.word	0xe000e010

0800765c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007660:	2100      	movs	r1, #0
 8007662:	f06f 0004 	mvn.w	r0, #4
 8007666:	f7ff ffbf 	bl	80075e8 <__NVIC_SetPriority>
#endif
}
 800766a:	bf00      	nop
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007676:	f3ef 8305 	mrs	r3, IPSR
 800767a:	603b      	str	r3, [r7, #0]
  return(result);
 800767c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007682:	f06f 0305 	mvn.w	r3, #5
 8007686:	607b      	str	r3, [r7, #4]
 8007688:	e00c      	b.n	80076a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800768a:	4b0a      	ldr	r3, [pc, #40]	; (80076b4 <osKernelInitialize+0x44>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d105      	bne.n	800769e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007692:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <osKernelInitialize+0x44>)
 8007694:	2201      	movs	r2, #1
 8007696:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007698:	2300      	movs	r3, #0
 800769a:	607b      	str	r3, [r7, #4]
 800769c:	e002      	b.n	80076a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800769e:	f04f 33ff 	mov.w	r3, #4294967295
 80076a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076a4:	687b      	ldr	r3, [r7, #4]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20000bb4 	.word	0x20000bb4

080076b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076be:	f3ef 8305 	mrs	r3, IPSR
 80076c2:	603b      	str	r3, [r7, #0]
  return(result);
 80076c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d003      	beq.n	80076d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80076ca:	f06f 0305 	mvn.w	r3, #5
 80076ce:	607b      	str	r3, [r7, #4]
 80076d0:	e010      	b.n	80076f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80076d2:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <osKernelStart+0x48>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d109      	bne.n	80076ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80076da:	f7ff ffbf 	bl	800765c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80076de:	4b08      	ldr	r3, [pc, #32]	; (8007700 <osKernelStart+0x48>)
 80076e0:	2202      	movs	r2, #2
 80076e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80076e4:	f001 f866 	bl	80087b4 <vTaskStartScheduler>
      stat = osOK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	607b      	str	r3, [r7, #4]
 80076ec:	e002      	b.n	80076f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80076ee:	f04f 33ff 	mov.w	r3, #4294967295
 80076f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076f4:	687b      	ldr	r3, [r7, #4]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20000bb4 	.word	0x20000bb4

08007704 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007704:	b580      	push	{r7, lr}
 8007706:	b08e      	sub	sp, #56	; 0x38
 8007708:	af04      	add	r7, sp, #16
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007714:	f3ef 8305 	mrs	r3, IPSR
 8007718:	617b      	str	r3, [r7, #20]
  return(result);
 800771a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800771c:	2b00      	cmp	r3, #0
 800771e:	d17e      	bne.n	800781e <osThreadNew+0x11a>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d07b      	beq.n	800781e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007726:	2380      	movs	r3, #128	; 0x80
 8007728:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800772a:	2318      	movs	r3, #24
 800772c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007732:	f04f 33ff 	mov.w	r3, #4294967295
 8007736:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d045      	beq.n	80077ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <osThreadNew+0x48>
        name = attr->name;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d008      	beq.n	8007772 <osThreadNew+0x6e>
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	2b38      	cmp	r3, #56	; 0x38
 8007764:	d805      	bhi.n	8007772 <osThreadNew+0x6e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <osThreadNew+0x72>
        return (NULL);
 8007772:	2300      	movs	r3, #0
 8007774:	e054      	b.n	8007820 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	089b      	lsrs	r3, r3, #2
 8007784:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00e      	beq.n	80077ac <osThreadNew+0xa8>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	2b5b      	cmp	r3, #91	; 0x5b
 8007794:	d90a      	bls.n	80077ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800779a:	2b00      	cmp	r3, #0
 800779c:	d006      	beq.n	80077ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <osThreadNew+0xa8>
        mem = 1;
 80077a6:	2301      	movs	r3, #1
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	e010      	b.n	80077ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10c      	bne.n	80077ce <osThreadNew+0xca>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d108      	bne.n	80077ce <osThreadNew+0xca>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d104      	bne.n	80077ce <osThreadNew+0xca>
          mem = 0;
 80077c4:	2300      	movs	r3, #0
 80077c6:	61bb      	str	r3, [r7, #24]
 80077c8:	e001      	b.n	80077ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d110      	bne.n	80077f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077dc:	9202      	str	r2, [sp, #8]
 80077de:	9301      	str	r3, [sp, #4]
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6a3a      	ldr	r2, [r7, #32]
 80077e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 fe0c 	bl	8008408 <xTaskCreateStatic>
 80077f0:	4603      	mov	r3, r0
 80077f2:	613b      	str	r3, [r7, #16]
 80077f4:	e013      	b.n	800781e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d110      	bne.n	800781e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	b29a      	uxth	r2, r3
 8007800:	f107 0310 	add.w	r3, r7, #16
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 fe57 	bl	80084c2 <xTaskCreate>
 8007814:	4603      	mov	r3, r0
 8007816:	2b01      	cmp	r3, #1
 8007818:	d001      	beq.n	800781e <osThreadNew+0x11a>
            hTask = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800781e:	693b      	ldr	r3, [r7, #16]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3728      	adds	r7, #40	; 0x28
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007830:	f3ef 8305 	mrs	r3, IPSR
 8007834:	60bb      	str	r3, [r7, #8]
  return(result);
 8007836:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <osDelay+0x1c>
    stat = osErrorISR;
 800783c:	f06f 0305 	mvn.w	r3, #5
 8007840:	60fb      	str	r3, [r7, #12]
 8007842:	e007      	b.n	8007854 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <osDelay+0x2c>
      vTaskDelay(ticks);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 ff7c 	bl	800874c <vTaskDelay>
    }
  }

  return (stat);
 8007854:	68fb      	ldr	r3, [r7, #12]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
	...

08007860 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4a07      	ldr	r2, [pc, #28]	; (800788c <vApplicationGetIdleTaskMemory+0x2c>)
 8007870:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4a06      	ldr	r2, [pc, #24]	; (8007890 <vApplicationGetIdleTaskMemory+0x30>)
 8007876:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2280      	movs	r2, #128	; 0x80
 800787c:	601a      	str	r2, [r3, #0]
}
 800787e:	bf00      	nop
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	20000bb8 	.word	0x20000bb8
 8007890:	20000c14 	.word	0x20000c14

08007894 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4a07      	ldr	r2, [pc, #28]	; (80078c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80078a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	4a06      	ldr	r2, [pc, #24]	; (80078c4 <vApplicationGetTimerTaskMemory+0x30>)
 80078aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078b2:	601a      	str	r2, [r3, #0]
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	20000e14 	.word	0x20000e14
 80078c4:	20000e70 	.word	0x20000e70

080078c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f103 0208 	add.w	r2, r3, #8
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f04f 32ff 	mov.w	r2, #4294967295
 80078e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f103 0208 	add.w	r2, r3, #8
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f103 0208 	add.w	r2, r3, #8
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007922:	b480      	push	{r7}
 8007924:	b085      	sub	sp, #20
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	689a      	ldr	r2, [r3, #8]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	1c5a      	adds	r2, r3, #1
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	601a      	str	r2, [r3, #0]
}
 800795e:	bf00      	nop
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007980:	d103      	bne.n	800798a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	e00c      	b.n	80079a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3308      	adds	r3, #8
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	e002      	b.n	8007998 <vListInsert+0x2e>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d2f6      	bcs.n	8007992 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	601a      	str	r2, [r3, #0]
}
 80079d0:	bf00      	nop
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6892      	ldr	r2, [r2, #8]
 80079f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6852      	ldr	r2, [r2, #4]
 80079fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d103      	bne.n	8007a10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689a      	ldr	r2, [r3, #8]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	1e5a      	subs	r2, r3, #1
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007a56:	bf00      	nop
 8007a58:	e7fe      	b.n	8007a58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a5a:	f002 f84b 	bl	8009af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a66:	68f9      	ldr	r1, [r7, #12]
 8007a68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a6a:	fb01 f303 	mul.w	r3, r1, r3
 8007a6e:	441a      	add	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	68f9      	ldr	r1, [r7, #12]
 8007a8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a90:	fb01 f303 	mul.w	r3, r1, r3
 8007a94:	441a      	add	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	22ff      	movs	r2, #255	; 0xff
 8007a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	22ff      	movs	r2, #255	; 0xff
 8007aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d114      	bne.n	8007ada <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01a      	beq.n	8007aee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	3310      	adds	r3, #16
 8007abc:	4618      	mov	r0, r3
 8007abe:	f001 f903 	bl	8008cc8 <xTaskRemoveFromEventList>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d012      	beq.n	8007aee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <xQueueGenericReset+0xcc>)
 8007aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	e009      	b.n	8007aee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3310      	adds	r3, #16
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff fef2 	bl	80078c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3324      	adds	r3, #36	; 0x24
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7ff feed 	bl	80078c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007aee:	f002 f831 	bl	8009b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007af2:	2301      	movs	r3, #1
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	e000ed04 	.word	0xe000ed04

08007b00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b08e      	sub	sp, #56	; 0x38
 8007b04:	af02      	add	r7, sp, #8
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10a      	bne.n	8007b2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b26:	bf00      	nop
 8007b28:	e7fe      	b.n	8007b28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10a      	bne.n	8007b46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b42:	bf00      	nop
 8007b44:	e7fe      	b.n	8007b44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d002      	beq.n	8007b52 <xQueueGenericCreateStatic+0x52>
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <xQueueGenericCreateStatic+0x56>
 8007b52:	2301      	movs	r3, #1
 8007b54:	e000      	b.n	8007b58 <xQueueGenericCreateStatic+0x58>
 8007b56:	2300      	movs	r3, #0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	623b      	str	r3, [r7, #32]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d102      	bne.n	8007b7e <xQueueGenericCreateStatic+0x7e>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <xQueueGenericCreateStatic+0x82>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e000      	b.n	8007b84 <xQueueGenericCreateStatic+0x84>
 8007b82:	2300      	movs	r3, #0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10a      	bne.n	8007b9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	61fb      	str	r3, [r7, #28]
}
 8007b9a:	bf00      	nop
 8007b9c:	e7fe      	b.n	8007b9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b9e:	2350      	movs	r3, #80	; 0x50
 8007ba0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b50      	cmp	r3, #80	; 0x50
 8007ba6:	d00a      	beq.n	8007bbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bac:	f383 8811 	msr	BASEPRI, r3
 8007bb0:	f3bf 8f6f 	isb	sy
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	61bb      	str	r3, [r7, #24]
}
 8007bba:	bf00      	nop
 8007bbc:	e7fe      	b.n	8007bbc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00d      	beq.n	8007be6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	68b9      	ldr	r1, [r7, #8]
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f805 	bl	8007bf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3730      	adds	r7, #48	; 0x30
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d103      	bne.n	8007c0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	e002      	b.n	8007c12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c1e:	2101      	movs	r1, #1
 8007c20:	69b8      	ldr	r0, [r7, #24]
 8007c22:	f7ff ff05 	bl	8007a30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	78fa      	ldrb	r2, [r7, #3]
 8007c2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08e      	sub	sp, #56	; 0x38
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c46:	2300      	movs	r3, #0
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <xQueueGenericSend+0x32>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d103      	bne.n	8007c78 <xQueueGenericSend+0x40>
 8007c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <xQueueGenericSend+0x44>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e000      	b.n	8007c7e <xQueueGenericSend+0x46>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10a      	bne.n	8007c98 <xQueueGenericSend+0x60>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c94:	bf00      	nop
 8007c96:	e7fe      	b.n	8007c96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d103      	bne.n	8007ca6 <xQueueGenericSend+0x6e>
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d101      	bne.n	8007caa <xQueueGenericSend+0x72>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e000      	b.n	8007cac <xQueueGenericSend+0x74>
 8007caa:	2300      	movs	r3, #0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10a      	bne.n	8007cc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	623b      	str	r3, [r7, #32]
}
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cc6:	f001 f9bd 	bl	8009044 <xTaskGetSchedulerState>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d102      	bne.n	8007cd6 <xQueueGenericSend+0x9e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <xQueueGenericSend+0xa2>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <xQueueGenericSend+0xa4>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <xQueueGenericSend+0xbe>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	61fb      	str	r3, [r7, #28]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cf6:	f001 fefd 	bl	8009af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d302      	bcc.n	8007d0c <xQueueGenericSend+0xd4>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d129      	bne.n	8007d60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d0c:	683a      	ldr	r2, [r7, #0]
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d12:	f000 fa0b 	bl	800812c <prvCopyDataToQueue>
 8007d16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d010      	beq.n	8007d42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	3324      	adds	r3, #36	; 0x24
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 ffcf 	bl	8008cc8 <xTaskRemoveFromEventList>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d013      	beq.n	8007d58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d30:	4b3f      	ldr	r3, [pc, #252]	; (8007e30 <xQueueGenericSend+0x1f8>)
 8007d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d36:	601a      	str	r2, [r3, #0]
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	e00a      	b.n	8007d58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d007      	beq.n	8007d58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d48:	4b39      	ldr	r3, [pc, #228]	; (8007e30 <xQueueGenericSend+0x1f8>)
 8007d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d58:	f001 fefc 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e063      	b.n	8007e28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d103      	bne.n	8007d6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d66:	f001 fef5 	bl	8009b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e05c      	b.n	8007e28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d106      	bne.n	8007d82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d74:	f107 0314 	add.w	r3, r7, #20
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f001 f809 	bl	8008d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d82:	f001 fee7 	bl	8009b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d86:	f000 fd7b 	bl	8008880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d8a:	f001 feb3 	bl	8009af4 <vPortEnterCritical>
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d94:	b25b      	sxtb	r3, r3
 8007d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9a:	d103      	bne.n	8007da4 <xQueueGenericSend+0x16c>
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007daa:	b25b      	sxtb	r3, r3
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007db0:	d103      	bne.n	8007dba <xQueueGenericSend+0x182>
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dba:	f001 fecb 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dbe:	1d3a      	adds	r2, r7, #4
 8007dc0:	f107 0314 	add.w	r3, r7, #20
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fff8 	bl	8008dbc <xTaskCheckForTimeOut>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d124      	bne.n	8007e1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007dd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dd4:	f000 faa2 	bl	800831c <prvIsQueueFull>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d018      	beq.n	8007e10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de0:	3310      	adds	r3, #16
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 ff1e 	bl	8008c28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007dec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dee:	f000 fa2d 	bl	800824c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007df2:	f000 fd53 	bl	800889c <xTaskResumeAll>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f47f af7c 	bne.w	8007cf6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007dfe:	4b0c      	ldr	r3, [pc, #48]	; (8007e30 <xQueueGenericSend+0x1f8>)
 8007e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	e772      	b.n	8007cf6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e12:	f000 fa1b 	bl	800824c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e16:	f000 fd41 	bl	800889c <xTaskResumeAll>
 8007e1a:	e76c      	b.n	8007cf6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e1e:	f000 fa15 	bl	800824c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e22:	f000 fd3b 	bl	800889c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3738      	adds	r7, #56	; 0x38
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	e000ed04 	.word	0xe000ed04

08007e34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b090      	sub	sp, #64	; 0x40
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10a      	bne.n	8007e62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d103      	bne.n	8007e70 <xQueueGenericSendFromISR+0x3c>
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <xQueueGenericSendFromISR+0x40>
 8007e70:	2301      	movs	r3, #1
 8007e72:	e000      	b.n	8007e76 <xQueueGenericSendFromISR+0x42>
 8007e74:	2300      	movs	r3, #0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10a      	bne.n	8007e90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e8c:	bf00      	nop
 8007e8e:	e7fe      	b.n	8007e8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d103      	bne.n	8007e9e <xQueueGenericSendFromISR+0x6a>
 8007e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d101      	bne.n	8007ea2 <xQueueGenericSendFromISR+0x6e>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e000      	b.n	8007ea4 <xQueueGenericSendFromISR+0x70>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10a      	bne.n	8007ebe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	623b      	str	r3, [r7, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ebe:	f001 fefb 	bl	8009cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ec2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	61fa      	str	r2, [r7, #28]
 8007ed8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007eda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007edc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d302      	bcc.n	8007ef0 <xQueueGenericSendFromISR+0xbc>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d12f      	bne.n	8007f50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	68b9      	ldr	r1, [r7, #8]
 8007f04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f06:	f000 f911 	bl	800812c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f12:	d112      	bne.n	8007f3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d016      	beq.n	8007f4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	3324      	adds	r3, #36	; 0x24
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fed1 	bl	8008cc8 <xTaskRemoveFromEventList>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00e      	beq.n	8007f4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00b      	beq.n	8007f4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	e007      	b.n	8007f4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f3e:	3301      	adds	r3, #1
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	b25a      	sxtb	r2, r3
 8007f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f4e:	e001      	b.n	8007f54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3740      	adds	r7, #64	; 0x40
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
	...

08007f6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b08c      	sub	sp, #48	; 0x30
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10a      	bne.n	8007f9c <xQueueReceive+0x30>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	623b      	str	r3, [r7, #32]
}
 8007f98:	bf00      	nop
 8007f9a:	e7fe      	b.n	8007f9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d103      	bne.n	8007faa <xQueueReceive+0x3e>
 8007fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <xQueueReceive+0x42>
 8007faa:	2301      	movs	r3, #1
 8007fac:	e000      	b.n	8007fb0 <xQueueReceive+0x44>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10a      	bne.n	8007fca <xQueueReceive+0x5e>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	61fb      	str	r3, [r7, #28]
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fca:	f001 f83b 	bl	8009044 <xTaskGetSchedulerState>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d102      	bne.n	8007fda <xQueueReceive+0x6e>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <xQueueReceive+0x72>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e000      	b.n	8007fe0 <xQueueReceive+0x74>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10a      	bne.n	8007ffa <xQueueReceive+0x8e>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	61bb      	str	r3, [r7, #24]
}
 8007ff6:	bf00      	nop
 8007ff8:	e7fe      	b.n	8007ff8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ffa:	f001 fd7b 	bl	8009af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	2b00      	cmp	r3, #0
 8008008:	d01f      	beq.n	800804a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800800a:	68b9      	ldr	r1, [r7, #8]
 800800c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800800e:	f000 f8f7 	bl	8008200 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	1e5a      	subs	r2, r3, #1
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00f      	beq.n	8008042 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	3310      	adds	r3, #16
 8008026:	4618      	mov	r0, r3
 8008028:	f000 fe4e 	bl	8008cc8 <xTaskRemoveFromEventList>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008032:	4b3d      	ldr	r3, [pc, #244]	; (8008128 <xQueueReceive+0x1bc>)
 8008034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008038:	601a      	str	r2, [r3, #0]
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008042:	f001 fd87 	bl	8009b54 <vPortExitCritical>
				return pdPASS;
 8008046:	2301      	movs	r3, #1
 8008048:	e069      	b.n	800811e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d103      	bne.n	8008058 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008050:	f001 fd80 	bl	8009b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008054:	2300      	movs	r3, #0
 8008056:	e062      	b.n	800811e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800805e:	f107 0310 	add.w	r3, r7, #16
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fe94 	bl	8008d90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008068:	2301      	movs	r3, #1
 800806a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800806c:	f001 fd72 	bl	8009b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008070:	f000 fc06 	bl	8008880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008074:	f001 fd3e 	bl	8009af4 <vPortEnterCritical>
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800807e:	b25b      	sxtb	r3, r3
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008084:	d103      	bne.n	800808e <xQueueReceive+0x122>
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008094:	b25b      	sxtb	r3, r3
 8008096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809a:	d103      	bne.n	80080a4 <xQueueReceive+0x138>
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080a4:	f001 fd56 	bl	8009b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080a8:	1d3a      	adds	r2, r7, #4
 80080aa:	f107 0310 	add.w	r3, r7, #16
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fe83 	bl	8008dbc <xTaskCheckForTimeOut>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d123      	bne.n	8008104 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080be:	f000 f917 	bl	80082f0 <prvIsQueueEmpty>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d017      	beq.n	80080f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	3324      	adds	r3, #36	; 0x24
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	4611      	mov	r1, r2
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fda9 	bl	8008c28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080d8:	f000 f8b8 	bl	800824c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080dc:	f000 fbde 	bl	800889c <xTaskResumeAll>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d189      	bne.n	8007ffa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80080e6:	4b10      	ldr	r3, [pc, #64]	; (8008128 <xQueueReceive+0x1bc>)
 80080e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	e780      	b.n	8007ffa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80080f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080fa:	f000 f8a7 	bl	800824c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080fe:	f000 fbcd 	bl	800889c <xTaskResumeAll>
 8008102:	e77a      	b.n	8007ffa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008106:	f000 f8a1 	bl	800824c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800810a:	f000 fbc7 	bl	800889c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800810e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008110:	f000 f8ee 	bl	80082f0 <prvIsQueueEmpty>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	f43f af6f 	beq.w	8007ffa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800811c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800811e:	4618      	mov	r0, r3
 8008120:	3730      	adds	r7, #48	; 0x30
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008138:	2300      	movs	r3, #0
 800813a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008140:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10d      	bne.n	8008166 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d14d      	bne.n	80081ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	4618      	mov	r0, r3
 8008158:	f000 ff92 	bl	8009080 <xTaskPriorityDisinherit>
 800815c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	609a      	str	r2, [r3, #8]
 8008164:	e043      	b.n	80081ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d119      	bne.n	80081a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6858      	ldr	r0, [r3, #4]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008174:	461a      	mov	r2, r3
 8008176:	68b9      	ldr	r1, [r7, #8]
 8008178:	f002 f81a 	bl	800a1b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008184:	441a      	add	r2, r3
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	429a      	cmp	r2, r3
 8008194:	d32b      	bcc.n	80081ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	605a      	str	r2, [r3, #4]
 800819e:	e026      	b.n	80081ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	68d8      	ldr	r0, [r3, #12]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a8:	461a      	mov	r2, r3
 80081aa:	68b9      	ldr	r1, [r7, #8]
 80081ac:	f002 f800 	bl	800a1b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	68da      	ldr	r2, [r3, #12]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	425b      	negs	r3, r3
 80081ba:	441a      	add	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d207      	bcs.n	80081dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	425b      	negs	r3, r3
 80081d6:	441a      	add	r2, r3
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d105      	bne.n	80081ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80081f6:	697b      	ldr	r3, [r7, #20]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	d018      	beq.n	8008244 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68da      	ldr	r2, [r3, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	441a      	add	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	429a      	cmp	r2, r3
 800822a:	d303      	bcc.n	8008234 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68d9      	ldr	r1, [r3, #12]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823c:	461a      	mov	r2, r3
 800823e:	6838      	ldr	r0, [r7, #0]
 8008240:	f001 ffb6 	bl	800a1b0 <memcpy>
	}
}
 8008244:	bf00      	nop
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008254:	f001 fc4e 	bl	8009af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800825e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008260:	e011      	b.n	8008286 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	d012      	beq.n	8008290 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	3324      	adds	r3, #36	; 0x24
 800826e:	4618      	mov	r0, r3
 8008270:	f000 fd2a 	bl	8008cc8 <xTaskRemoveFromEventList>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800827a:	f000 fe01 	bl	8008e80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	3b01      	subs	r3, #1
 8008282:	b2db      	uxtb	r3, r3
 8008284:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800828a:	2b00      	cmp	r3, #0
 800828c:	dce9      	bgt.n	8008262 <prvUnlockQueue+0x16>
 800828e:	e000      	b.n	8008292 <prvUnlockQueue+0x46>
					break;
 8008290:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	22ff      	movs	r2, #255	; 0xff
 8008296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800829a:	f001 fc5b 	bl	8009b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800829e:	f001 fc29 	bl	8009af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082aa:	e011      	b.n	80082d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d012      	beq.n	80082da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3310      	adds	r3, #16
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 fd05 	bl	8008cc8 <xTaskRemoveFromEventList>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082c4:	f000 fddc 	bl	8008e80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082c8:	7bbb      	ldrb	r3, [r7, #14]
 80082ca:	3b01      	subs	r3, #1
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	dce9      	bgt.n	80082ac <prvUnlockQueue+0x60>
 80082d8:	e000      	b.n	80082dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	22ff      	movs	r2, #255	; 0xff
 80082e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80082e4:	f001 fc36 	bl	8009b54 <vPortExitCritical>
}
 80082e8:	bf00      	nop
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082f8:	f001 fbfc 	bl	8009af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	2b00      	cmp	r3, #0
 8008302:	d102      	bne.n	800830a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008304:	2301      	movs	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	e001      	b.n	800830e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800830a:	2300      	movs	r3, #0
 800830c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800830e:	f001 fc21 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 8008312:	68fb      	ldr	r3, [r7, #12]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008324:	f001 fbe6 	bl	8009af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008330:	429a      	cmp	r2, r3
 8008332:	d102      	bne.n	800833a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008334:	2301      	movs	r3, #1
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	e001      	b.n	800833e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800833a:	2300      	movs	r3, #0
 800833c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800833e:	f001 fc09 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 8008342:	68fb      	ldr	r3, [r7, #12]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
 800835a:	e014      	b.n	8008386 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800835c:	4a0f      	ldr	r2, [pc, #60]	; (800839c <vQueueAddToRegistry+0x50>)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10b      	bne.n	8008380 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008368:	490c      	ldr	r1, [pc, #48]	; (800839c <vQueueAddToRegistry+0x50>)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008372:	4a0a      	ldr	r2, [pc, #40]	; (800839c <vQueueAddToRegistry+0x50>)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	4413      	add	r3, r2
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800837e:	e006      	b.n	800838e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3301      	adds	r3, #1
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b07      	cmp	r3, #7
 800838a:	d9e7      	bls.n	800835c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800838c:	bf00      	nop
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	20001270 	.word	0x20001270

080083a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083b0:	f001 fba0 	bl	8009af4 <vPortEnterCritical>
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083ba:	b25b      	sxtb	r3, r3
 80083bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c0:	d103      	bne.n	80083ca <vQueueWaitForMessageRestricted+0x2a>
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d0:	b25b      	sxtb	r3, r3
 80083d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d6:	d103      	bne.n	80083e0 <vQueueWaitForMessageRestricted+0x40>
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083e0:	f001 fbb8 	bl	8009b54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d106      	bne.n	80083fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	3324      	adds	r3, #36	; 0x24
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	68b9      	ldr	r1, [r7, #8]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f000 fc3b 	bl	8008c70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80083fa:	6978      	ldr	r0, [r7, #20]
 80083fc:	f7ff ff26 	bl	800824c <prvUnlockQueue>
	}
 8008400:	bf00      	nop
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08e      	sub	sp, #56	; 0x38
 800840c:	af04      	add	r7, sp, #16
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10a      	bne.n	8008432 <xTaskCreateStatic+0x2a>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	623b      	str	r3, [r7, #32]
}
 800842e:	bf00      	nop
 8008430:	e7fe      	b.n	8008430 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10a      	bne.n	800844e <xTaskCreateStatic+0x46>
	__asm volatile
 8008438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	61fb      	str	r3, [r7, #28]
}
 800844a:	bf00      	nop
 800844c:	e7fe      	b.n	800844c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800844e:	235c      	movs	r3, #92	; 0x5c
 8008450:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b5c      	cmp	r3, #92	; 0x5c
 8008456:	d00a      	beq.n	800846e <xTaskCreateStatic+0x66>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	61bb      	str	r3, [r7, #24]
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800846e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	2b00      	cmp	r3, #0
 8008474:	d01e      	beq.n	80084b4 <xTaskCreateStatic+0xac>
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008478:	2b00      	cmp	r3, #0
 800847a:	d01b      	beq.n	80084b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008484:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	2202      	movs	r2, #2
 800848a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800848e:	2300      	movs	r3, #0
 8008490:	9303      	str	r3, [sp, #12]
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	9302      	str	r3, [sp, #8]
 8008496:	f107 0314 	add.w	r3, r7, #20
 800849a:	9301      	str	r3, [sp, #4]
 800849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	68b9      	ldr	r1, [r7, #8]
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 f850 	bl	800854c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084ae:	f000 f8dd 	bl	800866c <prvAddNewTaskToReadyList>
 80084b2:	e001      	b.n	80084b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80084b4:	2300      	movs	r3, #0
 80084b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084b8:	697b      	ldr	r3, [r7, #20]
	}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3728      	adds	r7, #40	; 0x28
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}

080084c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084c2:	b580      	push	{r7, lr}
 80084c4:	b08c      	sub	sp, #48	; 0x30
 80084c6:	af04      	add	r7, sp, #16
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	603b      	str	r3, [r7, #0]
 80084ce:	4613      	mov	r3, r2
 80084d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084d2:	88fb      	ldrh	r3, [r7, #6]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 fc2e 	bl	8009d38 <pvPortMalloc>
 80084dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00e      	beq.n	8008502 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80084e4:	205c      	movs	r0, #92	; 0x5c
 80084e6:	f001 fc27 	bl	8009d38 <pvPortMalloc>
 80084ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	631a      	str	r2, [r3, #48]	; 0x30
 80084f8:	e005      	b.n	8008506 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80084fa:	6978      	ldr	r0, [r7, #20]
 80084fc:	f001 fce8 	bl	8009ed0 <vPortFree>
 8008500:	e001      	b.n	8008506 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d017      	beq.n	800853c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008514:	88fa      	ldrh	r2, [r7, #6]
 8008516:	2300      	movs	r3, #0
 8008518:	9303      	str	r3, [sp, #12]
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	9302      	str	r3, [sp, #8]
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	9301      	str	r3, [sp, #4]
 8008522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68b9      	ldr	r1, [r7, #8]
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 f80e 	bl	800854c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008530:	69f8      	ldr	r0, [r7, #28]
 8008532:	f000 f89b 	bl	800866c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008536:	2301      	movs	r3, #1
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	e002      	b.n	8008542 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800853c:	f04f 33ff 	mov.w	r3, #4294967295
 8008540:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008542:	69bb      	ldr	r3, [r7, #24]
	}
 8008544:	4618      	mov	r0, r3
 8008546:	3720      	adds	r7, #32
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
 8008558:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	461a      	mov	r2, r3
 8008564:	21a5      	movs	r1, #165	; 0xa5
 8008566:	f001 fe31 	bl	800a1cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008574:	3b01      	subs	r3, #1
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	f023 0307 	bic.w	r3, r3, #7
 8008582:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	617b      	str	r3, [r7, #20]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d01f      	beq.n	80085ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085aa:	2300      	movs	r3, #0
 80085ac:	61fb      	str	r3, [r7, #28]
 80085ae:	e012      	b.n	80085d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	4413      	add	r3, r2
 80085b6:	7819      	ldrb	r1, [r3, #0]
 80085b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	4413      	add	r3, r2
 80085be:	3334      	adds	r3, #52	; 0x34
 80085c0:	460a      	mov	r2, r1
 80085c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	4413      	add	r3, r2
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d006      	beq.n	80085de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	3301      	adds	r3, #1
 80085d4:	61fb      	str	r3, [r7, #28]
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	2b0f      	cmp	r3, #15
 80085da:	d9e9      	bls.n	80085b0 <prvInitialiseNewTask+0x64>
 80085dc:	e000      	b.n	80085e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80085de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085e8:	e003      	b.n	80085f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80085f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f4:	2b37      	cmp	r3, #55	; 0x37
 80085f6:	d901      	bls.n	80085fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80085f8:	2337      	movs	r3, #55	; 0x37
 80085fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008600:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008606:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	2200      	movs	r2, #0
 800860c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	3304      	adds	r3, #4
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff f978 	bl	8007908 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	3318      	adds	r3, #24
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff f973 	bl	8007908 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008626:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008636:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	2200      	movs	r2, #0
 800863c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	2200      	movs	r2, #0
 8008642:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	68f9      	ldr	r1, [r7, #12]
 800864a:	69b8      	ldr	r0, [r7, #24]
 800864c:	f001 f928 	bl	80098a0 <pxPortInitialiseStack>
 8008650:	4602      	mov	r2, r0
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008658:	2b00      	cmp	r3, #0
 800865a:	d002      	beq.n	8008662 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800865c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008662:	bf00      	nop
 8008664:	3720      	adds	r7, #32
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008674:	f001 fa3e 	bl	8009af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008678:	4b2d      	ldr	r3, [pc, #180]	; (8008730 <prvAddNewTaskToReadyList+0xc4>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3301      	adds	r3, #1
 800867e:	4a2c      	ldr	r2, [pc, #176]	; (8008730 <prvAddNewTaskToReadyList+0xc4>)
 8008680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008682:	4b2c      	ldr	r3, [pc, #176]	; (8008734 <prvAddNewTaskToReadyList+0xc8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d109      	bne.n	800869e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800868a:	4a2a      	ldr	r2, [pc, #168]	; (8008734 <prvAddNewTaskToReadyList+0xc8>)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008690:	4b27      	ldr	r3, [pc, #156]	; (8008730 <prvAddNewTaskToReadyList+0xc4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d110      	bne.n	80086ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008698:	f000 fc16 	bl	8008ec8 <prvInitialiseTaskLists>
 800869c:	e00d      	b.n	80086ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800869e:	4b26      	ldr	r3, [pc, #152]	; (8008738 <prvAddNewTaskToReadyList+0xcc>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d109      	bne.n	80086ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086a6:	4b23      	ldr	r3, [pc, #140]	; (8008734 <prvAddNewTaskToReadyList+0xc8>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d802      	bhi.n	80086ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086b4:	4a1f      	ldr	r2, [pc, #124]	; (8008734 <prvAddNewTaskToReadyList+0xc8>)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086ba:	4b20      	ldr	r3, [pc, #128]	; (800873c <prvAddNewTaskToReadyList+0xd0>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3301      	adds	r3, #1
 80086c0:	4a1e      	ldr	r2, [pc, #120]	; (800873c <prvAddNewTaskToReadyList+0xd0>)
 80086c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80086c4:	4b1d      	ldr	r3, [pc, #116]	; (800873c <prvAddNewTaskToReadyList+0xd0>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d0:	4b1b      	ldr	r3, [pc, #108]	; (8008740 <prvAddNewTaskToReadyList+0xd4>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d903      	bls.n	80086e0 <prvAddNewTaskToReadyList+0x74>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086dc:	4a18      	ldr	r2, [pc, #96]	; (8008740 <prvAddNewTaskToReadyList+0xd4>)
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4a15      	ldr	r2, [pc, #84]	; (8008744 <prvAddNewTaskToReadyList+0xd8>)
 80086ee:	441a      	add	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	f7ff f913 	bl	8007922 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086fc:	f001 fa2a 	bl	8009b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008700:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <prvAddNewTaskToReadyList+0xcc>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00e      	beq.n	8008726 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008708:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <prvAddNewTaskToReadyList+0xc8>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008712:	429a      	cmp	r2, r3
 8008714:	d207      	bcs.n	8008726 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008716:	4b0c      	ldr	r3, [pc, #48]	; (8008748 <prvAddNewTaskToReadyList+0xdc>)
 8008718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008726:	bf00      	nop
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20001784 	.word	0x20001784
 8008734:	200012b0 	.word	0x200012b0
 8008738:	20001790 	.word	0x20001790
 800873c:	200017a0 	.word	0x200017a0
 8008740:	2000178c 	.word	0x2000178c
 8008744:	200012b4 	.word	0x200012b4
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d017      	beq.n	800878e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800875e:	4b13      	ldr	r3, [pc, #76]	; (80087ac <vTaskDelay+0x60>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00a      	beq.n	800877c <vTaskDelay+0x30>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	60bb      	str	r3, [r7, #8]
}
 8008778:	bf00      	nop
 800877a:	e7fe      	b.n	800877a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800877c:	f000 f880 	bl	8008880 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008780:	2100      	movs	r1, #0
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fcea 	bl	800915c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008788:	f000 f888 	bl	800889c <xTaskResumeAll>
 800878c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d107      	bne.n	80087a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008794:	4b06      	ldr	r3, [pc, #24]	; (80087b0 <vTaskDelay+0x64>)
 8008796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087a4:	bf00      	nop
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}
 80087ac:	200017ac 	.word	0x200017ac
 80087b0:	e000ed04 	.word	0xe000ed04

080087b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08a      	sub	sp, #40	; 0x28
 80087b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087c2:	463a      	mov	r2, r7
 80087c4:	1d39      	adds	r1, r7, #4
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff f848 	bl	8007860 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	9202      	str	r2, [sp, #8]
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	2300      	movs	r3, #0
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	2300      	movs	r3, #0
 80087e0:	460a      	mov	r2, r1
 80087e2:	4921      	ldr	r1, [pc, #132]	; (8008868 <vTaskStartScheduler+0xb4>)
 80087e4:	4821      	ldr	r0, [pc, #132]	; (800886c <vTaskStartScheduler+0xb8>)
 80087e6:	f7ff fe0f 	bl	8008408 <xTaskCreateStatic>
 80087ea:	4603      	mov	r3, r0
 80087ec:	4a20      	ldr	r2, [pc, #128]	; (8008870 <vTaskStartScheduler+0xbc>)
 80087ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087f0:	4b1f      	ldr	r3, [pc, #124]	; (8008870 <vTaskStartScheduler+0xbc>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087f8:	2301      	movs	r3, #1
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	e001      	b.n	8008802 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d102      	bne.n	800880e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008808:	f000 fcfc 	bl	8009204 <xTimerCreateTimerTask>
 800880c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d116      	bne.n	8008842 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	613b      	str	r3, [r7, #16]
}
 8008826:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008828:	4b12      	ldr	r3, [pc, #72]	; (8008874 <vTaskStartScheduler+0xc0>)
 800882a:	f04f 32ff 	mov.w	r2, #4294967295
 800882e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008830:	4b11      	ldr	r3, [pc, #68]	; (8008878 <vTaskStartScheduler+0xc4>)
 8008832:	2201      	movs	r2, #1
 8008834:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008836:	4b11      	ldr	r3, [pc, #68]	; (800887c <vTaskStartScheduler+0xc8>)
 8008838:	2200      	movs	r2, #0
 800883a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800883c:	f001 f8b8 	bl	80099b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008840:	e00e      	b.n	8008860 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008848:	d10a      	bne.n	8008860 <vTaskStartScheduler+0xac>
	__asm volatile
 800884a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884e:	f383 8811 	msr	BASEPRI, r3
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	f3bf 8f4f 	dsb	sy
 800885a:	60fb      	str	r3, [r7, #12]
}
 800885c:	bf00      	nop
 800885e:	e7fe      	b.n	800885e <vTaskStartScheduler+0xaa>
}
 8008860:	bf00      	nop
 8008862:	3718      	adds	r7, #24
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	0800e538 	.word	0x0800e538
 800886c:	08008e99 	.word	0x08008e99
 8008870:	200017a8 	.word	0x200017a8
 8008874:	200017a4 	.word	0x200017a4
 8008878:	20001790 	.word	0x20001790
 800887c:	20001788 	.word	0x20001788

08008880 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008884:	4b04      	ldr	r3, [pc, #16]	; (8008898 <vTaskSuspendAll+0x18>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3301      	adds	r3, #1
 800888a:	4a03      	ldr	r2, [pc, #12]	; (8008898 <vTaskSuspendAll+0x18>)
 800888c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800888e:	bf00      	nop
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	200017ac 	.word	0x200017ac

0800889c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088aa:	4b42      	ldr	r3, [pc, #264]	; (80089b4 <xTaskResumeAll+0x118>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	603b      	str	r3, [r7, #0]
}
 80088c4:	bf00      	nop
 80088c6:	e7fe      	b.n	80088c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088c8:	f001 f914 	bl	8009af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088cc:	4b39      	ldr	r3, [pc, #228]	; (80089b4 <xTaskResumeAll+0x118>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	4a38      	ldr	r2, [pc, #224]	; (80089b4 <xTaskResumeAll+0x118>)
 80088d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088d6:	4b37      	ldr	r3, [pc, #220]	; (80089b4 <xTaskResumeAll+0x118>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d162      	bne.n	80089a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088de:	4b36      	ldr	r3, [pc, #216]	; (80089b8 <xTaskResumeAll+0x11c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d05e      	beq.n	80089a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088e6:	e02f      	b.n	8008948 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088e8:	4b34      	ldr	r3, [pc, #208]	; (80089bc <xTaskResumeAll+0x120>)
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3318      	adds	r3, #24
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7ff f871 	bl	80079dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3304      	adds	r3, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff f86c 	bl	80079dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008908:	4b2d      	ldr	r3, [pc, #180]	; (80089c0 <xTaskResumeAll+0x124>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d903      	bls.n	8008918 <xTaskResumeAll+0x7c>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	4a2a      	ldr	r2, [pc, #168]	; (80089c0 <xTaskResumeAll+0x124>)
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4a27      	ldr	r2, [pc, #156]	; (80089c4 <xTaskResumeAll+0x128>)
 8008926:	441a      	add	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3304      	adds	r3, #4
 800892c:	4619      	mov	r1, r3
 800892e:	4610      	mov	r0, r2
 8008930:	f7fe fff7 	bl	8007922 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008938:	4b23      	ldr	r3, [pc, #140]	; (80089c8 <xTaskResumeAll+0x12c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893e:	429a      	cmp	r2, r3
 8008940:	d302      	bcc.n	8008948 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008942:	4b22      	ldr	r3, [pc, #136]	; (80089cc <xTaskResumeAll+0x130>)
 8008944:	2201      	movs	r2, #1
 8008946:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008948:	4b1c      	ldr	r3, [pc, #112]	; (80089bc <xTaskResumeAll+0x120>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d1cb      	bne.n	80088e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008956:	f000 fb55 	bl	8009004 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800895a:	4b1d      	ldr	r3, [pc, #116]	; (80089d0 <xTaskResumeAll+0x134>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d010      	beq.n	8008988 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008966:	f000 f847 	bl	80089f8 <xTaskIncrementTick>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d002      	beq.n	8008976 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008970:	4b16      	ldr	r3, [pc, #88]	; (80089cc <xTaskResumeAll+0x130>)
 8008972:	2201      	movs	r2, #1
 8008974:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	3b01      	subs	r3, #1
 800897a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f1      	bne.n	8008966 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008982:	4b13      	ldr	r3, [pc, #76]	; (80089d0 <xTaskResumeAll+0x134>)
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008988:	4b10      	ldr	r3, [pc, #64]	; (80089cc <xTaskResumeAll+0x130>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008990:	2301      	movs	r3, #1
 8008992:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008994:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <xTaskResumeAll+0x138>)
 8008996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899a:	601a      	str	r2, [r3, #0]
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089a4:	f001 f8d6 	bl	8009b54 <vPortExitCritical>

	return xAlreadyYielded;
 80089a8:	68bb      	ldr	r3, [r7, #8]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	200017ac 	.word	0x200017ac
 80089b8:	20001784 	.word	0x20001784
 80089bc:	20001744 	.word	0x20001744
 80089c0:	2000178c 	.word	0x2000178c
 80089c4:	200012b4 	.word	0x200012b4
 80089c8:	200012b0 	.word	0x200012b0
 80089cc:	20001798 	.word	0x20001798
 80089d0:	20001794 	.word	0x20001794
 80089d4:	e000ed04 	.word	0xe000ed04

080089d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089de:	4b05      	ldr	r3, [pc, #20]	; (80089f4 <xTaskGetTickCount+0x1c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089e4:	687b      	ldr	r3, [r7, #4]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	20001788 	.word	0x20001788

080089f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089fe:	2300      	movs	r3, #0
 8008a00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a02:	4b4f      	ldr	r3, [pc, #316]	; (8008b40 <xTaskIncrementTick+0x148>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f040 808f 	bne.w	8008b2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a0c:	4b4d      	ldr	r3, [pc, #308]	; (8008b44 <xTaskIncrementTick+0x14c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3301      	adds	r3, #1
 8008a12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a14:	4a4b      	ldr	r2, [pc, #300]	; (8008b44 <xTaskIncrementTick+0x14c>)
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d120      	bne.n	8008a62 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a20:	4b49      	ldr	r3, [pc, #292]	; (8008b48 <xTaskIncrementTick+0x150>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <xTaskIncrementTick+0x48>
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	603b      	str	r3, [r7, #0]
}
 8008a3c:	bf00      	nop
 8008a3e:	e7fe      	b.n	8008a3e <xTaskIncrementTick+0x46>
 8008a40:	4b41      	ldr	r3, [pc, #260]	; (8008b48 <xTaskIncrementTick+0x150>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	4b41      	ldr	r3, [pc, #260]	; (8008b4c <xTaskIncrementTick+0x154>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a3f      	ldr	r2, [pc, #252]	; (8008b48 <xTaskIncrementTick+0x150>)
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	4a3f      	ldr	r2, [pc, #252]	; (8008b4c <xTaskIncrementTick+0x154>)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	6013      	str	r3, [r2, #0]
 8008a54:	4b3e      	ldr	r3, [pc, #248]	; (8008b50 <xTaskIncrementTick+0x158>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	4a3d      	ldr	r2, [pc, #244]	; (8008b50 <xTaskIncrementTick+0x158>)
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	f000 fad1 	bl	8009004 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a62:	4b3c      	ldr	r3, [pc, #240]	; (8008b54 <xTaskIncrementTick+0x15c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d349      	bcc.n	8008b00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a6c:	4b36      	ldr	r3, [pc, #216]	; (8008b48 <xTaskIncrementTick+0x150>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d104      	bne.n	8008a80 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a76:	4b37      	ldr	r3, [pc, #220]	; (8008b54 <xTaskIncrementTick+0x15c>)
 8008a78:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7c:	601a      	str	r2, [r3, #0]
					break;
 8008a7e:	e03f      	b.n	8008b00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a80:	4b31      	ldr	r3, [pc, #196]	; (8008b48 <xTaskIncrementTick+0x150>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d203      	bcs.n	8008aa0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a98:	4a2e      	ldr	r2, [pc, #184]	; (8008b54 <xTaskIncrementTick+0x15c>)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a9e:	e02f      	b.n	8008b00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe ff99 	bl	80079dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d004      	beq.n	8008abc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	3318      	adds	r3, #24
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe ff90 	bl	80079dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac0:	4b25      	ldr	r3, [pc, #148]	; (8008b58 <xTaskIncrementTick+0x160>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d903      	bls.n	8008ad0 <xTaskIncrementTick+0xd8>
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	4a22      	ldr	r2, [pc, #136]	; (8008b58 <xTaskIncrementTick+0x160>)
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4a1f      	ldr	r2, [pc, #124]	; (8008b5c <xTaskIncrementTick+0x164>)
 8008ade:	441a      	add	r2, r3
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	f7fe ff1b 	bl	8007922 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008af0:	4b1b      	ldr	r3, [pc, #108]	; (8008b60 <xTaskIncrementTick+0x168>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d3b8      	bcc.n	8008a6c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008afa:	2301      	movs	r3, #1
 8008afc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008afe:	e7b5      	b.n	8008a6c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b00:	4b17      	ldr	r3, [pc, #92]	; (8008b60 <xTaskIncrementTick+0x168>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b06:	4915      	ldr	r1, [pc, #84]	; (8008b5c <xTaskIncrementTick+0x164>)
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d901      	bls.n	8008b1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008b1c:	4b11      	ldr	r3, [pc, #68]	; (8008b64 <xTaskIncrementTick+0x16c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d007      	beq.n	8008b34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	e004      	b.n	8008b34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008b2a:	4b0f      	ldr	r3, [pc, #60]	; (8008b68 <xTaskIncrementTick+0x170>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	4a0d      	ldr	r2, [pc, #52]	; (8008b68 <xTaskIncrementTick+0x170>)
 8008b32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008b34:	697b      	ldr	r3, [r7, #20]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3718      	adds	r7, #24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	200017ac 	.word	0x200017ac
 8008b44:	20001788 	.word	0x20001788
 8008b48:	2000173c 	.word	0x2000173c
 8008b4c:	20001740 	.word	0x20001740
 8008b50:	2000179c 	.word	0x2000179c
 8008b54:	200017a4 	.word	0x200017a4
 8008b58:	2000178c 	.word	0x2000178c
 8008b5c:	200012b4 	.word	0x200012b4
 8008b60:	200012b0 	.word	0x200012b0
 8008b64:	20001798 	.word	0x20001798
 8008b68:	20001794 	.word	0x20001794

08008b6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b72:	4b28      	ldr	r3, [pc, #160]	; (8008c14 <vTaskSwitchContext+0xa8>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b7a:	4b27      	ldr	r3, [pc, #156]	; (8008c18 <vTaskSwitchContext+0xac>)
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b80:	e041      	b.n	8008c06 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008b82:	4b25      	ldr	r3, [pc, #148]	; (8008c18 <vTaskSwitchContext+0xac>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b88:	4b24      	ldr	r3, [pc, #144]	; (8008c1c <vTaskSwitchContext+0xb0>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	e010      	b.n	8008bb2 <vTaskSwitchContext+0x46>
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10a      	bne.n	8008bac <vTaskSwitchContext+0x40>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	607b      	str	r3, [r7, #4]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <vTaskSwitchContext+0x3e>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	60fb      	str	r3, [r7, #12]
 8008bb2:	491b      	ldr	r1, [pc, #108]	; (8008c20 <vTaskSwitchContext+0xb4>)
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	440b      	add	r3, r1
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d0e4      	beq.n	8008b90 <vTaskSwitchContext+0x24>
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4a13      	ldr	r2, [pc, #76]	; (8008c20 <vTaskSwitchContext+0xb4>)
 8008bd2:	4413      	add	r3, r2
 8008bd4:	60bb      	str	r3, [r7, #8]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	605a      	str	r2, [r3, #4]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	3308      	adds	r3, #8
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d104      	bne.n	8008bf6 <vTaskSwitchContext+0x8a>
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	605a      	str	r2, [r3, #4]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	4a09      	ldr	r2, [pc, #36]	; (8008c24 <vTaskSwitchContext+0xb8>)
 8008bfe:	6013      	str	r3, [r2, #0]
 8008c00:	4a06      	ldr	r2, [pc, #24]	; (8008c1c <vTaskSwitchContext+0xb0>)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6013      	str	r3, [r2, #0]
}
 8008c06:	bf00      	nop
 8008c08:	3714      	adds	r7, #20
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	200017ac 	.word	0x200017ac
 8008c18:	20001798 	.word	0x20001798
 8008c1c:	2000178c 	.word	0x2000178c
 8008c20:	200012b4 	.word	0x200012b4
 8008c24:	200012b0 	.word	0x200012b0

08008c28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	60fb      	str	r3, [r7, #12]
}
 8008c4a:	bf00      	nop
 8008c4c:	e7fe      	b.n	8008c4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c4e:	4b07      	ldr	r3, [pc, #28]	; (8008c6c <vTaskPlaceOnEventList+0x44>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3318      	adds	r3, #24
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7fe fe87 	bl	800796a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	6838      	ldr	r0, [r7, #0]
 8008c60:	f000 fa7c 	bl	800915c <prvAddCurrentTaskToDelayedList>
}
 8008c64:	bf00      	nop
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	200012b0 	.word	0x200012b0

08008c70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10a      	bne.n	8008c98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	617b      	str	r3, [r7, #20]
}
 8008c94:	bf00      	nop
 8008c96:	e7fe      	b.n	8008c96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c98:	4b0a      	ldr	r3, [pc, #40]	; (8008cc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3318      	adds	r3, #24
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f7fe fe3e 	bl	8007922 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008cac:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	68b8      	ldr	r0, [r7, #8]
 8008cb6:	f000 fa51 	bl	800915c <prvAddCurrentTaskToDelayedList>
	}
 8008cba:	bf00      	nop
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	200012b0 	.word	0x200012b0

08008cc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10a      	bne.n	8008cf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	60fb      	str	r3, [r7, #12]
}
 8008cf0:	bf00      	nop
 8008cf2:	e7fe      	b.n	8008cf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	3318      	adds	r3, #24
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fe fe6f 	bl	80079dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cfe:	4b1e      	ldr	r3, [pc, #120]	; (8008d78 <xTaskRemoveFromEventList+0xb0>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d11d      	bne.n	8008d42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fe fe66 	bl	80079dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	4b19      	ldr	r3, [pc, #100]	; (8008d7c <xTaskRemoveFromEventList+0xb4>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d903      	bls.n	8008d24 <xTaskRemoveFromEventList+0x5c>
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	4a16      	ldr	r2, [pc, #88]	; (8008d7c <xTaskRemoveFromEventList+0xb4>)
 8008d22:	6013      	str	r3, [r2, #0]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4a13      	ldr	r2, [pc, #76]	; (8008d80 <xTaskRemoveFromEventList+0xb8>)
 8008d32:	441a      	add	r2, r3
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	3304      	adds	r3, #4
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4610      	mov	r0, r2
 8008d3c:	f7fe fdf1 	bl	8007922 <vListInsertEnd>
 8008d40:	e005      	b.n	8008d4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	3318      	adds	r3, #24
 8008d46:	4619      	mov	r1, r3
 8008d48:	480e      	ldr	r0, [pc, #56]	; (8008d84 <xTaskRemoveFromEventList+0xbc>)
 8008d4a:	f7fe fdea 	bl	8007922 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d52:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <xTaskRemoveFromEventList+0xc0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d905      	bls.n	8008d68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d60:	4b0a      	ldr	r3, [pc, #40]	; (8008d8c <xTaskRemoveFromEventList+0xc4>)
 8008d62:	2201      	movs	r2, #1
 8008d64:	601a      	str	r2, [r3, #0]
 8008d66:	e001      	b.n	8008d6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d6c:	697b      	ldr	r3, [r7, #20]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	200017ac 	.word	0x200017ac
 8008d7c:	2000178c 	.word	0x2000178c
 8008d80:	200012b4 	.word	0x200012b4
 8008d84:	20001744 	.word	0x20001744
 8008d88:	200012b0 	.word	0x200012b0
 8008d8c:	20001798 	.word	0x20001798

08008d90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d98:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <vTaskInternalSetTimeOutState+0x24>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008da0:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <vTaskInternalSetTimeOutState+0x28>)
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	605a      	str	r2, [r3, #4]
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	2000179c 	.word	0x2000179c
 8008db8:	20001788 	.word	0x20001788

08008dbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10a      	bne.n	8008de2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	613b      	str	r3, [r7, #16]
}
 8008dde:	bf00      	nop
 8008de0:	e7fe      	b.n	8008de0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10a      	bne.n	8008dfe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	60fb      	str	r3, [r7, #12]
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008dfe:	f000 fe79 	bl	8009af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008e02:	4b1d      	ldr	r3, [pc, #116]	; (8008e78 <xTaskCheckForTimeOut+0xbc>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	1ad3      	subs	r3, r2, r3
 8008e10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d102      	bne.n	8008e22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61fb      	str	r3, [r7, #28]
 8008e20:	e023      	b.n	8008e6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <xTaskCheckForTimeOut+0xc0>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d007      	beq.n	8008e3e <xTaskCheckForTimeOut+0x82>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	69ba      	ldr	r2, [r7, #24]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d302      	bcc.n	8008e3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	61fb      	str	r3, [r7, #28]
 8008e3c:	e015      	b.n	8008e6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d20b      	bcs.n	8008e60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	1ad2      	subs	r2, r2, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7ff ff9b 	bl	8008d90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	61fb      	str	r3, [r7, #28]
 8008e5e:	e004      	b.n	8008e6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e66:	2301      	movs	r3, #1
 8008e68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e6a:	f000 fe73 	bl	8009b54 <vPortExitCritical>

	return xReturn;
 8008e6e:	69fb      	ldr	r3, [r7, #28]
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3720      	adds	r7, #32
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	20001788 	.word	0x20001788
 8008e7c:	2000179c 	.word	0x2000179c

08008e80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e80:	b480      	push	{r7}
 8008e82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e84:	4b03      	ldr	r3, [pc, #12]	; (8008e94 <vTaskMissedYield+0x14>)
 8008e86:	2201      	movs	r2, #1
 8008e88:	601a      	str	r2, [r3, #0]
}
 8008e8a:	bf00      	nop
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	20001798 	.word	0x20001798

08008e98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ea0:	f000 f852 	bl	8008f48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <prvIdleTask+0x28>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d9f9      	bls.n	8008ea0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008eac:	4b05      	ldr	r3, [pc, #20]	; (8008ec4 <prvIdleTask+0x2c>)
 8008eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ebc:	e7f0      	b.n	8008ea0 <prvIdleTask+0x8>
 8008ebe:	bf00      	nop
 8008ec0:	200012b4 	.word	0x200012b4
 8008ec4:	e000ed04 	.word	0xe000ed04

08008ec8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ece:	2300      	movs	r3, #0
 8008ed0:	607b      	str	r3, [r7, #4]
 8008ed2:	e00c      	b.n	8008eee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	4a12      	ldr	r2, [pc, #72]	; (8008f28 <prvInitialiseTaskLists+0x60>)
 8008ee0:	4413      	add	r3, r2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe fcf0 	bl	80078c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3301      	adds	r3, #1
 8008eec:	607b      	str	r3, [r7, #4]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b37      	cmp	r3, #55	; 0x37
 8008ef2:	d9ef      	bls.n	8008ed4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ef4:	480d      	ldr	r0, [pc, #52]	; (8008f2c <prvInitialiseTaskLists+0x64>)
 8008ef6:	f7fe fce7 	bl	80078c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008efa:	480d      	ldr	r0, [pc, #52]	; (8008f30 <prvInitialiseTaskLists+0x68>)
 8008efc:	f7fe fce4 	bl	80078c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f00:	480c      	ldr	r0, [pc, #48]	; (8008f34 <prvInitialiseTaskLists+0x6c>)
 8008f02:	f7fe fce1 	bl	80078c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008f06:	480c      	ldr	r0, [pc, #48]	; (8008f38 <prvInitialiseTaskLists+0x70>)
 8008f08:	f7fe fcde 	bl	80078c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f0c:	480b      	ldr	r0, [pc, #44]	; (8008f3c <prvInitialiseTaskLists+0x74>)
 8008f0e:	f7fe fcdb 	bl	80078c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f12:	4b0b      	ldr	r3, [pc, #44]	; (8008f40 <prvInitialiseTaskLists+0x78>)
 8008f14:	4a05      	ldr	r2, [pc, #20]	; (8008f2c <prvInitialiseTaskLists+0x64>)
 8008f16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f18:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <prvInitialiseTaskLists+0x7c>)
 8008f1a:	4a05      	ldr	r2, [pc, #20]	; (8008f30 <prvInitialiseTaskLists+0x68>)
 8008f1c:	601a      	str	r2, [r3, #0]
}
 8008f1e:	bf00      	nop
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	200012b4 	.word	0x200012b4
 8008f2c:	20001714 	.word	0x20001714
 8008f30:	20001728 	.word	0x20001728
 8008f34:	20001744 	.word	0x20001744
 8008f38:	20001758 	.word	0x20001758
 8008f3c:	20001770 	.word	0x20001770
 8008f40:	2000173c 	.word	0x2000173c
 8008f44:	20001740 	.word	0x20001740

08008f48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f4e:	e019      	b.n	8008f84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f50:	f000 fdd0 	bl	8009af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f54:	4b10      	ldr	r3, [pc, #64]	; (8008f98 <prvCheckTasksWaitingTermination+0x50>)
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3304      	adds	r3, #4
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fe fd3b 	bl	80079dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f66:	4b0d      	ldr	r3, [pc, #52]	; (8008f9c <prvCheckTasksWaitingTermination+0x54>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	4a0b      	ldr	r2, [pc, #44]	; (8008f9c <prvCheckTasksWaitingTermination+0x54>)
 8008f6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f70:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <prvCheckTasksWaitingTermination+0x58>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3b01      	subs	r3, #1
 8008f76:	4a0a      	ldr	r2, [pc, #40]	; (8008fa0 <prvCheckTasksWaitingTermination+0x58>)
 8008f78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f7a:	f000 fdeb 	bl	8009b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f810 	bl	8008fa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f84:	4b06      	ldr	r3, [pc, #24]	; (8008fa0 <prvCheckTasksWaitingTermination+0x58>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d1e1      	bne.n	8008f50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f8c:	bf00      	nop
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20001758 	.word	0x20001758
 8008f9c:	20001784 	.word	0x20001784
 8008fa0:	2000176c 	.word	0x2000176c

08008fa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d108      	bne.n	8008fc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 ff88 	bl	8009ed0 <vPortFree>
				vPortFree( pxTCB );
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 ff85 	bl	8009ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fc6:	e018      	b.n	8008ffa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d103      	bne.n	8008fda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 ff7c 	bl	8009ed0 <vPortFree>
	}
 8008fd8:	e00f      	b.n	8008ffa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d00a      	beq.n	8008ffa <prvDeleteTCB+0x56>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	60fb      	str	r3, [r7, #12]
}
 8008ff6:	bf00      	nop
 8008ff8:	e7fe      	b.n	8008ff8 <prvDeleteTCB+0x54>
	}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
	...

08009004 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800900a:	4b0c      	ldr	r3, [pc, #48]	; (800903c <prvResetNextTaskUnblockTime+0x38>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009014:	4b0a      	ldr	r3, [pc, #40]	; (8009040 <prvResetNextTaskUnblockTime+0x3c>)
 8009016:	f04f 32ff 	mov.w	r2, #4294967295
 800901a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800901c:	e008      	b.n	8009030 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800901e:	4b07      	ldr	r3, [pc, #28]	; (800903c <prvResetNextTaskUnblockTime+0x38>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	4a04      	ldr	r2, [pc, #16]	; (8009040 <prvResetNextTaskUnblockTime+0x3c>)
 800902e:	6013      	str	r3, [r2, #0]
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	2000173c 	.word	0x2000173c
 8009040:	200017a4 	.word	0x200017a4

08009044 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800904a:	4b0b      	ldr	r3, [pc, #44]	; (8009078 <xTaskGetSchedulerState+0x34>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d102      	bne.n	8009058 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009052:	2301      	movs	r3, #1
 8009054:	607b      	str	r3, [r7, #4]
 8009056:	e008      	b.n	800906a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009058:	4b08      	ldr	r3, [pc, #32]	; (800907c <xTaskGetSchedulerState+0x38>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d102      	bne.n	8009066 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009060:	2302      	movs	r3, #2
 8009062:	607b      	str	r3, [r7, #4]
 8009064:	e001      	b.n	800906a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009066:	2300      	movs	r3, #0
 8009068:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800906a:	687b      	ldr	r3, [r7, #4]
	}
 800906c:	4618      	mov	r0, r3
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	20001790 	.word	0x20001790
 800907c:	200017ac 	.word	0x200017ac

08009080 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800908c:	2300      	movs	r3, #0
 800908e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d056      	beq.n	8009144 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009096:	4b2e      	ldr	r3, [pc, #184]	; (8009150 <xTaskPriorityDisinherit+0xd0>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	429a      	cmp	r2, r3
 800909e:	d00a      	beq.n	80090b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	60fb      	str	r3, [r7, #12]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10a      	bne.n	80090d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	60bb      	str	r3, [r7, #8]
}
 80090d0:	bf00      	nop
 80090d2:	e7fe      	b.n	80090d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d8:	1e5a      	subs	r2, r3, #1
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d02c      	beq.n	8009144 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d128      	bne.n	8009144 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	3304      	adds	r3, #4
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fe fc70 	bl	80079dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009108:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009114:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <xTaskPriorityDisinherit+0xd4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	429a      	cmp	r2, r3
 800911a:	d903      	bls.n	8009124 <xTaskPriorityDisinherit+0xa4>
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009120:	4a0c      	ldr	r2, [pc, #48]	; (8009154 <xTaskPriorityDisinherit+0xd4>)
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009128:	4613      	mov	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4413      	add	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	4a09      	ldr	r2, [pc, #36]	; (8009158 <xTaskPriorityDisinherit+0xd8>)
 8009132:	441a      	add	r2, r3
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	3304      	adds	r3, #4
 8009138:	4619      	mov	r1, r3
 800913a:	4610      	mov	r0, r2
 800913c:	f7fe fbf1 	bl	8007922 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009140:	2301      	movs	r3, #1
 8009142:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009144:	697b      	ldr	r3, [r7, #20]
	}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	200012b0 	.word	0x200012b0
 8009154:	2000178c 	.word	0x2000178c
 8009158:	200012b4 	.word	0x200012b4

0800915c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009166:	4b21      	ldr	r3, [pc, #132]	; (80091ec <prvAddCurrentTaskToDelayedList+0x90>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800916c:	4b20      	ldr	r3, [pc, #128]	; (80091f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3304      	adds	r3, #4
 8009172:	4618      	mov	r0, r3
 8009174:	f7fe fc32 	bl	80079dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917e:	d10a      	bne.n	8009196 <prvAddCurrentTaskToDelayedList+0x3a>
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d007      	beq.n	8009196 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009186:	4b1a      	ldr	r3, [pc, #104]	; (80091f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	3304      	adds	r3, #4
 800918c:	4619      	mov	r1, r3
 800918e:	4819      	ldr	r0, [pc, #100]	; (80091f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009190:	f7fe fbc7 	bl	8007922 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009194:	e026      	b.n	80091e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4413      	add	r3, r2
 800919c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800919e:	4b14      	ldr	r3, [pc, #80]	; (80091f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68ba      	ldr	r2, [r7, #8]
 80091a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d209      	bcs.n	80091c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091ae:	4b12      	ldr	r3, [pc, #72]	; (80091f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	4b0f      	ldr	r3, [pc, #60]	; (80091f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3304      	adds	r3, #4
 80091b8:	4619      	mov	r1, r3
 80091ba:	4610      	mov	r0, r2
 80091bc:	f7fe fbd5 	bl	800796a <vListInsert>
}
 80091c0:	e010      	b.n	80091e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091c2:	4b0e      	ldr	r3, [pc, #56]	; (80091fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	4b0a      	ldr	r3, [pc, #40]	; (80091f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4619      	mov	r1, r3
 80091ce:	4610      	mov	r0, r2
 80091d0:	f7fe fbcb 	bl	800796a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091d4:	4b0a      	ldr	r3, [pc, #40]	; (8009200 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d202      	bcs.n	80091e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091de:	4a08      	ldr	r2, [pc, #32]	; (8009200 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	6013      	str	r3, [r2, #0]
}
 80091e4:	bf00      	nop
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20001788 	.word	0x20001788
 80091f0:	200012b0 	.word	0x200012b0
 80091f4:	20001770 	.word	0x20001770
 80091f8:	20001740 	.word	0x20001740
 80091fc:	2000173c 	.word	0x2000173c
 8009200:	200017a4 	.word	0x200017a4

08009204 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08a      	sub	sp, #40	; 0x28
 8009208:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800920a:	2300      	movs	r3, #0
 800920c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800920e:	f000 fb07 	bl	8009820 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009212:	4b1c      	ldr	r3, [pc, #112]	; (8009284 <xTimerCreateTimerTask+0x80>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d021      	beq.n	800925e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800921e:	2300      	movs	r3, #0
 8009220:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009222:	1d3a      	adds	r2, r7, #4
 8009224:	f107 0108 	add.w	r1, r7, #8
 8009228:	f107 030c 	add.w	r3, r7, #12
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe fb31 	bl	8007894 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	9202      	str	r2, [sp, #8]
 800923a:	9301      	str	r3, [sp, #4]
 800923c:	2302      	movs	r3, #2
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	2300      	movs	r3, #0
 8009242:	460a      	mov	r2, r1
 8009244:	4910      	ldr	r1, [pc, #64]	; (8009288 <xTimerCreateTimerTask+0x84>)
 8009246:	4811      	ldr	r0, [pc, #68]	; (800928c <xTimerCreateTimerTask+0x88>)
 8009248:	f7ff f8de 	bl	8008408 <xTaskCreateStatic>
 800924c:	4603      	mov	r3, r0
 800924e:	4a10      	ldr	r2, [pc, #64]	; (8009290 <xTimerCreateTimerTask+0x8c>)
 8009250:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009252:	4b0f      	ldr	r3, [pc, #60]	; (8009290 <xTimerCreateTimerTask+0x8c>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800925a:	2301      	movs	r3, #1
 800925c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10a      	bne.n	800927a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	613b      	str	r3, [r7, #16]
}
 8009276:	bf00      	nop
 8009278:	e7fe      	b.n	8009278 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800927a:	697b      	ldr	r3, [r7, #20]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	200017e0 	.word	0x200017e0
 8009288:	0800e540 	.word	0x0800e540
 800928c:	080093c9 	.word	0x080093c9
 8009290:	200017e4 	.word	0x200017e4

08009294 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08a      	sub	sp, #40	; 0x28
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
 80092a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80092a2:	2300      	movs	r3, #0
 80092a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10a      	bne.n	80092c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	623b      	str	r3, [r7, #32]
}
 80092be:	bf00      	nop
 80092c0:	e7fe      	b.n	80092c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092c2:	4b1a      	ldr	r3, [pc, #104]	; (800932c <xTimerGenericCommand+0x98>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d02a      	beq.n	8009320 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b05      	cmp	r3, #5
 80092da:	dc18      	bgt.n	800930e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092dc:	f7ff feb2 	bl	8009044 <xTaskGetSchedulerState>
 80092e0:	4603      	mov	r3, r0
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d109      	bne.n	80092fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092e6:	4b11      	ldr	r3, [pc, #68]	; (800932c <xTimerGenericCommand+0x98>)
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	f107 0110 	add.w	r1, r7, #16
 80092ee:	2300      	movs	r3, #0
 80092f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f2:	f7fe fca1 	bl	8007c38 <xQueueGenericSend>
 80092f6:	6278      	str	r0, [r7, #36]	; 0x24
 80092f8:	e012      	b.n	8009320 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092fa:	4b0c      	ldr	r3, [pc, #48]	; (800932c <xTimerGenericCommand+0x98>)
 80092fc:	6818      	ldr	r0, [r3, #0]
 80092fe:	f107 0110 	add.w	r1, r7, #16
 8009302:	2300      	movs	r3, #0
 8009304:	2200      	movs	r2, #0
 8009306:	f7fe fc97 	bl	8007c38 <xQueueGenericSend>
 800930a:	6278      	str	r0, [r7, #36]	; 0x24
 800930c:	e008      	b.n	8009320 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800930e:	4b07      	ldr	r3, [pc, #28]	; (800932c <xTimerGenericCommand+0x98>)
 8009310:	6818      	ldr	r0, [r3, #0]
 8009312:	f107 0110 	add.w	r1, r7, #16
 8009316:	2300      	movs	r3, #0
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	f7fe fd8b 	bl	8007e34 <xQueueGenericSendFromISR>
 800931e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009322:	4618      	mov	r0, r3
 8009324:	3728      	adds	r7, #40	; 0x28
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	200017e0 	.word	0x200017e0

08009330 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b088      	sub	sp, #32
 8009334:	af02      	add	r7, sp, #8
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800933a:	4b22      	ldr	r3, [pc, #136]	; (80093c4 <prvProcessExpiredTimer+0x94>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	3304      	adds	r3, #4
 8009348:	4618      	mov	r0, r3
 800934a:	f7fe fb47 	bl	80079dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009354:	f003 0304 	and.w	r3, r3, #4
 8009358:	2b00      	cmp	r3, #0
 800935a:	d022      	beq.n	80093a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	699a      	ldr	r2, [r3, #24]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	18d1      	adds	r1, r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	6978      	ldr	r0, [r7, #20]
 800936a:	f000 f8d1 	bl	8009510 <prvInsertTimerInActiveList>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d01f      	beq.n	80093b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009374:	2300      	movs	r3, #0
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	2300      	movs	r3, #0
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	2100      	movs	r1, #0
 800937e:	6978      	ldr	r0, [r7, #20]
 8009380:	f7ff ff88 	bl	8009294 <xTimerGenericCommand>
 8009384:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d113      	bne.n	80093b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800938c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	60fb      	str	r3, [r7, #12]
}
 800939e:	bf00      	nop
 80093a0:	e7fe      	b.n	80093a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093a8:	f023 0301 	bic.w	r3, r3, #1
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	6a1b      	ldr	r3, [r3, #32]
 80093b8:	6978      	ldr	r0, [r7, #20]
 80093ba:	4798      	blx	r3
}
 80093bc:	bf00      	nop
 80093be:	3718      	adds	r7, #24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	200017d8 	.word	0x200017d8

080093c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093d0:	f107 0308 	add.w	r3, r7, #8
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 f857 	bl	8009488 <prvGetNextExpireTime>
 80093da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	4619      	mov	r1, r3
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 f803 	bl	80093ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093e6:	f000 f8d5 	bl	8009594 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093ea:	e7f1      	b.n	80093d0 <prvTimerTask+0x8>

080093ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093f6:	f7ff fa43 	bl	8008880 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093fa:	f107 0308 	add.w	r3, r7, #8
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 f866 	bl	80094d0 <prvSampleTimeNow>
 8009404:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d130      	bne.n	800946e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10a      	bne.n	8009428 <prvProcessTimerOrBlockTask+0x3c>
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	429a      	cmp	r2, r3
 8009418:	d806      	bhi.n	8009428 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800941a:	f7ff fa3f 	bl	800889c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800941e:	68f9      	ldr	r1, [r7, #12]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f7ff ff85 	bl	8009330 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009426:	e024      	b.n	8009472 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d008      	beq.n	8009440 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800942e:	4b13      	ldr	r3, [pc, #76]	; (800947c <prvProcessTimerOrBlockTask+0x90>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <prvProcessTimerOrBlockTask+0x50>
 8009438:	2301      	movs	r3, #1
 800943a:	e000      	b.n	800943e <prvProcessTimerOrBlockTask+0x52>
 800943c:	2300      	movs	r3, #0
 800943e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009440:	4b0f      	ldr	r3, [pc, #60]	; (8009480 <prvProcessTimerOrBlockTask+0x94>)
 8009442:	6818      	ldr	r0, [r3, #0]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	4619      	mov	r1, r3
 800944e:	f7fe ffa7 	bl	80083a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009452:	f7ff fa23 	bl	800889c <xTaskResumeAll>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d10a      	bne.n	8009472 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800945c:	4b09      	ldr	r3, [pc, #36]	; (8009484 <prvProcessTimerOrBlockTask+0x98>)
 800945e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	f3bf 8f6f 	isb	sy
}
 800946c:	e001      	b.n	8009472 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800946e:	f7ff fa15 	bl	800889c <xTaskResumeAll>
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	200017dc 	.word	0x200017dc
 8009480:	200017e0 	.word	0x200017e0
 8009484:	e000ed04 	.word	0xe000ed04

08009488 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009490:	4b0e      	ldr	r3, [pc, #56]	; (80094cc <prvGetNextExpireTime+0x44>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <prvGetNextExpireTime+0x16>
 800949a:	2201      	movs	r2, #1
 800949c:	e000      	b.n	80094a0 <prvGetNextExpireTime+0x18>
 800949e:	2200      	movs	r2, #0
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d105      	bne.n	80094b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094ac:	4b07      	ldr	r3, [pc, #28]	; (80094cc <prvGetNextExpireTime+0x44>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60fb      	str	r3, [r7, #12]
 80094b6:	e001      	b.n	80094bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80094b8:	2300      	movs	r3, #0
 80094ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80094bc:	68fb      	ldr	r3, [r7, #12]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	200017d8 	.word	0x200017d8

080094d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094d8:	f7ff fa7e 	bl	80089d8 <xTaskGetTickCount>
 80094dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094de:	4b0b      	ldr	r3, [pc, #44]	; (800950c <prvSampleTimeNow+0x3c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d205      	bcs.n	80094f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094e8:	f000 f936 	bl	8009758 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	601a      	str	r2, [r3, #0]
 80094f2:	e002      	b.n	80094fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094fa:	4a04      	ldr	r2, [pc, #16]	; (800950c <prvSampleTimeNow+0x3c>)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009500:	68fb      	ldr	r3, [r7, #12]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	200017e8 	.word	0x200017e8

08009510 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800951e:	2300      	movs	r3, #0
 8009520:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	429a      	cmp	r2, r3
 8009534:	d812      	bhi.n	800955c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	1ad2      	subs	r2, r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	429a      	cmp	r2, r3
 8009542:	d302      	bcc.n	800954a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009544:	2301      	movs	r3, #1
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	e01b      	b.n	8009582 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800954a:	4b10      	ldr	r3, [pc, #64]	; (800958c <prvInsertTimerInActiveList+0x7c>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3304      	adds	r3, #4
 8009552:	4619      	mov	r1, r3
 8009554:	4610      	mov	r0, r2
 8009556:	f7fe fa08 	bl	800796a <vListInsert>
 800955a:	e012      	b.n	8009582 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d206      	bcs.n	8009572 <prvInsertTimerInActiveList+0x62>
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	429a      	cmp	r2, r3
 800956a:	d302      	bcc.n	8009572 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800956c:	2301      	movs	r3, #1
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	e007      	b.n	8009582 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009572:	4b07      	ldr	r3, [pc, #28]	; (8009590 <prvInsertTimerInActiveList+0x80>)
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3304      	adds	r3, #4
 800957a:	4619      	mov	r1, r3
 800957c:	4610      	mov	r0, r2
 800957e:	f7fe f9f4 	bl	800796a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009582:	697b      	ldr	r3, [r7, #20]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	200017dc 	.word	0x200017dc
 8009590:	200017d8 	.word	0x200017d8

08009594 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b08e      	sub	sp, #56	; 0x38
 8009598:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800959a:	e0ca      	b.n	8009732 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	da18      	bge.n	80095d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80095a2:	1d3b      	adds	r3, r7, #4
 80095a4:	3304      	adds	r3, #4
 80095a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	61fb      	str	r3, [r7, #28]
}
 80095c0:	bf00      	nop
 80095c2:	e7fe      	b.n	80095c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ca:	6850      	ldr	r0, [r2, #4]
 80095cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ce:	6892      	ldr	r2, [r2, #8]
 80095d0:	4611      	mov	r1, r2
 80095d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f2c0 80aa 	blt.w	8009730 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d004      	beq.n	80095f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	3304      	adds	r3, #4
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fe f9f5 	bl	80079dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095f2:	463b      	mov	r3, r7
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7ff ff6b 	bl	80094d0 <prvSampleTimeNow>
 80095fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b09      	cmp	r3, #9
 8009600:	f200 8097 	bhi.w	8009732 <prvProcessReceivedCommands+0x19e>
 8009604:	a201      	add	r2, pc, #4	; (adr r2, 800960c <prvProcessReceivedCommands+0x78>)
 8009606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800960a:	bf00      	nop
 800960c:	08009635 	.word	0x08009635
 8009610:	08009635 	.word	0x08009635
 8009614:	08009635 	.word	0x08009635
 8009618:	080096a9 	.word	0x080096a9
 800961c:	080096bd 	.word	0x080096bd
 8009620:	08009707 	.word	0x08009707
 8009624:	08009635 	.word	0x08009635
 8009628:	08009635 	.word	0x08009635
 800962c:	080096a9 	.word	0x080096a9
 8009630:	080096bd 	.word	0x080096bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800963a:	f043 0301 	orr.w	r3, r3, #1
 800963e:	b2da      	uxtb	r2, r3
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	18d1      	adds	r1, r2, r3
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009654:	f7ff ff5c 	bl	8009510 <prvInsertTimerInActiveList>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d069      	beq.n	8009732 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009664:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d05e      	beq.n	8009732 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	441a      	add	r2, r3
 800967c:	2300      	movs	r3, #0
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	2300      	movs	r3, #0
 8009682:	2100      	movs	r1, #0
 8009684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009686:	f7ff fe05 	bl	8009294 <xTimerGenericCommand>
 800968a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d14f      	bne.n	8009732 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	61bb      	str	r3, [r7, #24]
}
 80096a4:	bf00      	nop
 80096a6:	e7fe      	b.n	80096a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ae:	f023 0301 	bic.w	r3, r3, #1
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80096ba:	e03a      	b.n	8009732 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80096bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096c2:	f043 0301 	orr.w	r3, r3, #1
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	617b      	str	r3, [r7, #20]
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f4:	699a      	ldr	r2, [r3, #24]
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	18d1      	adds	r1, r2, r3
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009700:	f7ff ff06 	bl	8009510 <prvInsertTimerInActiveList>
					break;
 8009704:	e015      	b.n	8009732 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800970c:	f003 0302 	and.w	r3, r3, #2
 8009710:	2b00      	cmp	r3, #0
 8009712:	d103      	bne.n	800971c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009716:	f000 fbdb 	bl	8009ed0 <vPortFree>
 800971a:	e00a      	b.n	8009732 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009722:	f023 0301 	bic.w	r3, r3, #1
 8009726:	b2da      	uxtb	r2, r3
 8009728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800972e:	e000      	b.n	8009732 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009730:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009732:	4b08      	ldr	r3, [pc, #32]	; (8009754 <prvProcessReceivedCommands+0x1c0>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	1d39      	adds	r1, r7, #4
 8009738:	2200      	movs	r2, #0
 800973a:	4618      	mov	r0, r3
 800973c:	f7fe fc16 	bl	8007f6c <xQueueReceive>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	f47f af2a 	bne.w	800959c <prvProcessReceivedCommands+0x8>
	}
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	3730      	adds	r7, #48	; 0x30
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	200017e0 	.word	0x200017e0

08009758 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b088      	sub	sp, #32
 800975c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800975e:	e048      	b.n	80097f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009760:	4b2d      	ldr	r3, [pc, #180]	; (8009818 <prvSwitchTimerLists+0xc0>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800976a:	4b2b      	ldr	r3, [pc, #172]	; (8009818 <prvSwitchTimerLists+0xc0>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3304      	adds	r3, #4
 8009778:	4618      	mov	r0, r3
 800977a:	f7fe f92f 	bl	80079dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b00      	cmp	r3, #0
 8009792:	d02e      	beq.n	80097f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	4413      	add	r3, r2
 800979c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d90e      	bls.n	80097c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80097b2:	4b19      	ldr	r3, [pc, #100]	; (8009818 <prvSwitchTimerLists+0xc0>)
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3304      	adds	r3, #4
 80097ba:	4619      	mov	r1, r3
 80097bc:	4610      	mov	r0, r2
 80097be:	f7fe f8d4 	bl	800796a <vListInsert>
 80097c2:	e016      	b.n	80097f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097c4:	2300      	movs	r3, #0
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	2300      	movs	r3, #0
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	2100      	movs	r1, #0
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f7ff fd60 	bl	8009294 <xTimerGenericCommand>
 80097d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	603b      	str	r3, [r7, #0]
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097f2:	4b09      	ldr	r3, [pc, #36]	; (8009818 <prvSwitchTimerLists+0xc0>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1b1      	bne.n	8009760 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097fc:	4b06      	ldr	r3, [pc, #24]	; (8009818 <prvSwitchTimerLists+0xc0>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009802:	4b06      	ldr	r3, [pc, #24]	; (800981c <prvSwitchTimerLists+0xc4>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a04      	ldr	r2, [pc, #16]	; (8009818 <prvSwitchTimerLists+0xc0>)
 8009808:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800980a:	4a04      	ldr	r2, [pc, #16]	; (800981c <prvSwitchTimerLists+0xc4>)
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	6013      	str	r3, [r2, #0]
}
 8009810:	bf00      	nop
 8009812:	3718      	adds	r7, #24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	200017d8 	.word	0x200017d8
 800981c:	200017dc 	.word	0x200017dc

08009820 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009826:	f000 f965 	bl	8009af4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800982a:	4b15      	ldr	r3, [pc, #84]	; (8009880 <prvCheckForValidListAndQueue+0x60>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d120      	bne.n	8009874 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009832:	4814      	ldr	r0, [pc, #80]	; (8009884 <prvCheckForValidListAndQueue+0x64>)
 8009834:	f7fe f848 	bl	80078c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009838:	4813      	ldr	r0, [pc, #76]	; (8009888 <prvCheckForValidListAndQueue+0x68>)
 800983a:	f7fe f845 	bl	80078c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800983e:	4b13      	ldr	r3, [pc, #76]	; (800988c <prvCheckForValidListAndQueue+0x6c>)
 8009840:	4a10      	ldr	r2, [pc, #64]	; (8009884 <prvCheckForValidListAndQueue+0x64>)
 8009842:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009844:	4b12      	ldr	r3, [pc, #72]	; (8009890 <prvCheckForValidListAndQueue+0x70>)
 8009846:	4a10      	ldr	r2, [pc, #64]	; (8009888 <prvCheckForValidListAndQueue+0x68>)
 8009848:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800984a:	2300      	movs	r3, #0
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	4b11      	ldr	r3, [pc, #68]	; (8009894 <prvCheckForValidListAndQueue+0x74>)
 8009850:	4a11      	ldr	r2, [pc, #68]	; (8009898 <prvCheckForValidListAndQueue+0x78>)
 8009852:	2110      	movs	r1, #16
 8009854:	200a      	movs	r0, #10
 8009856:	f7fe f953 	bl	8007b00 <xQueueGenericCreateStatic>
 800985a:	4603      	mov	r3, r0
 800985c:	4a08      	ldr	r2, [pc, #32]	; (8009880 <prvCheckForValidListAndQueue+0x60>)
 800985e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009860:	4b07      	ldr	r3, [pc, #28]	; (8009880 <prvCheckForValidListAndQueue+0x60>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d005      	beq.n	8009874 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009868:	4b05      	ldr	r3, [pc, #20]	; (8009880 <prvCheckForValidListAndQueue+0x60>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	490b      	ldr	r1, [pc, #44]	; (800989c <prvCheckForValidListAndQueue+0x7c>)
 800986e:	4618      	mov	r0, r3
 8009870:	f7fe fd6c 	bl	800834c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009874:	f000 f96e 	bl	8009b54 <vPortExitCritical>
}
 8009878:	bf00      	nop
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	200017e0 	.word	0x200017e0
 8009884:	200017b0 	.word	0x200017b0
 8009888:	200017c4 	.word	0x200017c4
 800988c:	200017d8 	.word	0x200017d8
 8009890:	200017dc 	.word	0x200017dc
 8009894:	2000188c 	.word	0x2000188c
 8009898:	200017ec 	.word	0x200017ec
 800989c:	0800e548 	.word	0x0800e548

080098a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	3b04      	subs	r3, #4
 80098b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3b04      	subs	r3, #4
 80098be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f023 0201 	bic.w	r2, r3, #1
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3b04      	subs	r3, #4
 80098ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098d0:	4a0c      	ldr	r2, [pc, #48]	; (8009904 <pxPortInitialiseStack+0x64>)
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3b14      	subs	r3, #20
 80098da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3b04      	subs	r3, #4
 80098e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f06f 0202 	mvn.w	r2, #2
 80098ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	3b20      	subs	r3, #32
 80098f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098f6:	68fb      	ldr	r3, [r7, #12]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	08009909 	.word	0x08009909

08009908 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009912:	4b12      	ldr	r3, [pc, #72]	; (800995c <prvTaskExitError+0x54>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991a:	d00a      	beq.n	8009932 <prvTaskExitError+0x2a>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	60fb      	str	r3, [r7, #12]
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <prvTaskExitError+0x28>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	60bb      	str	r3, [r7, #8]
}
 8009944:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009946:	bf00      	nop
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0fc      	beq.n	8009948 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800994e:	bf00      	nop
 8009950:	bf00      	nop
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	20000018 	.word	0x20000018

08009960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <pxCurrentTCBConst2>)
 8009962:	6819      	ldr	r1, [r3, #0]
 8009964:	6808      	ldr	r0, [r1, #0]
 8009966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996a:	f380 8809 	msr	PSP, r0
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f04f 0000 	mov.w	r0, #0
 8009976:	f380 8811 	msr	BASEPRI, r0
 800997a:	4770      	bx	lr
 800997c:	f3af 8000 	nop.w

08009980 <pxCurrentTCBConst2>:
 8009980:	200012b0 	.word	0x200012b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009984:	bf00      	nop
 8009986:	bf00      	nop

08009988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009988:	4808      	ldr	r0, [pc, #32]	; (80099ac <prvPortStartFirstTask+0x24>)
 800998a:	6800      	ldr	r0, [r0, #0]
 800998c:	6800      	ldr	r0, [r0, #0]
 800998e:	f380 8808 	msr	MSP, r0
 8009992:	f04f 0000 	mov.w	r0, #0
 8009996:	f380 8814 	msr	CONTROL, r0
 800999a:	b662      	cpsie	i
 800999c:	b661      	cpsie	f
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	df00      	svc	0
 80099a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099aa:	bf00      	nop
 80099ac:	e000ed08 	.word	0xe000ed08

080099b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099b6:	4b46      	ldr	r3, [pc, #280]	; (8009ad0 <xPortStartScheduler+0x120>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a46      	ldr	r2, [pc, #280]	; (8009ad4 <xPortStartScheduler+0x124>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d10a      	bne.n	80099d6 <xPortStartScheduler+0x26>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	613b      	str	r3, [r7, #16]
}
 80099d2:	bf00      	nop
 80099d4:	e7fe      	b.n	80099d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80099d6:	4b3e      	ldr	r3, [pc, #248]	; (8009ad0 <xPortStartScheduler+0x120>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a3f      	ldr	r2, [pc, #252]	; (8009ad8 <xPortStartScheduler+0x128>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d10a      	bne.n	80099f6 <xPortStartScheduler+0x46>
	__asm volatile
 80099e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e4:	f383 8811 	msr	BASEPRI, r3
 80099e8:	f3bf 8f6f 	isb	sy
 80099ec:	f3bf 8f4f 	dsb	sy
 80099f0:	60fb      	str	r3, [r7, #12]
}
 80099f2:	bf00      	nop
 80099f4:	e7fe      	b.n	80099f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099f6:	4b39      	ldr	r3, [pc, #228]	; (8009adc <xPortStartScheduler+0x12c>)
 80099f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	22ff      	movs	r2, #255	; 0xff
 8009a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	4b31      	ldr	r3, [pc, #196]	; (8009ae0 <xPortStartScheduler+0x130>)
 8009a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a1e:	4b31      	ldr	r3, [pc, #196]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a20:	2207      	movs	r2, #7
 8009a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a24:	e009      	b.n	8009a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009a26:	4b2f      	ldr	r3, [pc, #188]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	4a2d      	ldr	r2, [pc, #180]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a3a:	78fb      	ldrb	r3, [r7, #3]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d0ef      	beq.n	8009a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a46:	4b27      	ldr	r3, [pc, #156]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f1c3 0307 	rsb	r3, r3, #7
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d00a      	beq.n	8009a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	60bb      	str	r3, [r7, #8]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a68:	4b1e      	ldr	r3, [pc, #120]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	021b      	lsls	r3, r3, #8
 8009a6e:	4a1d      	ldr	r2, [pc, #116]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a72:	4b1c      	ldr	r3, [pc, #112]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ae4 <xPortStartScheduler+0x134>)
 8009a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	b2da      	uxtb	r2, r3
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a86:	4b18      	ldr	r3, [pc, #96]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a17      	ldr	r2, [pc, #92]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a92:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a14      	ldr	r2, [pc, #80]	; (8009ae8 <xPortStartScheduler+0x138>)
 8009a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a9e:	f000 f8dd 	bl	8009c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <xPortStartScheduler+0x13c>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009aa8:	f000 f8fc 	bl	8009ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009aac:	4b10      	ldr	r3, [pc, #64]	; (8009af0 <xPortStartScheduler+0x140>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a0f      	ldr	r2, [pc, #60]	; (8009af0 <xPortStartScheduler+0x140>)
 8009ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ab8:	f7ff ff66 	bl	8009988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009abc:	f7ff f856 	bl	8008b6c <vTaskSwitchContext>
	prvTaskExitError();
 8009ac0:	f7ff ff22 	bl	8009908 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	e000ed00 	.word	0xe000ed00
 8009ad4:	410fc271 	.word	0x410fc271
 8009ad8:	410fc270 	.word	0x410fc270
 8009adc:	e000e400 	.word	0xe000e400
 8009ae0:	200018dc 	.word	0x200018dc
 8009ae4:	200018e0 	.word	0x200018e0
 8009ae8:	e000ed20 	.word	0xe000ed20
 8009aec:	20000018 	.word	0x20000018
 8009af0:	e000ef34 	.word	0xe000ef34

08009af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	607b      	str	r3, [r7, #4]
}
 8009b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	3301      	adds	r3, #1
 8009b14:	4a0d      	ldr	r2, [pc, #52]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b18:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <vPortEnterCritical+0x58>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d10f      	bne.n	8009b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b20:	4b0b      	ldr	r3, [pc, #44]	; (8009b50 <vPortEnterCritical+0x5c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	b2db      	uxtb	r3, r3
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	603b      	str	r3, [r7, #0]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <vPortEnterCritical+0x4a>
	}
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	20000018 	.word	0x20000018
 8009b50:	e000ed04 	.word	0xe000ed04

08009b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b5a:	4b12      	ldr	r3, [pc, #72]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d10a      	bne.n	8009b78 <vPortExitCritical+0x24>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	607b      	str	r3, [r7, #4]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b78:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	4a09      	ldr	r2, [pc, #36]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b82:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <vPortExitCritical+0x50>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d105      	bne.n	8009b96 <vPortExitCritical+0x42>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	f383 8811 	msr	BASEPRI, r3
}
 8009b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b96:	bf00      	nop
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	20000018 	.word	0x20000018
	...

08009bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bb0:	f3ef 8009 	mrs	r0, PSP
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	4b15      	ldr	r3, [pc, #84]	; (8009c10 <pxCurrentTCBConst>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	f01e 0f10 	tst.w	lr, #16
 8009bc0:	bf08      	it	eq
 8009bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bca:	6010      	str	r0, [r2, #0]
 8009bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bd4:	f380 8811 	msr	BASEPRI, r0
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f7fe ffc4 	bl	8008b6c <vTaskSwitchContext>
 8009be4:	f04f 0000 	mov.w	r0, #0
 8009be8:	f380 8811 	msr	BASEPRI, r0
 8009bec:	bc09      	pop	{r0, r3}
 8009bee:	6819      	ldr	r1, [r3, #0]
 8009bf0:	6808      	ldr	r0, [r1, #0]
 8009bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf6:	f01e 0f10 	tst.w	lr, #16
 8009bfa:	bf08      	it	eq
 8009bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c00:	f380 8809 	msr	PSP, r0
 8009c04:	f3bf 8f6f 	isb	sy
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	f3af 8000 	nop.w

08009c10 <pxCurrentTCBConst>:
 8009c10:	200012b0 	.word	0x200012b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop

08009c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	607b      	str	r3, [r7, #4]
}
 8009c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c32:	f7fe fee1 	bl	80089f8 <xTaskIncrementTick>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d003      	beq.n	8009c44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c3c:	4b06      	ldr	r3, [pc, #24]	; (8009c58 <xPortSysTickHandler+0x40>)
 8009c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	2300      	movs	r3, #0
 8009c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	f383 8811 	msr	BASEPRI, r3
}
 8009c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c50:	bf00      	nop
 8009c52:	3708      	adds	r7, #8
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	e000ed04 	.word	0xe000ed04

08009c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c66:	4b0b      	ldr	r3, [pc, #44]	; (8009c94 <vPortSetupTimerInterrupt+0x38>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <vPortSetupTimerInterrupt+0x3c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a0a      	ldr	r2, [pc, #40]	; (8009c9c <vPortSetupTimerInterrupt+0x40>)
 8009c72:	fba2 2303 	umull	r2, r3, r2, r3
 8009c76:	099b      	lsrs	r3, r3, #6
 8009c78:	4a09      	ldr	r2, [pc, #36]	; (8009ca0 <vPortSetupTimerInterrupt+0x44>)
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c7e:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <vPortSetupTimerInterrupt+0x34>)
 8009c80:	2207      	movs	r2, #7
 8009c82:	601a      	str	r2, [r3, #0]
}
 8009c84:	bf00      	nop
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	e000e010 	.word	0xe000e010
 8009c94:	e000e018 	.word	0xe000e018
 8009c98:	2000000c 	.word	0x2000000c
 8009c9c:	10624dd3 	.word	0x10624dd3
 8009ca0:	e000e014 	.word	0xe000e014

08009ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cb4 <vPortEnableVFP+0x10>
 8009ca8:	6801      	ldr	r1, [r0, #0]
 8009caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cae:	6001      	str	r1, [r0, #0]
 8009cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cb2:	bf00      	nop
 8009cb4:	e000ed88 	.word	0xe000ed88

08009cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cbe:	f3ef 8305 	mrs	r3, IPSR
 8009cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b0f      	cmp	r3, #15
 8009cc8:	d914      	bls.n	8009cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009cca:	4a17      	ldr	r2, [pc, #92]	; (8009d28 <vPortValidateInterruptPriority+0x70>)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	4413      	add	r3, r2
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cd4:	4b15      	ldr	r3, [pc, #84]	; (8009d2c <vPortValidateInterruptPriority+0x74>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	7afa      	ldrb	r2, [r7, #11]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d20a      	bcs.n	8009cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	607b      	str	r3, [r7, #4]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cf4:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <vPortValidateInterruptPriority+0x78>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009cfc:	4b0d      	ldr	r3, [pc, #52]	; (8009d34 <vPortValidateInterruptPriority+0x7c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d90a      	bls.n	8009d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	603b      	str	r3, [r7, #0]
}
 8009d16:	bf00      	nop
 8009d18:	e7fe      	b.n	8009d18 <vPortValidateInterruptPriority+0x60>
	}
 8009d1a:	bf00      	nop
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	e000e3f0 	.word	0xe000e3f0
 8009d2c:	200018dc 	.word	0x200018dc
 8009d30:	e000ed0c 	.word	0xe000ed0c
 8009d34:	200018e0 	.word	0x200018e0

08009d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b08a      	sub	sp, #40	; 0x28
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d40:	2300      	movs	r3, #0
 8009d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d44:	f7fe fd9c 	bl	8008880 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d48:	4b5b      	ldr	r3, [pc, #364]	; (8009eb8 <pvPortMalloc+0x180>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d50:	f000 f920 	bl	8009f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d54:	4b59      	ldr	r3, [pc, #356]	; (8009ebc <pvPortMalloc+0x184>)
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f040 8093 	bne.w	8009e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01d      	beq.n	8009da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009d68:	2208      	movs	r2, #8
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d014      	beq.n	8009da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f023 0307 	bic.w	r3, r3, #7
 8009d80:	3308      	adds	r3, #8
 8009d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <pvPortMalloc+0x6c>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	617b      	str	r3, [r7, #20]
}
 8009da0:	bf00      	nop
 8009da2:	e7fe      	b.n	8009da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d06e      	beq.n	8009e88 <pvPortMalloc+0x150>
 8009daa:	4b45      	ldr	r3, [pc, #276]	; (8009ec0 <pvPortMalloc+0x188>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d869      	bhi.n	8009e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009db4:	4b43      	ldr	r3, [pc, #268]	; (8009ec4 <pvPortMalloc+0x18c>)
 8009db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009db8:	4b42      	ldr	r3, [pc, #264]	; (8009ec4 <pvPortMalloc+0x18c>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dbe:	e004      	b.n	8009dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d903      	bls.n	8009ddc <pvPortMalloc+0xa4>
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d1f1      	bne.n	8009dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ddc:	4b36      	ldr	r3, [pc, #216]	; (8009eb8 <pvPortMalloc+0x180>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d050      	beq.n	8009e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2208      	movs	r2, #8
 8009dec:	4413      	add	r3, r2
 8009dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	685a      	ldr	r2, [r3, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	1ad2      	subs	r2, r2, r3
 8009e00:	2308      	movs	r3, #8
 8009e02:	005b      	lsls	r3, r3, #1
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d91f      	bls.n	8009e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <pvPortMalloc+0xf8>
	__asm volatile
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	613b      	str	r3, [r7, #16]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	685a      	ldr	r2, [r3, #4]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	1ad2      	subs	r2, r2, r3
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e42:	69b8      	ldr	r0, [r7, #24]
 8009e44:	f000 f908 	bl	800a058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e48:	4b1d      	ldr	r3, [pc, #116]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	4a1b      	ldr	r2, [pc, #108]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e56:	4b1a      	ldr	r3, [pc, #104]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	4b1b      	ldr	r3, [pc, #108]	; (8009ec8 <pvPortMalloc+0x190>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d203      	bcs.n	8009e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e62:	4b17      	ldr	r3, [pc, #92]	; (8009ec0 <pvPortMalloc+0x188>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a18      	ldr	r2, [pc, #96]	; (8009ec8 <pvPortMalloc+0x190>)
 8009e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	4b13      	ldr	r3, [pc, #76]	; (8009ebc <pvPortMalloc+0x184>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	431a      	orrs	r2, r3
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e7e:	4b13      	ldr	r3, [pc, #76]	; (8009ecc <pvPortMalloc+0x194>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3301      	adds	r3, #1
 8009e84:	4a11      	ldr	r2, [pc, #68]	; (8009ecc <pvPortMalloc+0x194>)
 8009e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e88:	f7fe fd08 	bl	800889c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	f003 0307 	and.w	r3, r3, #7
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <pvPortMalloc+0x174>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	60fb      	str	r3, [r7, #12]
}
 8009ea8:	bf00      	nop
 8009eaa:	e7fe      	b.n	8009eaa <pvPortMalloc+0x172>
	return pvReturn;
 8009eac:	69fb      	ldr	r3, [r7, #28]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3728      	adds	r7, #40	; 0x28
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	200054ec 	.word	0x200054ec
 8009ebc:	20005500 	.word	0x20005500
 8009ec0:	200054f0 	.word	0x200054f0
 8009ec4:	200054e4 	.word	0x200054e4
 8009ec8:	200054f4 	.word	0x200054f4
 8009ecc:	200054f8 	.word	0x200054f8

08009ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d04d      	beq.n	8009f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ee2:	2308      	movs	r3, #8
 8009ee4:	425b      	negs	r3, r3
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	4413      	add	r3, r2
 8009eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <vPortFree+0xb8>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4013      	ands	r3, r2
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d10a      	bne.n	8009f14 <vPortFree+0x44>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	60fb      	str	r3, [r7, #12]
}
 8009f10:	bf00      	nop
 8009f12:	e7fe      	b.n	8009f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00a      	beq.n	8009f32 <vPortFree+0x62>
	__asm volatile
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	60bb      	str	r3, [r7, #8]
}
 8009f2e:	bf00      	nop
 8009f30:	e7fe      	b.n	8009f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	4b14      	ldr	r3, [pc, #80]	; (8009f88 <vPortFree+0xb8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d01e      	beq.n	8009f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d11a      	bne.n	8009f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	4b0e      	ldr	r3, [pc, #56]	; (8009f88 <vPortFree+0xb8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	43db      	mvns	r3, r3
 8009f52:	401a      	ands	r2, r3
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f58:	f7fe fc92 	bl	8008880 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	4b0a      	ldr	r3, [pc, #40]	; (8009f8c <vPortFree+0xbc>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4413      	add	r3, r2
 8009f66:	4a09      	ldr	r2, [pc, #36]	; (8009f8c <vPortFree+0xbc>)
 8009f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f6a:	6938      	ldr	r0, [r7, #16]
 8009f6c:	f000 f874 	bl	800a058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f70:	4b07      	ldr	r3, [pc, #28]	; (8009f90 <vPortFree+0xc0>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	3301      	adds	r3, #1
 8009f76:	4a06      	ldr	r2, [pc, #24]	; (8009f90 <vPortFree+0xc0>)
 8009f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f7a:	f7fe fc8f 	bl	800889c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f7e:	bf00      	nop
 8009f80:	3718      	adds	r7, #24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	20005500 	.word	0x20005500
 8009f8c:	200054f0 	.word	0x200054f0
 8009f90:	200054fc 	.word	0x200054fc

08009f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fa0:	4b27      	ldr	r3, [pc, #156]	; (800a040 <prvHeapInit+0xac>)
 8009fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00c      	beq.n	8009fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3307      	adds	r3, #7
 8009fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 0307 	bic.w	r3, r3, #7
 8009fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	4a1f      	ldr	r2, [pc, #124]	; (800a040 <prvHeapInit+0xac>)
 8009fc4:	4413      	add	r3, r2
 8009fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fcc:	4a1d      	ldr	r2, [pc, #116]	; (800a044 <prvHeapInit+0xb0>)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fd2:	4b1c      	ldr	r3, [pc, #112]	; (800a044 <prvHeapInit+0xb0>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	4413      	add	r3, r2
 8009fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fe0:	2208      	movs	r2, #8
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f023 0307 	bic.w	r3, r3, #7
 8009fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4a15      	ldr	r2, [pc, #84]	; (800a048 <prvHeapInit+0xb4>)
 8009ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ff6:	4b14      	ldr	r3, [pc, #80]	; (800a048 <prvHeapInit+0xb4>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ffe:	4b12      	ldr	r3, [pc, #72]	; (800a048 <prvHeapInit+0xb4>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	1ad2      	subs	r2, r2, r3
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a014:	4b0c      	ldr	r3, [pc, #48]	; (800a048 <prvHeapInit+0xb4>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <prvHeapInit+0xb8>)
 800a022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	4a09      	ldr	r2, [pc, #36]	; (800a050 <prvHeapInit+0xbc>)
 800a02a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a02c:	4b09      	ldr	r3, [pc, #36]	; (800a054 <prvHeapInit+0xc0>)
 800a02e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a032:	601a      	str	r2, [r3, #0]
}
 800a034:	bf00      	nop
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	200018e4 	.word	0x200018e4
 800a044:	200054e4 	.word	0x200054e4
 800a048:	200054ec 	.word	0x200054ec
 800a04c:	200054f4 	.word	0x200054f4
 800a050:	200054f0 	.word	0x200054f0
 800a054:	20005500 	.word	0x20005500

0800a058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a060:	4b28      	ldr	r3, [pc, #160]	; (800a104 <prvInsertBlockIntoFreeList+0xac>)
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	e002      	b.n	800a06c <prvInsertBlockIntoFreeList+0x14>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	60fb      	str	r3, [r7, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	429a      	cmp	r2, r3
 800a074:	d8f7      	bhi.n	800a066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	4413      	add	r3, r2
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	429a      	cmp	r2, r3
 800a086:	d108      	bne.n	800a09a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	441a      	add	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	441a      	add	r2, r3
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d118      	bne.n	800a0e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	4b15      	ldr	r3, [pc, #84]	; (800a108 <prvInsertBlockIntoFreeList+0xb0>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d00d      	beq.n	800a0d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685a      	ldr	r2, [r3, #4]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	441a      	add	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	601a      	str	r2, [r3, #0]
 800a0d4:	e008      	b.n	800a0e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0d6:	4b0c      	ldr	r3, [pc, #48]	; (800a108 <prvInsertBlockIntoFreeList+0xb0>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e003      	b.n	800a0e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d002      	beq.n	800a0f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0f6:	bf00      	nop
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	200054e4 	.word	0x200054e4
 800a108:	200054ec 	.word	0x200054ec

0800a10c <atoi>:
 800a10c:	220a      	movs	r2, #10
 800a10e:	2100      	movs	r1, #0
 800a110:	f000 bdc4 	b.w	800ac9c <strtol>

0800a114 <gcvt>:
 800a114:	b530      	push	{r4, r5, lr}
 800a116:	2200      	movs	r2, #0
 800a118:	b085      	sub	sp, #20
 800a11a:	460c      	mov	r4, r1
 800a11c:	4605      	mov	r5, r0
 800a11e:	2300      	movs	r3, #0
 800a120:	ec51 0b10 	vmov	r0, r1, d0
 800a124:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a128:	f7f6 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800a12c:	ed9d 0b02 	vldr	d0, [sp, #8]
 800a130:	4622      	mov	r2, r4
 800a132:	b118      	cbz	r0, 800a13c <gcvt+0x28>
 800a134:	232d      	movs	r3, #45	; 0x2d
 800a136:	f802 3b01 	strb.w	r3, [r2], #1
 800a13a:	3d01      	subs	r5, #1
 800a13c:	2300      	movs	r3, #0
 800a13e:	4806      	ldr	r0, [pc, #24]	; (800a158 <gcvt+0x44>)
 800a140:	9300      	str	r3, [sp, #0]
 800a142:	4629      	mov	r1, r5
 800a144:	2367      	movs	r3, #103	; 0x67
 800a146:	6800      	ldr	r0, [r0, #0]
 800a148:	f001 fca6 	bl	800ba98 <_gcvt>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	bf14      	ite	ne
 800a150:	4620      	movne	r0, r4
 800a152:	2000      	moveq	r0, #0
 800a154:	b005      	add	sp, #20
 800a156:	bd30      	pop	{r4, r5, pc}
 800a158:	2000001c 	.word	0x2000001c

0800a15c <__errno>:
 800a15c:	4b01      	ldr	r3, [pc, #4]	; (800a164 <__errno+0x8>)
 800a15e:	6818      	ldr	r0, [r3, #0]
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	2000001c 	.word	0x2000001c

0800a168 <__libc_init_array>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	4d0d      	ldr	r5, [pc, #52]	; (800a1a0 <__libc_init_array+0x38>)
 800a16c:	4c0d      	ldr	r4, [pc, #52]	; (800a1a4 <__libc_init_array+0x3c>)
 800a16e:	1b64      	subs	r4, r4, r5
 800a170:	10a4      	asrs	r4, r4, #2
 800a172:	2600      	movs	r6, #0
 800a174:	42a6      	cmp	r6, r4
 800a176:	d109      	bne.n	800a18c <__libc_init_array+0x24>
 800a178:	4d0b      	ldr	r5, [pc, #44]	; (800a1a8 <__libc_init_array+0x40>)
 800a17a:	4c0c      	ldr	r4, [pc, #48]	; (800a1ac <__libc_init_array+0x44>)
 800a17c:	f004 f8de 	bl	800e33c <_init>
 800a180:	1b64      	subs	r4, r4, r5
 800a182:	10a4      	asrs	r4, r4, #2
 800a184:	2600      	movs	r6, #0
 800a186:	42a6      	cmp	r6, r4
 800a188:	d105      	bne.n	800a196 <__libc_init_array+0x2e>
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a190:	4798      	blx	r3
 800a192:	3601      	adds	r6, #1
 800a194:	e7ee      	b.n	800a174 <__libc_init_array+0xc>
 800a196:	f855 3b04 	ldr.w	r3, [r5], #4
 800a19a:	4798      	blx	r3
 800a19c:	3601      	adds	r6, #1
 800a19e:	e7f2      	b.n	800a186 <__libc_init_array+0x1e>
 800a1a0:	0800ea68 	.word	0x0800ea68
 800a1a4:	0800ea68 	.word	0x0800ea68
 800a1a8:	0800ea68 	.word	0x0800ea68
 800a1ac:	0800ea6c 	.word	0x0800ea6c

0800a1b0 <memcpy>:
 800a1b0:	440a      	add	r2, r1
 800a1b2:	4291      	cmp	r1, r2
 800a1b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1b8:	d100      	bne.n	800a1bc <memcpy+0xc>
 800a1ba:	4770      	bx	lr
 800a1bc:	b510      	push	{r4, lr}
 800a1be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1c6:	4291      	cmp	r1, r2
 800a1c8:	d1f9      	bne.n	800a1be <memcpy+0xe>
 800a1ca:	bd10      	pop	{r4, pc}

0800a1cc <memset>:
 800a1cc:	4402      	add	r2, r0
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d100      	bne.n	800a1d6 <memset+0xa>
 800a1d4:	4770      	bx	lr
 800a1d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1da:	e7f9      	b.n	800a1d0 <memset+0x4>

0800a1dc <__cvt>:
 800a1dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e0:	ec55 4b10 	vmov	r4, r5, d0
 800a1e4:	2d00      	cmp	r5, #0
 800a1e6:	460e      	mov	r6, r1
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	462b      	mov	r3, r5
 800a1ec:	bfbb      	ittet	lt
 800a1ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1f2:	461d      	movlt	r5, r3
 800a1f4:	2300      	movge	r3, #0
 800a1f6:	232d      	movlt	r3, #45	; 0x2d
 800a1f8:	700b      	strb	r3, [r1, #0]
 800a1fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a200:	4691      	mov	r9, r2
 800a202:	f023 0820 	bic.w	r8, r3, #32
 800a206:	bfbc      	itt	lt
 800a208:	4622      	movlt	r2, r4
 800a20a:	4614      	movlt	r4, r2
 800a20c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a210:	d005      	beq.n	800a21e <__cvt+0x42>
 800a212:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a216:	d100      	bne.n	800a21a <__cvt+0x3e>
 800a218:	3601      	adds	r6, #1
 800a21a:	2102      	movs	r1, #2
 800a21c:	e000      	b.n	800a220 <__cvt+0x44>
 800a21e:	2103      	movs	r1, #3
 800a220:	ab03      	add	r3, sp, #12
 800a222:	9301      	str	r3, [sp, #4]
 800a224:	ab02      	add	r3, sp, #8
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	ec45 4b10 	vmov	d0, r4, r5
 800a22c:	4653      	mov	r3, sl
 800a22e:	4632      	mov	r2, r6
 800a230:	f000 fdca 	bl	800adc8 <_dtoa_r>
 800a234:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a238:	4607      	mov	r7, r0
 800a23a:	d102      	bne.n	800a242 <__cvt+0x66>
 800a23c:	f019 0f01 	tst.w	r9, #1
 800a240:	d022      	beq.n	800a288 <__cvt+0xac>
 800a242:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a246:	eb07 0906 	add.w	r9, r7, r6
 800a24a:	d110      	bne.n	800a26e <__cvt+0x92>
 800a24c:	783b      	ldrb	r3, [r7, #0]
 800a24e:	2b30      	cmp	r3, #48	; 0x30
 800a250:	d10a      	bne.n	800a268 <__cvt+0x8c>
 800a252:	2200      	movs	r2, #0
 800a254:	2300      	movs	r3, #0
 800a256:	4620      	mov	r0, r4
 800a258:	4629      	mov	r1, r5
 800a25a:	f7f6 fc35 	bl	8000ac8 <__aeabi_dcmpeq>
 800a25e:	b918      	cbnz	r0, 800a268 <__cvt+0x8c>
 800a260:	f1c6 0601 	rsb	r6, r6, #1
 800a264:	f8ca 6000 	str.w	r6, [sl]
 800a268:	f8da 3000 	ldr.w	r3, [sl]
 800a26c:	4499      	add	r9, r3
 800a26e:	2200      	movs	r2, #0
 800a270:	2300      	movs	r3, #0
 800a272:	4620      	mov	r0, r4
 800a274:	4629      	mov	r1, r5
 800a276:	f7f6 fc27 	bl	8000ac8 <__aeabi_dcmpeq>
 800a27a:	b108      	cbz	r0, 800a280 <__cvt+0xa4>
 800a27c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a280:	2230      	movs	r2, #48	; 0x30
 800a282:	9b03      	ldr	r3, [sp, #12]
 800a284:	454b      	cmp	r3, r9
 800a286:	d307      	bcc.n	800a298 <__cvt+0xbc>
 800a288:	9b03      	ldr	r3, [sp, #12]
 800a28a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a28c:	1bdb      	subs	r3, r3, r7
 800a28e:	4638      	mov	r0, r7
 800a290:	6013      	str	r3, [r2, #0]
 800a292:	b004      	add	sp, #16
 800a294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a298:	1c59      	adds	r1, r3, #1
 800a29a:	9103      	str	r1, [sp, #12]
 800a29c:	701a      	strb	r2, [r3, #0]
 800a29e:	e7f0      	b.n	800a282 <__cvt+0xa6>

0800a2a0 <__exponent>:
 800a2a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2900      	cmp	r1, #0
 800a2a6:	bfb8      	it	lt
 800a2a8:	4249      	neglt	r1, r1
 800a2aa:	f803 2b02 	strb.w	r2, [r3], #2
 800a2ae:	bfb4      	ite	lt
 800a2b0:	222d      	movlt	r2, #45	; 0x2d
 800a2b2:	222b      	movge	r2, #43	; 0x2b
 800a2b4:	2909      	cmp	r1, #9
 800a2b6:	7042      	strb	r2, [r0, #1]
 800a2b8:	dd2a      	ble.n	800a310 <__exponent+0x70>
 800a2ba:	f10d 0407 	add.w	r4, sp, #7
 800a2be:	46a4      	mov	ip, r4
 800a2c0:	270a      	movs	r7, #10
 800a2c2:	46a6      	mov	lr, r4
 800a2c4:	460a      	mov	r2, r1
 800a2c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a2ca:	fb07 1516 	mls	r5, r7, r6, r1
 800a2ce:	3530      	adds	r5, #48	; 0x30
 800a2d0:	2a63      	cmp	r2, #99	; 0x63
 800a2d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a2d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a2da:	4631      	mov	r1, r6
 800a2dc:	dcf1      	bgt.n	800a2c2 <__exponent+0x22>
 800a2de:	3130      	adds	r1, #48	; 0x30
 800a2e0:	f1ae 0502 	sub.w	r5, lr, #2
 800a2e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a2e8:	1c44      	adds	r4, r0, #1
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	4561      	cmp	r1, ip
 800a2ee:	d30a      	bcc.n	800a306 <__exponent+0x66>
 800a2f0:	f10d 0209 	add.w	r2, sp, #9
 800a2f4:	eba2 020e 	sub.w	r2, r2, lr
 800a2f8:	4565      	cmp	r5, ip
 800a2fa:	bf88      	it	hi
 800a2fc:	2200      	movhi	r2, #0
 800a2fe:	4413      	add	r3, r2
 800a300:	1a18      	subs	r0, r3, r0
 800a302:	b003      	add	sp, #12
 800a304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a30a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a30e:	e7ed      	b.n	800a2ec <__exponent+0x4c>
 800a310:	2330      	movs	r3, #48	; 0x30
 800a312:	3130      	adds	r1, #48	; 0x30
 800a314:	7083      	strb	r3, [r0, #2]
 800a316:	70c1      	strb	r1, [r0, #3]
 800a318:	1d03      	adds	r3, r0, #4
 800a31a:	e7f1      	b.n	800a300 <__exponent+0x60>

0800a31c <_printf_float>:
 800a31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a320:	ed2d 8b02 	vpush	{d8}
 800a324:	b08d      	sub	sp, #52	; 0x34
 800a326:	460c      	mov	r4, r1
 800a328:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a32c:	4616      	mov	r6, r2
 800a32e:	461f      	mov	r7, r3
 800a330:	4605      	mov	r5, r0
 800a332:	f001 fd67 	bl	800be04 <_localeconv_r>
 800a336:	f8d0 a000 	ldr.w	sl, [r0]
 800a33a:	4650      	mov	r0, sl
 800a33c:	f7f5 ff48 	bl	80001d0 <strlen>
 800a340:	2300      	movs	r3, #0
 800a342:	930a      	str	r3, [sp, #40]	; 0x28
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	9305      	str	r3, [sp, #20]
 800a348:	f8d8 3000 	ldr.w	r3, [r8]
 800a34c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a350:	3307      	adds	r3, #7
 800a352:	f023 0307 	bic.w	r3, r3, #7
 800a356:	f103 0208 	add.w	r2, r3, #8
 800a35a:	f8c8 2000 	str.w	r2, [r8]
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a366:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a36a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a36e:	9307      	str	r3, [sp, #28]
 800a370:	f8cd 8018 	str.w	r8, [sp, #24]
 800a374:	ee08 0a10 	vmov	s16, r0
 800a378:	4b9f      	ldr	r3, [pc, #636]	; (800a5f8 <_printf_float+0x2dc>)
 800a37a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a37e:	f04f 32ff 	mov.w	r2, #4294967295
 800a382:	f7f6 fbd3 	bl	8000b2c <__aeabi_dcmpun>
 800a386:	bb88      	cbnz	r0, 800a3ec <_printf_float+0xd0>
 800a388:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a38c:	4b9a      	ldr	r3, [pc, #616]	; (800a5f8 <_printf_float+0x2dc>)
 800a38e:	f04f 32ff 	mov.w	r2, #4294967295
 800a392:	f7f6 fbad 	bl	8000af0 <__aeabi_dcmple>
 800a396:	bb48      	cbnz	r0, 800a3ec <_printf_float+0xd0>
 800a398:	2200      	movs	r2, #0
 800a39a:	2300      	movs	r3, #0
 800a39c:	4640      	mov	r0, r8
 800a39e:	4649      	mov	r1, r9
 800a3a0:	f7f6 fb9c 	bl	8000adc <__aeabi_dcmplt>
 800a3a4:	b110      	cbz	r0, 800a3ac <_printf_float+0x90>
 800a3a6:	232d      	movs	r3, #45	; 0x2d
 800a3a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3ac:	4b93      	ldr	r3, [pc, #588]	; (800a5fc <_printf_float+0x2e0>)
 800a3ae:	4894      	ldr	r0, [pc, #592]	; (800a600 <_printf_float+0x2e4>)
 800a3b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3b4:	bf94      	ite	ls
 800a3b6:	4698      	movls	r8, r3
 800a3b8:	4680      	movhi	r8, r0
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	6123      	str	r3, [r4, #16]
 800a3be:	9b05      	ldr	r3, [sp, #20]
 800a3c0:	f023 0204 	bic.w	r2, r3, #4
 800a3c4:	6022      	str	r2, [r4, #0]
 800a3c6:	f04f 0900 	mov.w	r9, #0
 800a3ca:	9700      	str	r7, [sp, #0]
 800a3cc:	4633      	mov	r3, r6
 800a3ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f000 f9d8 	bl	800a788 <_printf_common>
 800a3d8:	3001      	adds	r0, #1
 800a3da:	f040 8090 	bne.w	800a4fe <_printf_float+0x1e2>
 800a3de:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e2:	b00d      	add	sp, #52	; 0x34
 800a3e4:	ecbd 8b02 	vpop	{d8}
 800a3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	464b      	mov	r3, r9
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	4649      	mov	r1, r9
 800a3f4:	f7f6 fb9a 	bl	8000b2c <__aeabi_dcmpun>
 800a3f8:	b140      	cbz	r0, 800a40c <_printf_float+0xf0>
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	bfbc      	itt	lt
 800a400:	232d      	movlt	r3, #45	; 0x2d
 800a402:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a406:	487f      	ldr	r0, [pc, #508]	; (800a604 <_printf_float+0x2e8>)
 800a408:	4b7f      	ldr	r3, [pc, #508]	; (800a608 <_printf_float+0x2ec>)
 800a40a:	e7d1      	b.n	800a3b0 <_printf_float+0x94>
 800a40c:	6863      	ldr	r3, [r4, #4]
 800a40e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a412:	9206      	str	r2, [sp, #24]
 800a414:	1c5a      	adds	r2, r3, #1
 800a416:	d13f      	bne.n	800a498 <_printf_float+0x17c>
 800a418:	2306      	movs	r3, #6
 800a41a:	6063      	str	r3, [r4, #4]
 800a41c:	9b05      	ldr	r3, [sp, #20]
 800a41e:	6861      	ldr	r1, [r4, #4]
 800a420:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a424:	2300      	movs	r3, #0
 800a426:	9303      	str	r3, [sp, #12]
 800a428:	ab0a      	add	r3, sp, #40	; 0x28
 800a42a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a42e:	ab09      	add	r3, sp, #36	; 0x24
 800a430:	ec49 8b10 	vmov	d0, r8, r9
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	6022      	str	r2, [r4, #0]
 800a438:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a43c:	4628      	mov	r0, r5
 800a43e:	f7ff fecd 	bl	800a1dc <__cvt>
 800a442:	9b06      	ldr	r3, [sp, #24]
 800a444:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a446:	2b47      	cmp	r3, #71	; 0x47
 800a448:	4680      	mov	r8, r0
 800a44a:	d108      	bne.n	800a45e <_printf_float+0x142>
 800a44c:	1cc8      	adds	r0, r1, #3
 800a44e:	db02      	blt.n	800a456 <_printf_float+0x13a>
 800a450:	6863      	ldr	r3, [r4, #4]
 800a452:	4299      	cmp	r1, r3
 800a454:	dd41      	ble.n	800a4da <_printf_float+0x1be>
 800a456:	f1ab 0b02 	sub.w	fp, fp, #2
 800a45a:	fa5f fb8b 	uxtb.w	fp, fp
 800a45e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a462:	d820      	bhi.n	800a4a6 <_printf_float+0x18a>
 800a464:	3901      	subs	r1, #1
 800a466:	465a      	mov	r2, fp
 800a468:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a46c:	9109      	str	r1, [sp, #36]	; 0x24
 800a46e:	f7ff ff17 	bl	800a2a0 <__exponent>
 800a472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a474:	1813      	adds	r3, r2, r0
 800a476:	2a01      	cmp	r2, #1
 800a478:	4681      	mov	r9, r0
 800a47a:	6123      	str	r3, [r4, #16]
 800a47c:	dc02      	bgt.n	800a484 <_printf_float+0x168>
 800a47e:	6822      	ldr	r2, [r4, #0]
 800a480:	07d2      	lsls	r2, r2, #31
 800a482:	d501      	bpl.n	800a488 <_printf_float+0x16c>
 800a484:	3301      	adds	r3, #1
 800a486:	6123      	str	r3, [r4, #16]
 800a488:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d09c      	beq.n	800a3ca <_printf_float+0xae>
 800a490:	232d      	movs	r3, #45	; 0x2d
 800a492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a496:	e798      	b.n	800a3ca <_printf_float+0xae>
 800a498:	9a06      	ldr	r2, [sp, #24]
 800a49a:	2a47      	cmp	r2, #71	; 0x47
 800a49c:	d1be      	bne.n	800a41c <_printf_float+0x100>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1bc      	bne.n	800a41c <_printf_float+0x100>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e7b9      	b.n	800a41a <_printf_float+0xfe>
 800a4a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4aa:	d118      	bne.n	800a4de <_printf_float+0x1c2>
 800a4ac:	2900      	cmp	r1, #0
 800a4ae:	6863      	ldr	r3, [r4, #4]
 800a4b0:	dd0b      	ble.n	800a4ca <_printf_float+0x1ae>
 800a4b2:	6121      	str	r1, [r4, #16]
 800a4b4:	b913      	cbnz	r3, 800a4bc <_printf_float+0x1a0>
 800a4b6:	6822      	ldr	r2, [r4, #0]
 800a4b8:	07d0      	lsls	r0, r2, #31
 800a4ba:	d502      	bpl.n	800a4c2 <_printf_float+0x1a6>
 800a4bc:	3301      	adds	r3, #1
 800a4be:	440b      	add	r3, r1
 800a4c0:	6123      	str	r3, [r4, #16]
 800a4c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a4c4:	f04f 0900 	mov.w	r9, #0
 800a4c8:	e7de      	b.n	800a488 <_printf_float+0x16c>
 800a4ca:	b913      	cbnz	r3, 800a4d2 <_printf_float+0x1b6>
 800a4cc:	6822      	ldr	r2, [r4, #0]
 800a4ce:	07d2      	lsls	r2, r2, #31
 800a4d0:	d501      	bpl.n	800a4d6 <_printf_float+0x1ba>
 800a4d2:	3302      	adds	r3, #2
 800a4d4:	e7f4      	b.n	800a4c0 <_printf_float+0x1a4>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e7f2      	b.n	800a4c0 <_printf_float+0x1a4>
 800a4da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4e0:	4299      	cmp	r1, r3
 800a4e2:	db05      	blt.n	800a4f0 <_printf_float+0x1d4>
 800a4e4:	6823      	ldr	r3, [r4, #0]
 800a4e6:	6121      	str	r1, [r4, #16]
 800a4e8:	07d8      	lsls	r0, r3, #31
 800a4ea:	d5ea      	bpl.n	800a4c2 <_printf_float+0x1a6>
 800a4ec:	1c4b      	adds	r3, r1, #1
 800a4ee:	e7e7      	b.n	800a4c0 <_printf_float+0x1a4>
 800a4f0:	2900      	cmp	r1, #0
 800a4f2:	bfd4      	ite	le
 800a4f4:	f1c1 0202 	rsble	r2, r1, #2
 800a4f8:	2201      	movgt	r2, #1
 800a4fa:	4413      	add	r3, r2
 800a4fc:	e7e0      	b.n	800a4c0 <_printf_float+0x1a4>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	055a      	lsls	r2, r3, #21
 800a502:	d407      	bmi.n	800a514 <_printf_float+0x1f8>
 800a504:	6923      	ldr	r3, [r4, #16]
 800a506:	4642      	mov	r2, r8
 800a508:	4631      	mov	r1, r6
 800a50a:	4628      	mov	r0, r5
 800a50c:	47b8      	blx	r7
 800a50e:	3001      	adds	r0, #1
 800a510:	d12c      	bne.n	800a56c <_printf_float+0x250>
 800a512:	e764      	b.n	800a3de <_printf_float+0xc2>
 800a514:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a518:	f240 80e0 	bls.w	800a6dc <_printf_float+0x3c0>
 800a51c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a520:	2200      	movs	r2, #0
 800a522:	2300      	movs	r3, #0
 800a524:	f7f6 fad0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d034      	beq.n	800a596 <_printf_float+0x27a>
 800a52c:	4a37      	ldr	r2, [pc, #220]	; (800a60c <_printf_float+0x2f0>)
 800a52e:	2301      	movs	r3, #1
 800a530:	4631      	mov	r1, r6
 800a532:	4628      	mov	r0, r5
 800a534:	47b8      	blx	r7
 800a536:	3001      	adds	r0, #1
 800a538:	f43f af51 	beq.w	800a3de <_printf_float+0xc2>
 800a53c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a540:	429a      	cmp	r2, r3
 800a542:	db02      	blt.n	800a54a <_printf_float+0x22e>
 800a544:	6823      	ldr	r3, [r4, #0]
 800a546:	07d8      	lsls	r0, r3, #31
 800a548:	d510      	bpl.n	800a56c <_printf_float+0x250>
 800a54a:	ee18 3a10 	vmov	r3, s16
 800a54e:	4652      	mov	r2, sl
 800a550:	4631      	mov	r1, r6
 800a552:	4628      	mov	r0, r5
 800a554:	47b8      	blx	r7
 800a556:	3001      	adds	r0, #1
 800a558:	f43f af41 	beq.w	800a3de <_printf_float+0xc2>
 800a55c:	f04f 0800 	mov.w	r8, #0
 800a560:	f104 091a 	add.w	r9, r4, #26
 800a564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a566:	3b01      	subs	r3, #1
 800a568:	4543      	cmp	r3, r8
 800a56a:	dc09      	bgt.n	800a580 <_printf_float+0x264>
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	079b      	lsls	r3, r3, #30
 800a570:	f100 8105 	bmi.w	800a77e <_printf_float+0x462>
 800a574:	68e0      	ldr	r0, [r4, #12]
 800a576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a578:	4298      	cmp	r0, r3
 800a57a:	bfb8      	it	lt
 800a57c:	4618      	movlt	r0, r3
 800a57e:	e730      	b.n	800a3e2 <_printf_float+0xc6>
 800a580:	2301      	movs	r3, #1
 800a582:	464a      	mov	r2, r9
 800a584:	4631      	mov	r1, r6
 800a586:	4628      	mov	r0, r5
 800a588:	47b8      	blx	r7
 800a58a:	3001      	adds	r0, #1
 800a58c:	f43f af27 	beq.w	800a3de <_printf_float+0xc2>
 800a590:	f108 0801 	add.w	r8, r8, #1
 800a594:	e7e6      	b.n	800a564 <_printf_float+0x248>
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	2b00      	cmp	r3, #0
 800a59a:	dc39      	bgt.n	800a610 <_printf_float+0x2f4>
 800a59c:	4a1b      	ldr	r2, [pc, #108]	; (800a60c <_printf_float+0x2f0>)
 800a59e:	2301      	movs	r3, #1
 800a5a0:	4631      	mov	r1, r6
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	47b8      	blx	r7
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	f43f af19 	beq.w	800a3de <_printf_float+0xc2>
 800a5ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	d102      	bne.n	800a5ba <_printf_float+0x29e>
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	07d9      	lsls	r1, r3, #31
 800a5b8:	d5d8      	bpl.n	800a56c <_printf_float+0x250>
 800a5ba:	ee18 3a10 	vmov	r3, s16
 800a5be:	4652      	mov	r2, sl
 800a5c0:	4631      	mov	r1, r6
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	47b8      	blx	r7
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	f43f af09 	beq.w	800a3de <_printf_float+0xc2>
 800a5cc:	f04f 0900 	mov.w	r9, #0
 800a5d0:	f104 0a1a 	add.w	sl, r4, #26
 800a5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d6:	425b      	negs	r3, r3
 800a5d8:	454b      	cmp	r3, r9
 800a5da:	dc01      	bgt.n	800a5e0 <_printf_float+0x2c4>
 800a5dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5de:	e792      	b.n	800a506 <_printf_float+0x1ea>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	4652      	mov	r2, sl
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	47b8      	blx	r7
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	f43f aef7 	beq.w	800a3de <_printf_float+0xc2>
 800a5f0:	f109 0901 	add.w	r9, r9, #1
 800a5f4:	e7ee      	b.n	800a5d4 <_printf_float+0x2b8>
 800a5f6:	bf00      	nop
 800a5f8:	7fefffff 	.word	0x7fefffff
 800a5fc:	0800e650 	.word	0x0800e650
 800a600:	0800e654 	.word	0x0800e654
 800a604:	0800e65c 	.word	0x0800e65c
 800a608:	0800e658 	.word	0x0800e658
 800a60c:	0800e660 	.word	0x0800e660
 800a610:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a612:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a614:	429a      	cmp	r2, r3
 800a616:	bfa8      	it	ge
 800a618:	461a      	movge	r2, r3
 800a61a:	2a00      	cmp	r2, #0
 800a61c:	4691      	mov	r9, r2
 800a61e:	dc37      	bgt.n	800a690 <_printf_float+0x374>
 800a620:	f04f 0b00 	mov.w	fp, #0
 800a624:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a628:	f104 021a 	add.w	r2, r4, #26
 800a62c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a62e:	9305      	str	r3, [sp, #20]
 800a630:	eba3 0309 	sub.w	r3, r3, r9
 800a634:	455b      	cmp	r3, fp
 800a636:	dc33      	bgt.n	800a6a0 <_printf_float+0x384>
 800a638:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a63c:	429a      	cmp	r2, r3
 800a63e:	db3b      	blt.n	800a6b8 <_printf_float+0x39c>
 800a640:	6823      	ldr	r3, [r4, #0]
 800a642:	07da      	lsls	r2, r3, #31
 800a644:	d438      	bmi.n	800a6b8 <_printf_float+0x39c>
 800a646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a648:	9a05      	ldr	r2, [sp, #20]
 800a64a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a64c:	1a9a      	subs	r2, r3, r2
 800a64e:	eba3 0901 	sub.w	r9, r3, r1
 800a652:	4591      	cmp	r9, r2
 800a654:	bfa8      	it	ge
 800a656:	4691      	movge	r9, r2
 800a658:	f1b9 0f00 	cmp.w	r9, #0
 800a65c:	dc35      	bgt.n	800a6ca <_printf_float+0x3ae>
 800a65e:	f04f 0800 	mov.w	r8, #0
 800a662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a666:	f104 0a1a 	add.w	sl, r4, #26
 800a66a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a66e:	1a9b      	subs	r3, r3, r2
 800a670:	eba3 0309 	sub.w	r3, r3, r9
 800a674:	4543      	cmp	r3, r8
 800a676:	f77f af79 	ble.w	800a56c <_printf_float+0x250>
 800a67a:	2301      	movs	r3, #1
 800a67c:	4652      	mov	r2, sl
 800a67e:	4631      	mov	r1, r6
 800a680:	4628      	mov	r0, r5
 800a682:	47b8      	blx	r7
 800a684:	3001      	adds	r0, #1
 800a686:	f43f aeaa 	beq.w	800a3de <_printf_float+0xc2>
 800a68a:	f108 0801 	add.w	r8, r8, #1
 800a68e:	e7ec      	b.n	800a66a <_printf_float+0x34e>
 800a690:	4613      	mov	r3, r2
 800a692:	4631      	mov	r1, r6
 800a694:	4642      	mov	r2, r8
 800a696:	4628      	mov	r0, r5
 800a698:	47b8      	blx	r7
 800a69a:	3001      	adds	r0, #1
 800a69c:	d1c0      	bne.n	800a620 <_printf_float+0x304>
 800a69e:	e69e      	b.n	800a3de <_printf_float+0xc2>
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	4631      	mov	r1, r6
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	9205      	str	r2, [sp, #20]
 800a6a8:	47b8      	blx	r7
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	f43f ae97 	beq.w	800a3de <_printf_float+0xc2>
 800a6b0:	9a05      	ldr	r2, [sp, #20]
 800a6b2:	f10b 0b01 	add.w	fp, fp, #1
 800a6b6:	e7b9      	b.n	800a62c <_printf_float+0x310>
 800a6b8:	ee18 3a10 	vmov	r3, s16
 800a6bc:	4652      	mov	r2, sl
 800a6be:	4631      	mov	r1, r6
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	47b8      	blx	r7
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	d1be      	bne.n	800a646 <_printf_float+0x32a>
 800a6c8:	e689      	b.n	800a3de <_printf_float+0xc2>
 800a6ca:	9a05      	ldr	r2, [sp, #20]
 800a6cc:	464b      	mov	r3, r9
 800a6ce:	4442      	add	r2, r8
 800a6d0:	4631      	mov	r1, r6
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	47b8      	blx	r7
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	d1c1      	bne.n	800a65e <_printf_float+0x342>
 800a6da:	e680      	b.n	800a3de <_printf_float+0xc2>
 800a6dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6de:	2a01      	cmp	r2, #1
 800a6e0:	dc01      	bgt.n	800a6e6 <_printf_float+0x3ca>
 800a6e2:	07db      	lsls	r3, r3, #31
 800a6e4:	d538      	bpl.n	800a758 <_printf_float+0x43c>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	4642      	mov	r2, r8
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	47b8      	blx	r7
 800a6f0:	3001      	adds	r0, #1
 800a6f2:	f43f ae74 	beq.w	800a3de <_printf_float+0xc2>
 800a6f6:	ee18 3a10 	vmov	r3, s16
 800a6fa:	4652      	mov	r2, sl
 800a6fc:	4631      	mov	r1, r6
 800a6fe:	4628      	mov	r0, r5
 800a700:	47b8      	blx	r7
 800a702:	3001      	adds	r0, #1
 800a704:	f43f ae6b 	beq.w	800a3de <_printf_float+0xc2>
 800a708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a70c:	2200      	movs	r2, #0
 800a70e:	2300      	movs	r3, #0
 800a710:	f7f6 f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 800a714:	b9d8      	cbnz	r0, 800a74e <_printf_float+0x432>
 800a716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a718:	f108 0201 	add.w	r2, r8, #1
 800a71c:	3b01      	subs	r3, #1
 800a71e:	4631      	mov	r1, r6
 800a720:	4628      	mov	r0, r5
 800a722:	47b8      	blx	r7
 800a724:	3001      	adds	r0, #1
 800a726:	d10e      	bne.n	800a746 <_printf_float+0x42a>
 800a728:	e659      	b.n	800a3de <_printf_float+0xc2>
 800a72a:	2301      	movs	r3, #1
 800a72c:	4652      	mov	r2, sl
 800a72e:	4631      	mov	r1, r6
 800a730:	4628      	mov	r0, r5
 800a732:	47b8      	blx	r7
 800a734:	3001      	adds	r0, #1
 800a736:	f43f ae52 	beq.w	800a3de <_printf_float+0xc2>
 800a73a:	f108 0801 	add.w	r8, r8, #1
 800a73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a740:	3b01      	subs	r3, #1
 800a742:	4543      	cmp	r3, r8
 800a744:	dcf1      	bgt.n	800a72a <_printf_float+0x40e>
 800a746:	464b      	mov	r3, r9
 800a748:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a74c:	e6dc      	b.n	800a508 <_printf_float+0x1ec>
 800a74e:	f04f 0800 	mov.w	r8, #0
 800a752:	f104 0a1a 	add.w	sl, r4, #26
 800a756:	e7f2      	b.n	800a73e <_printf_float+0x422>
 800a758:	2301      	movs	r3, #1
 800a75a:	4642      	mov	r2, r8
 800a75c:	e7df      	b.n	800a71e <_printf_float+0x402>
 800a75e:	2301      	movs	r3, #1
 800a760:	464a      	mov	r2, r9
 800a762:	4631      	mov	r1, r6
 800a764:	4628      	mov	r0, r5
 800a766:	47b8      	blx	r7
 800a768:	3001      	adds	r0, #1
 800a76a:	f43f ae38 	beq.w	800a3de <_printf_float+0xc2>
 800a76e:	f108 0801 	add.w	r8, r8, #1
 800a772:	68e3      	ldr	r3, [r4, #12]
 800a774:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a776:	1a5b      	subs	r3, r3, r1
 800a778:	4543      	cmp	r3, r8
 800a77a:	dcf0      	bgt.n	800a75e <_printf_float+0x442>
 800a77c:	e6fa      	b.n	800a574 <_printf_float+0x258>
 800a77e:	f04f 0800 	mov.w	r8, #0
 800a782:	f104 0919 	add.w	r9, r4, #25
 800a786:	e7f4      	b.n	800a772 <_printf_float+0x456>

0800a788 <_printf_common>:
 800a788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a78c:	4616      	mov	r6, r2
 800a78e:	4699      	mov	r9, r3
 800a790:	688a      	ldr	r2, [r1, #8]
 800a792:	690b      	ldr	r3, [r1, #16]
 800a794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a798:	4293      	cmp	r3, r2
 800a79a:	bfb8      	it	lt
 800a79c:	4613      	movlt	r3, r2
 800a79e:	6033      	str	r3, [r6, #0]
 800a7a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7a4:	4607      	mov	r7, r0
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	b10a      	cbz	r2, 800a7ae <_printf_common+0x26>
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	6033      	str	r3, [r6, #0]
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	0699      	lsls	r1, r3, #26
 800a7b2:	bf42      	ittt	mi
 800a7b4:	6833      	ldrmi	r3, [r6, #0]
 800a7b6:	3302      	addmi	r3, #2
 800a7b8:	6033      	strmi	r3, [r6, #0]
 800a7ba:	6825      	ldr	r5, [r4, #0]
 800a7bc:	f015 0506 	ands.w	r5, r5, #6
 800a7c0:	d106      	bne.n	800a7d0 <_printf_common+0x48>
 800a7c2:	f104 0a19 	add.w	sl, r4, #25
 800a7c6:	68e3      	ldr	r3, [r4, #12]
 800a7c8:	6832      	ldr	r2, [r6, #0]
 800a7ca:	1a9b      	subs	r3, r3, r2
 800a7cc:	42ab      	cmp	r3, r5
 800a7ce:	dc26      	bgt.n	800a81e <_printf_common+0x96>
 800a7d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7d4:	1e13      	subs	r3, r2, #0
 800a7d6:	6822      	ldr	r2, [r4, #0]
 800a7d8:	bf18      	it	ne
 800a7da:	2301      	movne	r3, #1
 800a7dc:	0692      	lsls	r2, r2, #26
 800a7de:	d42b      	bmi.n	800a838 <_printf_common+0xb0>
 800a7e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	4638      	mov	r0, r7
 800a7e8:	47c0      	blx	r8
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	d01e      	beq.n	800a82c <_printf_common+0xa4>
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	68e5      	ldr	r5, [r4, #12]
 800a7f2:	6832      	ldr	r2, [r6, #0]
 800a7f4:	f003 0306 	and.w	r3, r3, #6
 800a7f8:	2b04      	cmp	r3, #4
 800a7fa:	bf08      	it	eq
 800a7fc:	1aad      	subeq	r5, r5, r2
 800a7fe:	68a3      	ldr	r3, [r4, #8]
 800a800:	6922      	ldr	r2, [r4, #16]
 800a802:	bf0c      	ite	eq
 800a804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a808:	2500      	movne	r5, #0
 800a80a:	4293      	cmp	r3, r2
 800a80c:	bfc4      	itt	gt
 800a80e:	1a9b      	subgt	r3, r3, r2
 800a810:	18ed      	addgt	r5, r5, r3
 800a812:	2600      	movs	r6, #0
 800a814:	341a      	adds	r4, #26
 800a816:	42b5      	cmp	r5, r6
 800a818:	d11a      	bne.n	800a850 <_printf_common+0xc8>
 800a81a:	2000      	movs	r0, #0
 800a81c:	e008      	b.n	800a830 <_printf_common+0xa8>
 800a81e:	2301      	movs	r3, #1
 800a820:	4652      	mov	r2, sl
 800a822:	4649      	mov	r1, r9
 800a824:	4638      	mov	r0, r7
 800a826:	47c0      	blx	r8
 800a828:	3001      	adds	r0, #1
 800a82a:	d103      	bne.n	800a834 <_printf_common+0xac>
 800a82c:	f04f 30ff 	mov.w	r0, #4294967295
 800a830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a834:	3501      	adds	r5, #1
 800a836:	e7c6      	b.n	800a7c6 <_printf_common+0x3e>
 800a838:	18e1      	adds	r1, r4, r3
 800a83a:	1c5a      	adds	r2, r3, #1
 800a83c:	2030      	movs	r0, #48	; 0x30
 800a83e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a842:	4422      	add	r2, r4
 800a844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a84c:	3302      	adds	r3, #2
 800a84e:	e7c7      	b.n	800a7e0 <_printf_common+0x58>
 800a850:	2301      	movs	r3, #1
 800a852:	4622      	mov	r2, r4
 800a854:	4649      	mov	r1, r9
 800a856:	4638      	mov	r0, r7
 800a858:	47c0      	blx	r8
 800a85a:	3001      	adds	r0, #1
 800a85c:	d0e6      	beq.n	800a82c <_printf_common+0xa4>
 800a85e:	3601      	adds	r6, #1
 800a860:	e7d9      	b.n	800a816 <_printf_common+0x8e>
	...

0800a864 <_printf_i>:
 800a864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a868:	7e0f      	ldrb	r7, [r1, #24]
 800a86a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a86c:	2f78      	cmp	r7, #120	; 0x78
 800a86e:	4691      	mov	r9, r2
 800a870:	4680      	mov	r8, r0
 800a872:	460c      	mov	r4, r1
 800a874:	469a      	mov	sl, r3
 800a876:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a87a:	d807      	bhi.n	800a88c <_printf_i+0x28>
 800a87c:	2f62      	cmp	r7, #98	; 0x62
 800a87e:	d80a      	bhi.n	800a896 <_printf_i+0x32>
 800a880:	2f00      	cmp	r7, #0
 800a882:	f000 80d8 	beq.w	800aa36 <_printf_i+0x1d2>
 800a886:	2f58      	cmp	r7, #88	; 0x58
 800a888:	f000 80a3 	beq.w	800a9d2 <_printf_i+0x16e>
 800a88c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a894:	e03a      	b.n	800a90c <_printf_i+0xa8>
 800a896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a89a:	2b15      	cmp	r3, #21
 800a89c:	d8f6      	bhi.n	800a88c <_printf_i+0x28>
 800a89e:	a101      	add	r1, pc, #4	; (adr r1, 800a8a4 <_printf_i+0x40>)
 800a8a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8a4:	0800a8fd 	.word	0x0800a8fd
 800a8a8:	0800a911 	.word	0x0800a911
 800a8ac:	0800a88d 	.word	0x0800a88d
 800a8b0:	0800a88d 	.word	0x0800a88d
 800a8b4:	0800a88d 	.word	0x0800a88d
 800a8b8:	0800a88d 	.word	0x0800a88d
 800a8bc:	0800a911 	.word	0x0800a911
 800a8c0:	0800a88d 	.word	0x0800a88d
 800a8c4:	0800a88d 	.word	0x0800a88d
 800a8c8:	0800a88d 	.word	0x0800a88d
 800a8cc:	0800a88d 	.word	0x0800a88d
 800a8d0:	0800aa1d 	.word	0x0800aa1d
 800a8d4:	0800a941 	.word	0x0800a941
 800a8d8:	0800a9ff 	.word	0x0800a9ff
 800a8dc:	0800a88d 	.word	0x0800a88d
 800a8e0:	0800a88d 	.word	0x0800a88d
 800a8e4:	0800aa3f 	.word	0x0800aa3f
 800a8e8:	0800a88d 	.word	0x0800a88d
 800a8ec:	0800a941 	.word	0x0800a941
 800a8f0:	0800a88d 	.word	0x0800a88d
 800a8f4:	0800a88d 	.word	0x0800a88d
 800a8f8:	0800aa07 	.word	0x0800aa07
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	1d1a      	adds	r2, r3, #4
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	602a      	str	r2, [r5, #0]
 800a904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a90c:	2301      	movs	r3, #1
 800a90e:	e0a3      	b.n	800aa58 <_printf_i+0x1f4>
 800a910:	6820      	ldr	r0, [r4, #0]
 800a912:	6829      	ldr	r1, [r5, #0]
 800a914:	0606      	lsls	r6, r0, #24
 800a916:	f101 0304 	add.w	r3, r1, #4
 800a91a:	d50a      	bpl.n	800a932 <_printf_i+0xce>
 800a91c:	680e      	ldr	r6, [r1, #0]
 800a91e:	602b      	str	r3, [r5, #0]
 800a920:	2e00      	cmp	r6, #0
 800a922:	da03      	bge.n	800a92c <_printf_i+0xc8>
 800a924:	232d      	movs	r3, #45	; 0x2d
 800a926:	4276      	negs	r6, r6
 800a928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a92c:	485e      	ldr	r0, [pc, #376]	; (800aaa8 <_printf_i+0x244>)
 800a92e:	230a      	movs	r3, #10
 800a930:	e019      	b.n	800a966 <_printf_i+0x102>
 800a932:	680e      	ldr	r6, [r1, #0]
 800a934:	602b      	str	r3, [r5, #0]
 800a936:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a93a:	bf18      	it	ne
 800a93c:	b236      	sxthne	r6, r6
 800a93e:	e7ef      	b.n	800a920 <_printf_i+0xbc>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	6820      	ldr	r0, [r4, #0]
 800a944:	1d19      	adds	r1, r3, #4
 800a946:	6029      	str	r1, [r5, #0]
 800a948:	0601      	lsls	r1, r0, #24
 800a94a:	d501      	bpl.n	800a950 <_printf_i+0xec>
 800a94c:	681e      	ldr	r6, [r3, #0]
 800a94e:	e002      	b.n	800a956 <_printf_i+0xf2>
 800a950:	0646      	lsls	r6, r0, #25
 800a952:	d5fb      	bpl.n	800a94c <_printf_i+0xe8>
 800a954:	881e      	ldrh	r6, [r3, #0]
 800a956:	4854      	ldr	r0, [pc, #336]	; (800aaa8 <_printf_i+0x244>)
 800a958:	2f6f      	cmp	r7, #111	; 0x6f
 800a95a:	bf0c      	ite	eq
 800a95c:	2308      	moveq	r3, #8
 800a95e:	230a      	movne	r3, #10
 800a960:	2100      	movs	r1, #0
 800a962:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a966:	6865      	ldr	r5, [r4, #4]
 800a968:	60a5      	str	r5, [r4, #8]
 800a96a:	2d00      	cmp	r5, #0
 800a96c:	bfa2      	ittt	ge
 800a96e:	6821      	ldrge	r1, [r4, #0]
 800a970:	f021 0104 	bicge.w	r1, r1, #4
 800a974:	6021      	strge	r1, [r4, #0]
 800a976:	b90e      	cbnz	r6, 800a97c <_printf_i+0x118>
 800a978:	2d00      	cmp	r5, #0
 800a97a:	d04d      	beq.n	800aa18 <_printf_i+0x1b4>
 800a97c:	4615      	mov	r5, r2
 800a97e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a982:	fb03 6711 	mls	r7, r3, r1, r6
 800a986:	5dc7      	ldrb	r7, [r0, r7]
 800a988:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a98c:	4637      	mov	r7, r6
 800a98e:	42bb      	cmp	r3, r7
 800a990:	460e      	mov	r6, r1
 800a992:	d9f4      	bls.n	800a97e <_printf_i+0x11a>
 800a994:	2b08      	cmp	r3, #8
 800a996:	d10b      	bne.n	800a9b0 <_printf_i+0x14c>
 800a998:	6823      	ldr	r3, [r4, #0]
 800a99a:	07de      	lsls	r6, r3, #31
 800a99c:	d508      	bpl.n	800a9b0 <_printf_i+0x14c>
 800a99e:	6923      	ldr	r3, [r4, #16]
 800a9a0:	6861      	ldr	r1, [r4, #4]
 800a9a2:	4299      	cmp	r1, r3
 800a9a4:	bfde      	ittt	le
 800a9a6:	2330      	movle	r3, #48	; 0x30
 800a9a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9b0:	1b52      	subs	r2, r2, r5
 800a9b2:	6122      	str	r2, [r4, #16]
 800a9b4:	f8cd a000 	str.w	sl, [sp]
 800a9b8:	464b      	mov	r3, r9
 800a9ba:	aa03      	add	r2, sp, #12
 800a9bc:	4621      	mov	r1, r4
 800a9be:	4640      	mov	r0, r8
 800a9c0:	f7ff fee2 	bl	800a788 <_printf_common>
 800a9c4:	3001      	adds	r0, #1
 800a9c6:	d14c      	bne.n	800aa62 <_printf_i+0x1fe>
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9cc:	b004      	add	sp, #16
 800a9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d2:	4835      	ldr	r0, [pc, #212]	; (800aaa8 <_printf_i+0x244>)
 800a9d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9d8:	6829      	ldr	r1, [r5, #0]
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9e0:	6029      	str	r1, [r5, #0]
 800a9e2:	061d      	lsls	r5, r3, #24
 800a9e4:	d514      	bpl.n	800aa10 <_printf_i+0x1ac>
 800a9e6:	07df      	lsls	r7, r3, #31
 800a9e8:	bf44      	itt	mi
 800a9ea:	f043 0320 	orrmi.w	r3, r3, #32
 800a9ee:	6023      	strmi	r3, [r4, #0]
 800a9f0:	b91e      	cbnz	r6, 800a9fa <_printf_i+0x196>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	f023 0320 	bic.w	r3, r3, #32
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	2310      	movs	r3, #16
 800a9fc:	e7b0      	b.n	800a960 <_printf_i+0xfc>
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	f043 0320 	orr.w	r3, r3, #32
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	2378      	movs	r3, #120	; 0x78
 800aa08:	4828      	ldr	r0, [pc, #160]	; (800aaac <_printf_i+0x248>)
 800aa0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa0e:	e7e3      	b.n	800a9d8 <_printf_i+0x174>
 800aa10:	0659      	lsls	r1, r3, #25
 800aa12:	bf48      	it	mi
 800aa14:	b2b6      	uxthmi	r6, r6
 800aa16:	e7e6      	b.n	800a9e6 <_printf_i+0x182>
 800aa18:	4615      	mov	r5, r2
 800aa1a:	e7bb      	b.n	800a994 <_printf_i+0x130>
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	6826      	ldr	r6, [r4, #0]
 800aa20:	6961      	ldr	r1, [r4, #20]
 800aa22:	1d18      	adds	r0, r3, #4
 800aa24:	6028      	str	r0, [r5, #0]
 800aa26:	0635      	lsls	r5, r6, #24
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	d501      	bpl.n	800aa30 <_printf_i+0x1cc>
 800aa2c:	6019      	str	r1, [r3, #0]
 800aa2e:	e002      	b.n	800aa36 <_printf_i+0x1d2>
 800aa30:	0670      	lsls	r0, r6, #25
 800aa32:	d5fb      	bpl.n	800aa2c <_printf_i+0x1c8>
 800aa34:	8019      	strh	r1, [r3, #0]
 800aa36:	2300      	movs	r3, #0
 800aa38:	6123      	str	r3, [r4, #16]
 800aa3a:	4615      	mov	r5, r2
 800aa3c:	e7ba      	b.n	800a9b4 <_printf_i+0x150>
 800aa3e:	682b      	ldr	r3, [r5, #0]
 800aa40:	1d1a      	adds	r2, r3, #4
 800aa42:	602a      	str	r2, [r5, #0]
 800aa44:	681d      	ldr	r5, [r3, #0]
 800aa46:	6862      	ldr	r2, [r4, #4]
 800aa48:	2100      	movs	r1, #0
 800aa4a:	4628      	mov	r0, r5
 800aa4c:	f7f5 fbc8 	bl	80001e0 <memchr>
 800aa50:	b108      	cbz	r0, 800aa56 <_printf_i+0x1f2>
 800aa52:	1b40      	subs	r0, r0, r5
 800aa54:	6060      	str	r0, [r4, #4]
 800aa56:	6863      	ldr	r3, [r4, #4]
 800aa58:	6123      	str	r3, [r4, #16]
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa60:	e7a8      	b.n	800a9b4 <_printf_i+0x150>
 800aa62:	6923      	ldr	r3, [r4, #16]
 800aa64:	462a      	mov	r2, r5
 800aa66:	4649      	mov	r1, r9
 800aa68:	4640      	mov	r0, r8
 800aa6a:	47d0      	blx	sl
 800aa6c:	3001      	adds	r0, #1
 800aa6e:	d0ab      	beq.n	800a9c8 <_printf_i+0x164>
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	079b      	lsls	r3, r3, #30
 800aa74:	d413      	bmi.n	800aa9e <_printf_i+0x23a>
 800aa76:	68e0      	ldr	r0, [r4, #12]
 800aa78:	9b03      	ldr	r3, [sp, #12]
 800aa7a:	4298      	cmp	r0, r3
 800aa7c:	bfb8      	it	lt
 800aa7e:	4618      	movlt	r0, r3
 800aa80:	e7a4      	b.n	800a9cc <_printf_i+0x168>
 800aa82:	2301      	movs	r3, #1
 800aa84:	4632      	mov	r2, r6
 800aa86:	4649      	mov	r1, r9
 800aa88:	4640      	mov	r0, r8
 800aa8a:	47d0      	blx	sl
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	d09b      	beq.n	800a9c8 <_printf_i+0x164>
 800aa90:	3501      	adds	r5, #1
 800aa92:	68e3      	ldr	r3, [r4, #12]
 800aa94:	9903      	ldr	r1, [sp, #12]
 800aa96:	1a5b      	subs	r3, r3, r1
 800aa98:	42ab      	cmp	r3, r5
 800aa9a:	dcf2      	bgt.n	800aa82 <_printf_i+0x21e>
 800aa9c:	e7eb      	b.n	800aa76 <_printf_i+0x212>
 800aa9e:	2500      	movs	r5, #0
 800aaa0:	f104 0619 	add.w	r6, r4, #25
 800aaa4:	e7f5      	b.n	800aa92 <_printf_i+0x22e>
 800aaa6:	bf00      	nop
 800aaa8:	0800e662 	.word	0x0800e662
 800aaac:	0800e673 	.word	0x0800e673

0800aab0 <iprintf>:
 800aab0:	b40f      	push	{r0, r1, r2, r3}
 800aab2:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <iprintf+0x2c>)
 800aab4:	b513      	push	{r0, r1, r4, lr}
 800aab6:	681c      	ldr	r4, [r3, #0]
 800aab8:	b124      	cbz	r4, 800aac4 <iprintf+0x14>
 800aaba:	69a3      	ldr	r3, [r4, #24]
 800aabc:	b913      	cbnz	r3, 800aac4 <iprintf+0x14>
 800aabe:	4620      	mov	r0, r4
 800aac0:	f001 f902 	bl	800bcc8 <__sinit>
 800aac4:	ab05      	add	r3, sp, #20
 800aac6:	9a04      	ldr	r2, [sp, #16]
 800aac8:	68a1      	ldr	r1, [r4, #8]
 800aaca:	9301      	str	r3, [sp, #4]
 800aacc:	4620      	mov	r0, r4
 800aace:	f001 fff5 	bl	800cabc <_vfiprintf_r>
 800aad2:	b002      	add	sp, #8
 800aad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aad8:	b004      	add	sp, #16
 800aada:	4770      	bx	lr
 800aadc:	2000001c 	.word	0x2000001c

0800aae0 <sniprintf>:
 800aae0:	b40c      	push	{r2, r3}
 800aae2:	b530      	push	{r4, r5, lr}
 800aae4:	4b17      	ldr	r3, [pc, #92]	; (800ab44 <sniprintf+0x64>)
 800aae6:	1e0c      	subs	r4, r1, #0
 800aae8:	681d      	ldr	r5, [r3, #0]
 800aaea:	b09d      	sub	sp, #116	; 0x74
 800aaec:	da08      	bge.n	800ab00 <sniprintf+0x20>
 800aaee:	238b      	movs	r3, #139	; 0x8b
 800aaf0:	602b      	str	r3, [r5, #0]
 800aaf2:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf6:	b01d      	add	sp, #116	; 0x74
 800aaf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aafc:	b002      	add	sp, #8
 800aafe:	4770      	bx	lr
 800ab00:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ab04:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ab08:	bf14      	ite	ne
 800ab0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab0e:	4623      	moveq	r3, r4
 800ab10:	9304      	str	r3, [sp, #16]
 800ab12:	9307      	str	r3, [sp, #28]
 800ab14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab18:	9002      	str	r0, [sp, #8]
 800ab1a:	9006      	str	r0, [sp, #24]
 800ab1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab22:	ab21      	add	r3, sp, #132	; 0x84
 800ab24:	a902      	add	r1, sp, #8
 800ab26:	4628      	mov	r0, r5
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	f001 fe9d 	bl	800c868 <_svfiprintf_r>
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	bfbc      	itt	lt
 800ab32:	238b      	movlt	r3, #139	; 0x8b
 800ab34:	602b      	strlt	r3, [r5, #0]
 800ab36:	2c00      	cmp	r4, #0
 800ab38:	d0dd      	beq.n	800aaf6 <sniprintf+0x16>
 800ab3a:	9b02      	ldr	r3, [sp, #8]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	701a      	strb	r2, [r3, #0]
 800ab40:	e7d9      	b.n	800aaf6 <sniprintf+0x16>
 800ab42:	bf00      	nop
 800ab44:	2000001c 	.word	0x2000001c

0800ab48 <strcspn>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	461e      	mov	r6, r3
 800ab4e:	f813 4b01 	ldrb.w	r4, [r3], #1
 800ab52:	b144      	cbz	r4, 800ab66 <strcspn+0x1e>
 800ab54:	1e4a      	subs	r2, r1, #1
 800ab56:	e001      	b.n	800ab5c <strcspn+0x14>
 800ab58:	42a5      	cmp	r5, r4
 800ab5a:	d004      	beq.n	800ab66 <strcspn+0x1e>
 800ab5c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800ab60:	2d00      	cmp	r5, #0
 800ab62:	d1f9      	bne.n	800ab58 <strcspn+0x10>
 800ab64:	e7f2      	b.n	800ab4c <strcspn+0x4>
 800ab66:	1a30      	subs	r0, r6, r0
 800ab68:	bd70      	pop	{r4, r5, r6, pc}

0800ab6a <strstr>:
 800ab6a:	780a      	ldrb	r2, [r1, #0]
 800ab6c:	b570      	push	{r4, r5, r6, lr}
 800ab6e:	b96a      	cbnz	r2, 800ab8c <strstr+0x22>
 800ab70:	bd70      	pop	{r4, r5, r6, pc}
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d109      	bne.n	800ab8a <strstr+0x20>
 800ab76:	460c      	mov	r4, r1
 800ab78:	4605      	mov	r5, r0
 800ab7a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d0f6      	beq.n	800ab70 <strstr+0x6>
 800ab82:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ab86:	429e      	cmp	r6, r3
 800ab88:	d0f7      	beq.n	800ab7a <strstr+0x10>
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	7803      	ldrb	r3, [r0, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1ef      	bne.n	800ab72 <strstr+0x8>
 800ab92:	4618      	mov	r0, r3
 800ab94:	e7ec      	b.n	800ab70 <strstr+0x6>
	...

0800ab98 <_strtol_l.constprop.0>:
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9e:	d001      	beq.n	800aba4 <_strtol_l.constprop.0+0xc>
 800aba0:	2b24      	cmp	r3, #36	; 0x24
 800aba2:	d906      	bls.n	800abb2 <_strtol_l.constprop.0+0x1a>
 800aba4:	f7ff fada 	bl	800a15c <__errno>
 800aba8:	2316      	movs	r3, #22
 800abaa:	6003      	str	r3, [r0, #0]
 800abac:	2000      	movs	r0, #0
 800abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac98 <_strtol_l.constprop.0+0x100>
 800abb6:	460d      	mov	r5, r1
 800abb8:	462e      	mov	r6, r5
 800abba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800abc2:	f017 0708 	ands.w	r7, r7, #8
 800abc6:	d1f7      	bne.n	800abb8 <_strtol_l.constprop.0+0x20>
 800abc8:	2c2d      	cmp	r4, #45	; 0x2d
 800abca:	d132      	bne.n	800ac32 <_strtol_l.constprop.0+0x9a>
 800abcc:	782c      	ldrb	r4, [r5, #0]
 800abce:	2701      	movs	r7, #1
 800abd0:	1cb5      	adds	r5, r6, #2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d05b      	beq.n	800ac8e <_strtol_l.constprop.0+0xf6>
 800abd6:	2b10      	cmp	r3, #16
 800abd8:	d109      	bne.n	800abee <_strtol_l.constprop.0+0x56>
 800abda:	2c30      	cmp	r4, #48	; 0x30
 800abdc:	d107      	bne.n	800abee <_strtol_l.constprop.0+0x56>
 800abde:	782c      	ldrb	r4, [r5, #0]
 800abe0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800abe4:	2c58      	cmp	r4, #88	; 0x58
 800abe6:	d14d      	bne.n	800ac84 <_strtol_l.constprop.0+0xec>
 800abe8:	786c      	ldrb	r4, [r5, #1]
 800abea:	2310      	movs	r3, #16
 800abec:	3502      	adds	r5, #2
 800abee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800abf2:	f108 38ff 	add.w	r8, r8, #4294967295
 800abf6:	f04f 0c00 	mov.w	ip, #0
 800abfa:	fbb8 f9f3 	udiv	r9, r8, r3
 800abfe:	4666      	mov	r6, ip
 800ac00:	fb03 8a19 	mls	sl, r3, r9, r8
 800ac04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ac08:	f1be 0f09 	cmp.w	lr, #9
 800ac0c:	d816      	bhi.n	800ac3c <_strtol_l.constprop.0+0xa4>
 800ac0e:	4674      	mov	r4, lr
 800ac10:	42a3      	cmp	r3, r4
 800ac12:	dd24      	ble.n	800ac5e <_strtol_l.constprop.0+0xc6>
 800ac14:	f1bc 0f00 	cmp.w	ip, #0
 800ac18:	db1e      	blt.n	800ac58 <_strtol_l.constprop.0+0xc0>
 800ac1a:	45b1      	cmp	r9, r6
 800ac1c:	d31c      	bcc.n	800ac58 <_strtol_l.constprop.0+0xc0>
 800ac1e:	d101      	bne.n	800ac24 <_strtol_l.constprop.0+0x8c>
 800ac20:	45a2      	cmp	sl, r4
 800ac22:	db19      	blt.n	800ac58 <_strtol_l.constprop.0+0xc0>
 800ac24:	fb06 4603 	mla	r6, r6, r3, r4
 800ac28:	f04f 0c01 	mov.w	ip, #1
 800ac2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac30:	e7e8      	b.n	800ac04 <_strtol_l.constprop.0+0x6c>
 800ac32:	2c2b      	cmp	r4, #43	; 0x2b
 800ac34:	bf04      	itt	eq
 800ac36:	782c      	ldrbeq	r4, [r5, #0]
 800ac38:	1cb5      	addeq	r5, r6, #2
 800ac3a:	e7ca      	b.n	800abd2 <_strtol_l.constprop.0+0x3a>
 800ac3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ac40:	f1be 0f19 	cmp.w	lr, #25
 800ac44:	d801      	bhi.n	800ac4a <_strtol_l.constprop.0+0xb2>
 800ac46:	3c37      	subs	r4, #55	; 0x37
 800ac48:	e7e2      	b.n	800ac10 <_strtol_l.constprop.0+0x78>
 800ac4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ac4e:	f1be 0f19 	cmp.w	lr, #25
 800ac52:	d804      	bhi.n	800ac5e <_strtol_l.constprop.0+0xc6>
 800ac54:	3c57      	subs	r4, #87	; 0x57
 800ac56:	e7db      	b.n	800ac10 <_strtol_l.constprop.0+0x78>
 800ac58:	f04f 3cff 	mov.w	ip, #4294967295
 800ac5c:	e7e6      	b.n	800ac2c <_strtol_l.constprop.0+0x94>
 800ac5e:	f1bc 0f00 	cmp.w	ip, #0
 800ac62:	da05      	bge.n	800ac70 <_strtol_l.constprop.0+0xd8>
 800ac64:	2322      	movs	r3, #34	; 0x22
 800ac66:	6003      	str	r3, [r0, #0]
 800ac68:	4646      	mov	r6, r8
 800ac6a:	b942      	cbnz	r2, 800ac7e <_strtol_l.constprop.0+0xe6>
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	e79e      	b.n	800abae <_strtol_l.constprop.0+0x16>
 800ac70:	b107      	cbz	r7, 800ac74 <_strtol_l.constprop.0+0xdc>
 800ac72:	4276      	negs	r6, r6
 800ac74:	2a00      	cmp	r2, #0
 800ac76:	d0f9      	beq.n	800ac6c <_strtol_l.constprop.0+0xd4>
 800ac78:	f1bc 0f00 	cmp.w	ip, #0
 800ac7c:	d000      	beq.n	800ac80 <_strtol_l.constprop.0+0xe8>
 800ac7e:	1e69      	subs	r1, r5, #1
 800ac80:	6011      	str	r1, [r2, #0]
 800ac82:	e7f3      	b.n	800ac6c <_strtol_l.constprop.0+0xd4>
 800ac84:	2430      	movs	r4, #48	; 0x30
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1b1      	bne.n	800abee <_strtol_l.constprop.0+0x56>
 800ac8a:	2308      	movs	r3, #8
 800ac8c:	e7af      	b.n	800abee <_strtol_l.constprop.0+0x56>
 800ac8e:	2c30      	cmp	r4, #48	; 0x30
 800ac90:	d0a5      	beq.n	800abde <_strtol_l.constprop.0+0x46>
 800ac92:	230a      	movs	r3, #10
 800ac94:	e7ab      	b.n	800abee <_strtol_l.constprop.0+0x56>
 800ac96:	bf00      	nop
 800ac98:	0800e685 	.word	0x0800e685

0800ac9c <strtol>:
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	460a      	mov	r2, r1
 800aca0:	4601      	mov	r1, r0
 800aca2:	4802      	ldr	r0, [pc, #8]	; (800acac <strtol+0x10>)
 800aca4:	6800      	ldr	r0, [r0, #0]
 800aca6:	f7ff bf77 	b.w	800ab98 <_strtol_l.constprop.0>
 800acaa:	bf00      	nop
 800acac:	2000001c 	.word	0x2000001c

0800acb0 <quorem>:
 800acb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	6903      	ldr	r3, [r0, #16]
 800acb6:	690c      	ldr	r4, [r1, #16]
 800acb8:	42a3      	cmp	r3, r4
 800acba:	4607      	mov	r7, r0
 800acbc:	f2c0 8081 	blt.w	800adc2 <quorem+0x112>
 800acc0:	3c01      	subs	r4, #1
 800acc2:	f101 0814 	add.w	r8, r1, #20
 800acc6:	f100 0514 	add.w	r5, r0, #20
 800acca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800acd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acd8:	3301      	adds	r3, #1
 800acda:	429a      	cmp	r2, r3
 800acdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ace0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ace4:	fbb2 f6f3 	udiv	r6, r2, r3
 800ace8:	d331      	bcc.n	800ad4e <quorem+0x9e>
 800acea:	f04f 0e00 	mov.w	lr, #0
 800acee:	4640      	mov	r0, r8
 800acf0:	46ac      	mov	ip, r5
 800acf2:	46f2      	mov	sl, lr
 800acf4:	f850 2b04 	ldr.w	r2, [r0], #4
 800acf8:	b293      	uxth	r3, r2
 800acfa:	fb06 e303 	mla	r3, r6, r3, lr
 800acfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	ebaa 0303 	sub.w	r3, sl, r3
 800ad08:	f8dc a000 	ldr.w	sl, [ip]
 800ad0c:	0c12      	lsrs	r2, r2, #16
 800ad0e:	fa13 f38a 	uxtah	r3, r3, sl
 800ad12:	fb06 e202 	mla	r2, r6, r2, lr
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	9b00      	ldr	r3, [sp, #0]
 800ad1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ad1e:	b292      	uxth	r2, r2
 800ad20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ad24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad28:	f8bd 3000 	ldrh.w	r3, [sp]
 800ad2c:	4581      	cmp	r9, r0
 800ad2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad32:	f84c 3b04 	str.w	r3, [ip], #4
 800ad36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ad3a:	d2db      	bcs.n	800acf4 <quorem+0x44>
 800ad3c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ad40:	b92b      	cbnz	r3, 800ad4e <quorem+0x9e>
 800ad42:	9b01      	ldr	r3, [sp, #4]
 800ad44:	3b04      	subs	r3, #4
 800ad46:	429d      	cmp	r5, r3
 800ad48:	461a      	mov	r2, r3
 800ad4a:	d32e      	bcc.n	800adaa <quorem+0xfa>
 800ad4c:	613c      	str	r4, [r7, #16]
 800ad4e:	4638      	mov	r0, r7
 800ad50:	f001 faea 	bl	800c328 <__mcmp>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	db24      	blt.n	800ada2 <quorem+0xf2>
 800ad58:	3601      	adds	r6, #1
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	f04f 0c00 	mov.w	ip, #0
 800ad60:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad64:	f8d0 e000 	ldr.w	lr, [r0]
 800ad68:	b293      	uxth	r3, r2
 800ad6a:	ebac 0303 	sub.w	r3, ip, r3
 800ad6e:	0c12      	lsrs	r2, r2, #16
 800ad70:	fa13 f38e 	uxtah	r3, r3, lr
 800ad74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ad78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad82:	45c1      	cmp	r9, r8
 800ad84:	f840 3b04 	str.w	r3, [r0], #4
 800ad88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ad8c:	d2e8      	bcs.n	800ad60 <quorem+0xb0>
 800ad8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad96:	b922      	cbnz	r2, 800ada2 <quorem+0xf2>
 800ad98:	3b04      	subs	r3, #4
 800ad9a:	429d      	cmp	r5, r3
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	d30a      	bcc.n	800adb6 <quorem+0x106>
 800ada0:	613c      	str	r4, [r7, #16]
 800ada2:	4630      	mov	r0, r6
 800ada4:	b003      	add	sp, #12
 800ada6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adaa:	6812      	ldr	r2, [r2, #0]
 800adac:	3b04      	subs	r3, #4
 800adae:	2a00      	cmp	r2, #0
 800adb0:	d1cc      	bne.n	800ad4c <quorem+0x9c>
 800adb2:	3c01      	subs	r4, #1
 800adb4:	e7c7      	b.n	800ad46 <quorem+0x96>
 800adb6:	6812      	ldr	r2, [r2, #0]
 800adb8:	3b04      	subs	r3, #4
 800adba:	2a00      	cmp	r2, #0
 800adbc:	d1f0      	bne.n	800ada0 <quorem+0xf0>
 800adbe:	3c01      	subs	r4, #1
 800adc0:	e7eb      	b.n	800ad9a <quorem+0xea>
 800adc2:	2000      	movs	r0, #0
 800adc4:	e7ee      	b.n	800ada4 <quorem+0xf4>
	...

0800adc8 <_dtoa_r>:
 800adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	ed2d 8b04 	vpush	{d8-d9}
 800add0:	ec57 6b10 	vmov	r6, r7, d0
 800add4:	b093      	sub	sp, #76	; 0x4c
 800add6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800add8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800addc:	9106      	str	r1, [sp, #24]
 800adde:	ee10 aa10 	vmov	sl, s0
 800ade2:	4604      	mov	r4, r0
 800ade4:	9209      	str	r2, [sp, #36]	; 0x24
 800ade6:	930c      	str	r3, [sp, #48]	; 0x30
 800ade8:	46bb      	mov	fp, r7
 800adea:	b975      	cbnz	r5, 800ae0a <_dtoa_r+0x42>
 800adec:	2010      	movs	r0, #16
 800adee:	f001 f811 	bl	800be14 <malloc>
 800adf2:	4602      	mov	r2, r0
 800adf4:	6260      	str	r0, [r4, #36]	; 0x24
 800adf6:	b920      	cbnz	r0, 800ae02 <_dtoa_r+0x3a>
 800adf8:	4ba7      	ldr	r3, [pc, #668]	; (800b098 <_dtoa_r+0x2d0>)
 800adfa:	21ea      	movs	r1, #234	; 0xea
 800adfc:	48a7      	ldr	r0, [pc, #668]	; (800b09c <_dtoa_r+0x2d4>)
 800adfe:	f002 f8bb 	bl	800cf78 <__assert_func>
 800ae02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae06:	6005      	str	r5, [r0, #0]
 800ae08:	60c5      	str	r5, [r0, #12]
 800ae0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae0c:	6819      	ldr	r1, [r3, #0]
 800ae0e:	b151      	cbz	r1, 800ae26 <_dtoa_r+0x5e>
 800ae10:	685a      	ldr	r2, [r3, #4]
 800ae12:	604a      	str	r2, [r1, #4]
 800ae14:	2301      	movs	r3, #1
 800ae16:	4093      	lsls	r3, r2
 800ae18:	608b      	str	r3, [r1, #8]
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f001 f842 	bl	800bea4 <_Bfree>
 800ae20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	1e3b      	subs	r3, r7, #0
 800ae28:	bfaa      	itet	ge
 800ae2a:	2300      	movge	r3, #0
 800ae2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ae30:	f8c8 3000 	strge.w	r3, [r8]
 800ae34:	4b9a      	ldr	r3, [pc, #616]	; (800b0a0 <_dtoa_r+0x2d8>)
 800ae36:	bfbc      	itt	lt
 800ae38:	2201      	movlt	r2, #1
 800ae3a:	f8c8 2000 	strlt.w	r2, [r8]
 800ae3e:	ea33 030b 	bics.w	r3, r3, fp
 800ae42:	d11b      	bne.n	800ae7c <_dtoa_r+0xb4>
 800ae44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae46:	f242 730f 	movw	r3, #9999	; 0x270f
 800ae4a:	6013      	str	r3, [r2, #0]
 800ae4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae50:	4333      	orrs	r3, r6
 800ae52:	f000 8592 	beq.w	800b97a <_dtoa_r+0xbb2>
 800ae56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae58:	b963      	cbnz	r3, 800ae74 <_dtoa_r+0xac>
 800ae5a:	4b92      	ldr	r3, [pc, #584]	; (800b0a4 <_dtoa_r+0x2dc>)
 800ae5c:	e022      	b.n	800aea4 <_dtoa_r+0xdc>
 800ae5e:	4b92      	ldr	r3, [pc, #584]	; (800b0a8 <_dtoa_r+0x2e0>)
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	3308      	adds	r3, #8
 800ae64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae66:	6013      	str	r3, [r2, #0]
 800ae68:	9801      	ldr	r0, [sp, #4]
 800ae6a:	b013      	add	sp, #76	; 0x4c
 800ae6c:	ecbd 8b04 	vpop	{d8-d9}
 800ae70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae74:	4b8b      	ldr	r3, [pc, #556]	; (800b0a4 <_dtoa_r+0x2dc>)
 800ae76:	9301      	str	r3, [sp, #4]
 800ae78:	3303      	adds	r3, #3
 800ae7a:	e7f3      	b.n	800ae64 <_dtoa_r+0x9c>
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	2300      	movs	r3, #0
 800ae80:	4650      	mov	r0, sl
 800ae82:	4659      	mov	r1, fp
 800ae84:	f7f5 fe20 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae88:	ec4b ab19 	vmov	d9, sl, fp
 800ae8c:	4680      	mov	r8, r0
 800ae8e:	b158      	cbz	r0, 800aea8 <_dtoa_r+0xe0>
 800ae90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae92:	2301      	movs	r3, #1
 800ae94:	6013      	str	r3, [r2, #0]
 800ae96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f000 856b 	beq.w	800b974 <_dtoa_r+0xbac>
 800ae9e:	4883      	ldr	r0, [pc, #524]	; (800b0ac <_dtoa_r+0x2e4>)
 800aea0:	6018      	str	r0, [r3, #0]
 800aea2:	1e43      	subs	r3, r0, #1
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	e7df      	b.n	800ae68 <_dtoa_r+0xa0>
 800aea8:	ec4b ab10 	vmov	d0, sl, fp
 800aeac:	aa10      	add	r2, sp, #64	; 0x40
 800aeae:	a911      	add	r1, sp, #68	; 0x44
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f001 fadf 	bl	800c474 <__d2b>
 800aeb6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aeba:	ee08 0a10 	vmov	s16, r0
 800aebe:	2d00      	cmp	r5, #0
 800aec0:	f000 8084 	beq.w	800afcc <_dtoa_r+0x204>
 800aec4:	ee19 3a90 	vmov	r3, s19
 800aec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aecc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aed0:	4656      	mov	r6, sl
 800aed2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aed6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aeda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800aede:	4b74      	ldr	r3, [pc, #464]	; (800b0b0 <_dtoa_r+0x2e8>)
 800aee0:	2200      	movs	r2, #0
 800aee2:	4630      	mov	r0, r6
 800aee4:	4639      	mov	r1, r7
 800aee6:	f7f5 f9cf 	bl	8000288 <__aeabi_dsub>
 800aeea:	a365      	add	r3, pc, #404	; (adr r3, 800b080 <_dtoa_r+0x2b8>)
 800aeec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef0:	f7f5 fb82 	bl	80005f8 <__aeabi_dmul>
 800aef4:	a364      	add	r3, pc, #400	; (adr r3, 800b088 <_dtoa_r+0x2c0>)
 800aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefa:	f7f5 f9c7 	bl	800028c <__adddf3>
 800aefe:	4606      	mov	r6, r0
 800af00:	4628      	mov	r0, r5
 800af02:	460f      	mov	r7, r1
 800af04:	f7f5 fb0e 	bl	8000524 <__aeabi_i2d>
 800af08:	a361      	add	r3, pc, #388	; (adr r3, 800b090 <_dtoa_r+0x2c8>)
 800af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0e:	f7f5 fb73 	bl	80005f8 <__aeabi_dmul>
 800af12:	4602      	mov	r2, r0
 800af14:	460b      	mov	r3, r1
 800af16:	4630      	mov	r0, r6
 800af18:	4639      	mov	r1, r7
 800af1a:	f7f5 f9b7 	bl	800028c <__adddf3>
 800af1e:	4606      	mov	r6, r0
 800af20:	460f      	mov	r7, r1
 800af22:	f7f5 fe19 	bl	8000b58 <__aeabi_d2iz>
 800af26:	2200      	movs	r2, #0
 800af28:	9000      	str	r0, [sp, #0]
 800af2a:	2300      	movs	r3, #0
 800af2c:	4630      	mov	r0, r6
 800af2e:	4639      	mov	r1, r7
 800af30:	f7f5 fdd4 	bl	8000adc <__aeabi_dcmplt>
 800af34:	b150      	cbz	r0, 800af4c <_dtoa_r+0x184>
 800af36:	9800      	ldr	r0, [sp, #0]
 800af38:	f7f5 faf4 	bl	8000524 <__aeabi_i2d>
 800af3c:	4632      	mov	r2, r6
 800af3e:	463b      	mov	r3, r7
 800af40:	f7f5 fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800af44:	b910      	cbnz	r0, 800af4c <_dtoa_r+0x184>
 800af46:	9b00      	ldr	r3, [sp, #0]
 800af48:	3b01      	subs	r3, #1
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	9b00      	ldr	r3, [sp, #0]
 800af4e:	2b16      	cmp	r3, #22
 800af50:	d85a      	bhi.n	800b008 <_dtoa_r+0x240>
 800af52:	9a00      	ldr	r2, [sp, #0]
 800af54:	4b57      	ldr	r3, [pc, #348]	; (800b0b4 <_dtoa_r+0x2ec>)
 800af56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5e:	ec51 0b19 	vmov	r0, r1, d9
 800af62:	f7f5 fdbb 	bl	8000adc <__aeabi_dcmplt>
 800af66:	2800      	cmp	r0, #0
 800af68:	d050      	beq.n	800b00c <_dtoa_r+0x244>
 800af6a:	9b00      	ldr	r3, [sp, #0]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	2300      	movs	r3, #0
 800af72:	930b      	str	r3, [sp, #44]	; 0x2c
 800af74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af76:	1b5d      	subs	r5, r3, r5
 800af78:	1e6b      	subs	r3, r5, #1
 800af7a:	9305      	str	r3, [sp, #20]
 800af7c:	bf45      	ittet	mi
 800af7e:	f1c5 0301 	rsbmi	r3, r5, #1
 800af82:	9304      	strmi	r3, [sp, #16]
 800af84:	2300      	movpl	r3, #0
 800af86:	2300      	movmi	r3, #0
 800af88:	bf4c      	ite	mi
 800af8a:	9305      	strmi	r3, [sp, #20]
 800af8c:	9304      	strpl	r3, [sp, #16]
 800af8e:	9b00      	ldr	r3, [sp, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	db3d      	blt.n	800b010 <_dtoa_r+0x248>
 800af94:	9b05      	ldr	r3, [sp, #20]
 800af96:	9a00      	ldr	r2, [sp, #0]
 800af98:	920a      	str	r2, [sp, #40]	; 0x28
 800af9a:	4413      	add	r3, r2
 800af9c:	9305      	str	r3, [sp, #20]
 800af9e:	2300      	movs	r3, #0
 800afa0:	9307      	str	r3, [sp, #28]
 800afa2:	9b06      	ldr	r3, [sp, #24]
 800afa4:	2b09      	cmp	r3, #9
 800afa6:	f200 8089 	bhi.w	800b0bc <_dtoa_r+0x2f4>
 800afaa:	2b05      	cmp	r3, #5
 800afac:	bfc4      	itt	gt
 800afae:	3b04      	subgt	r3, #4
 800afb0:	9306      	strgt	r3, [sp, #24]
 800afb2:	9b06      	ldr	r3, [sp, #24]
 800afb4:	f1a3 0302 	sub.w	r3, r3, #2
 800afb8:	bfcc      	ite	gt
 800afba:	2500      	movgt	r5, #0
 800afbc:	2501      	movle	r5, #1
 800afbe:	2b03      	cmp	r3, #3
 800afc0:	f200 8087 	bhi.w	800b0d2 <_dtoa_r+0x30a>
 800afc4:	e8df f003 	tbb	[pc, r3]
 800afc8:	59383a2d 	.word	0x59383a2d
 800afcc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800afd0:	441d      	add	r5, r3
 800afd2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800afd6:	2b20      	cmp	r3, #32
 800afd8:	bfc1      	itttt	gt
 800afda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800afde:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800afe2:	fa0b f303 	lslgt.w	r3, fp, r3
 800afe6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800afea:	bfda      	itte	le
 800afec:	f1c3 0320 	rsble	r3, r3, #32
 800aff0:	fa06 f003 	lslle.w	r0, r6, r3
 800aff4:	4318      	orrgt	r0, r3
 800aff6:	f7f5 fa85 	bl	8000504 <__aeabi_ui2d>
 800affa:	2301      	movs	r3, #1
 800affc:	4606      	mov	r6, r0
 800affe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b002:	3d01      	subs	r5, #1
 800b004:	930e      	str	r3, [sp, #56]	; 0x38
 800b006:	e76a      	b.n	800aede <_dtoa_r+0x116>
 800b008:	2301      	movs	r3, #1
 800b00a:	e7b2      	b.n	800af72 <_dtoa_r+0x1aa>
 800b00c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b00e:	e7b1      	b.n	800af74 <_dtoa_r+0x1ac>
 800b010:	9b04      	ldr	r3, [sp, #16]
 800b012:	9a00      	ldr	r2, [sp, #0]
 800b014:	1a9b      	subs	r3, r3, r2
 800b016:	9304      	str	r3, [sp, #16]
 800b018:	4253      	negs	r3, r2
 800b01a:	9307      	str	r3, [sp, #28]
 800b01c:	2300      	movs	r3, #0
 800b01e:	930a      	str	r3, [sp, #40]	; 0x28
 800b020:	e7bf      	b.n	800afa2 <_dtoa_r+0x1da>
 800b022:	2300      	movs	r3, #0
 800b024:	9308      	str	r3, [sp, #32]
 800b026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b028:	2b00      	cmp	r3, #0
 800b02a:	dc55      	bgt.n	800b0d8 <_dtoa_r+0x310>
 800b02c:	2301      	movs	r3, #1
 800b02e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b032:	461a      	mov	r2, r3
 800b034:	9209      	str	r2, [sp, #36]	; 0x24
 800b036:	e00c      	b.n	800b052 <_dtoa_r+0x28a>
 800b038:	2301      	movs	r3, #1
 800b03a:	e7f3      	b.n	800b024 <_dtoa_r+0x25c>
 800b03c:	2300      	movs	r3, #0
 800b03e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b040:	9308      	str	r3, [sp, #32]
 800b042:	9b00      	ldr	r3, [sp, #0]
 800b044:	4413      	add	r3, r2
 800b046:	9302      	str	r3, [sp, #8]
 800b048:	3301      	adds	r3, #1
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	9303      	str	r3, [sp, #12]
 800b04e:	bfb8      	it	lt
 800b050:	2301      	movlt	r3, #1
 800b052:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b054:	2200      	movs	r2, #0
 800b056:	6042      	str	r2, [r0, #4]
 800b058:	2204      	movs	r2, #4
 800b05a:	f102 0614 	add.w	r6, r2, #20
 800b05e:	429e      	cmp	r6, r3
 800b060:	6841      	ldr	r1, [r0, #4]
 800b062:	d93d      	bls.n	800b0e0 <_dtoa_r+0x318>
 800b064:	4620      	mov	r0, r4
 800b066:	f000 fedd 	bl	800be24 <_Balloc>
 800b06a:	9001      	str	r0, [sp, #4]
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d13b      	bne.n	800b0e8 <_dtoa_r+0x320>
 800b070:	4b11      	ldr	r3, [pc, #68]	; (800b0b8 <_dtoa_r+0x2f0>)
 800b072:	4602      	mov	r2, r0
 800b074:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b078:	e6c0      	b.n	800adfc <_dtoa_r+0x34>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e7df      	b.n	800b03e <_dtoa_r+0x276>
 800b07e:	bf00      	nop
 800b080:	636f4361 	.word	0x636f4361
 800b084:	3fd287a7 	.word	0x3fd287a7
 800b088:	8b60c8b3 	.word	0x8b60c8b3
 800b08c:	3fc68a28 	.word	0x3fc68a28
 800b090:	509f79fb 	.word	0x509f79fb
 800b094:	3fd34413 	.word	0x3fd34413
 800b098:	0800e792 	.word	0x0800e792
 800b09c:	0800e7a9 	.word	0x0800e7a9
 800b0a0:	7ff00000 	.word	0x7ff00000
 800b0a4:	0800e78e 	.word	0x0800e78e
 800b0a8:	0800e785 	.word	0x0800e785
 800b0ac:	0800e661 	.word	0x0800e661
 800b0b0:	3ff80000 	.word	0x3ff80000
 800b0b4:	0800e900 	.word	0x0800e900
 800b0b8:	0800e804 	.word	0x0800e804
 800b0bc:	2501      	movs	r5, #1
 800b0be:	2300      	movs	r3, #0
 800b0c0:	9306      	str	r3, [sp, #24]
 800b0c2:	9508      	str	r5, [sp, #32]
 800b0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	2312      	movs	r3, #18
 800b0d0:	e7b0      	b.n	800b034 <_dtoa_r+0x26c>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	9308      	str	r3, [sp, #32]
 800b0d6:	e7f5      	b.n	800b0c4 <_dtoa_r+0x2fc>
 800b0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0de:	e7b8      	b.n	800b052 <_dtoa_r+0x28a>
 800b0e0:	3101      	adds	r1, #1
 800b0e2:	6041      	str	r1, [r0, #4]
 800b0e4:	0052      	lsls	r2, r2, #1
 800b0e6:	e7b8      	b.n	800b05a <_dtoa_r+0x292>
 800b0e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0ea:	9a01      	ldr	r2, [sp, #4]
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	2b0e      	cmp	r3, #14
 800b0f2:	f200 809d 	bhi.w	800b230 <_dtoa_r+0x468>
 800b0f6:	2d00      	cmp	r5, #0
 800b0f8:	f000 809a 	beq.w	800b230 <_dtoa_r+0x468>
 800b0fc:	9b00      	ldr	r3, [sp, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	dd32      	ble.n	800b168 <_dtoa_r+0x3a0>
 800b102:	4ab7      	ldr	r2, [pc, #732]	; (800b3e0 <_dtoa_r+0x618>)
 800b104:	f003 030f 	and.w	r3, r3, #15
 800b108:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b10c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b110:	9b00      	ldr	r3, [sp, #0]
 800b112:	05d8      	lsls	r0, r3, #23
 800b114:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b118:	d516      	bpl.n	800b148 <_dtoa_r+0x380>
 800b11a:	4bb2      	ldr	r3, [pc, #712]	; (800b3e4 <_dtoa_r+0x61c>)
 800b11c:	ec51 0b19 	vmov	r0, r1, d9
 800b120:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b124:	f7f5 fb92 	bl	800084c <__aeabi_ddiv>
 800b128:	f007 070f 	and.w	r7, r7, #15
 800b12c:	4682      	mov	sl, r0
 800b12e:	468b      	mov	fp, r1
 800b130:	2503      	movs	r5, #3
 800b132:	4eac      	ldr	r6, [pc, #688]	; (800b3e4 <_dtoa_r+0x61c>)
 800b134:	b957      	cbnz	r7, 800b14c <_dtoa_r+0x384>
 800b136:	4642      	mov	r2, r8
 800b138:	464b      	mov	r3, r9
 800b13a:	4650      	mov	r0, sl
 800b13c:	4659      	mov	r1, fp
 800b13e:	f7f5 fb85 	bl	800084c <__aeabi_ddiv>
 800b142:	4682      	mov	sl, r0
 800b144:	468b      	mov	fp, r1
 800b146:	e028      	b.n	800b19a <_dtoa_r+0x3d2>
 800b148:	2502      	movs	r5, #2
 800b14a:	e7f2      	b.n	800b132 <_dtoa_r+0x36a>
 800b14c:	07f9      	lsls	r1, r7, #31
 800b14e:	d508      	bpl.n	800b162 <_dtoa_r+0x39a>
 800b150:	4640      	mov	r0, r8
 800b152:	4649      	mov	r1, r9
 800b154:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b158:	f7f5 fa4e 	bl	80005f8 <__aeabi_dmul>
 800b15c:	3501      	adds	r5, #1
 800b15e:	4680      	mov	r8, r0
 800b160:	4689      	mov	r9, r1
 800b162:	107f      	asrs	r7, r7, #1
 800b164:	3608      	adds	r6, #8
 800b166:	e7e5      	b.n	800b134 <_dtoa_r+0x36c>
 800b168:	f000 809b 	beq.w	800b2a2 <_dtoa_r+0x4da>
 800b16c:	9b00      	ldr	r3, [sp, #0]
 800b16e:	4f9d      	ldr	r7, [pc, #628]	; (800b3e4 <_dtoa_r+0x61c>)
 800b170:	425e      	negs	r6, r3
 800b172:	4b9b      	ldr	r3, [pc, #620]	; (800b3e0 <_dtoa_r+0x618>)
 800b174:	f006 020f 	and.w	r2, r6, #15
 800b178:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	ec51 0b19 	vmov	r0, r1, d9
 800b184:	f7f5 fa38 	bl	80005f8 <__aeabi_dmul>
 800b188:	1136      	asrs	r6, r6, #4
 800b18a:	4682      	mov	sl, r0
 800b18c:	468b      	mov	fp, r1
 800b18e:	2300      	movs	r3, #0
 800b190:	2502      	movs	r5, #2
 800b192:	2e00      	cmp	r6, #0
 800b194:	d17a      	bne.n	800b28c <_dtoa_r+0x4c4>
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1d3      	bne.n	800b142 <_dtoa_r+0x37a>
 800b19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	f000 8082 	beq.w	800b2a6 <_dtoa_r+0x4de>
 800b1a2:	4b91      	ldr	r3, [pc, #580]	; (800b3e8 <_dtoa_r+0x620>)
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	4650      	mov	r0, sl
 800b1a8:	4659      	mov	r1, fp
 800b1aa:	f7f5 fc97 	bl	8000adc <__aeabi_dcmplt>
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	d079      	beq.n	800b2a6 <_dtoa_r+0x4de>
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d076      	beq.n	800b2a6 <_dtoa_r+0x4de>
 800b1b8:	9b02      	ldr	r3, [sp, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	dd36      	ble.n	800b22c <_dtoa_r+0x464>
 800b1be:	9b00      	ldr	r3, [sp, #0]
 800b1c0:	4650      	mov	r0, sl
 800b1c2:	4659      	mov	r1, fp
 800b1c4:	1e5f      	subs	r7, r3, #1
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	4b88      	ldr	r3, [pc, #544]	; (800b3ec <_dtoa_r+0x624>)
 800b1ca:	f7f5 fa15 	bl	80005f8 <__aeabi_dmul>
 800b1ce:	9e02      	ldr	r6, [sp, #8]
 800b1d0:	4682      	mov	sl, r0
 800b1d2:	468b      	mov	fp, r1
 800b1d4:	3501      	adds	r5, #1
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	f7f5 f9a4 	bl	8000524 <__aeabi_i2d>
 800b1dc:	4652      	mov	r2, sl
 800b1de:	465b      	mov	r3, fp
 800b1e0:	f7f5 fa0a 	bl	80005f8 <__aeabi_dmul>
 800b1e4:	4b82      	ldr	r3, [pc, #520]	; (800b3f0 <_dtoa_r+0x628>)
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f7f5 f850 	bl	800028c <__adddf3>
 800b1ec:	46d0      	mov	r8, sl
 800b1ee:	46d9      	mov	r9, fp
 800b1f0:	4682      	mov	sl, r0
 800b1f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b1f6:	2e00      	cmp	r6, #0
 800b1f8:	d158      	bne.n	800b2ac <_dtoa_r+0x4e4>
 800b1fa:	4b7e      	ldr	r3, [pc, #504]	; (800b3f4 <_dtoa_r+0x62c>)
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4640      	mov	r0, r8
 800b200:	4649      	mov	r1, r9
 800b202:	f7f5 f841 	bl	8000288 <__aeabi_dsub>
 800b206:	4652      	mov	r2, sl
 800b208:	465b      	mov	r3, fp
 800b20a:	4680      	mov	r8, r0
 800b20c:	4689      	mov	r9, r1
 800b20e:	f7f5 fc83 	bl	8000b18 <__aeabi_dcmpgt>
 800b212:	2800      	cmp	r0, #0
 800b214:	f040 8295 	bne.w	800b742 <_dtoa_r+0x97a>
 800b218:	4652      	mov	r2, sl
 800b21a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b21e:	4640      	mov	r0, r8
 800b220:	4649      	mov	r1, r9
 800b222:	f7f5 fc5b 	bl	8000adc <__aeabi_dcmplt>
 800b226:	2800      	cmp	r0, #0
 800b228:	f040 8289 	bne.w	800b73e <_dtoa_r+0x976>
 800b22c:	ec5b ab19 	vmov	sl, fp, d9
 800b230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b232:	2b00      	cmp	r3, #0
 800b234:	f2c0 8148 	blt.w	800b4c8 <_dtoa_r+0x700>
 800b238:	9a00      	ldr	r2, [sp, #0]
 800b23a:	2a0e      	cmp	r2, #14
 800b23c:	f300 8144 	bgt.w	800b4c8 <_dtoa_r+0x700>
 800b240:	4b67      	ldr	r3, [pc, #412]	; (800b3e0 <_dtoa_r+0x618>)
 800b242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b246:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b24a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f280 80d5 	bge.w	800b3fc <_dtoa_r+0x634>
 800b252:	9b03      	ldr	r3, [sp, #12]
 800b254:	2b00      	cmp	r3, #0
 800b256:	f300 80d1 	bgt.w	800b3fc <_dtoa_r+0x634>
 800b25a:	f040 826f 	bne.w	800b73c <_dtoa_r+0x974>
 800b25e:	4b65      	ldr	r3, [pc, #404]	; (800b3f4 <_dtoa_r+0x62c>)
 800b260:	2200      	movs	r2, #0
 800b262:	4640      	mov	r0, r8
 800b264:	4649      	mov	r1, r9
 800b266:	f7f5 f9c7 	bl	80005f8 <__aeabi_dmul>
 800b26a:	4652      	mov	r2, sl
 800b26c:	465b      	mov	r3, fp
 800b26e:	f7f5 fc49 	bl	8000b04 <__aeabi_dcmpge>
 800b272:	9e03      	ldr	r6, [sp, #12]
 800b274:	4637      	mov	r7, r6
 800b276:	2800      	cmp	r0, #0
 800b278:	f040 8245 	bne.w	800b706 <_dtoa_r+0x93e>
 800b27c:	9d01      	ldr	r5, [sp, #4]
 800b27e:	2331      	movs	r3, #49	; 0x31
 800b280:	f805 3b01 	strb.w	r3, [r5], #1
 800b284:	9b00      	ldr	r3, [sp, #0]
 800b286:	3301      	adds	r3, #1
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	e240      	b.n	800b70e <_dtoa_r+0x946>
 800b28c:	07f2      	lsls	r2, r6, #31
 800b28e:	d505      	bpl.n	800b29c <_dtoa_r+0x4d4>
 800b290:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b294:	f7f5 f9b0 	bl	80005f8 <__aeabi_dmul>
 800b298:	3501      	adds	r5, #1
 800b29a:	2301      	movs	r3, #1
 800b29c:	1076      	asrs	r6, r6, #1
 800b29e:	3708      	adds	r7, #8
 800b2a0:	e777      	b.n	800b192 <_dtoa_r+0x3ca>
 800b2a2:	2502      	movs	r5, #2
 800b2a4:	e779      	b.n	800b19a <_dtoa_r+0x3d2>
 800b2a6:	9f00      	ldr	r7, [sp, #0]
 800b2a8:	9e03      	ldr	r6, [sp, #12]
 800b2aa:	e794      	b.n	800b1d6 <_dtoa_r+0x40e>
 800b2ac:	9901      	ldr	r1, [sp, #4]
 800b2ae:	4b4c      	ldr	r3, [pc, #304]	; (800b3e0 <_dtoa_r+0x618>)
 800b2b0:	4431      	add	r1, r6
 800b2b2:	910d      	str	r1, [sp, #52]	; 0x34
 800b2b4:	9908      	ldr	r1, [sp, #32]
 800b2b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b2ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2be:	2900      	cmp	r1, #0
 800b2c0:	d043      	beq.n	800b34a <_dtoa_r+0x582>
 800b2c2:	494d      	ldr	r1, [pc, #308]	; (800b3f8 <_dtoa_r+0x630>)
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	f7f5 fac1 	bl	800084c <__aeabi_ddiv>
 800b2ca:	4652      	mov	r2, sl
 800b2cc:	465b      	mov	r3, fp
 800b2ce:	f7f4 ffdb 	bl	8000288 <__aeabi_dsub>
 800b2d2:	9d01      	ldr	r5, [sp, #4]
 800b2d4:	4682      	mov	sl, r0
 800b2d6:	468b      	mov	fp, r1
 800b2d8:	4649      	mov	r1, r9
 800b2da:	4640      	mov	r0, r8
 800b2dc:	f7f5 fc3c 	bl	8000b58 <__aeabi_d2iz>
 800b2e0:	4606      	mov	r6, r0
 800b2e2:	f7f5 f91f 	bl	8000524 <__aeabi_i2d>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	f7f4 ffcb 	bl	8000288 <__aeabi_dsub>
 800b2f2:	3630      	adds	r6, #48	; 0x30
 800b2f4:	f805 6b01 	strb.w	r6, [r5], #1
 800b2f8:	4652      	mov	r2, sl
 800b2fa:	465b      	mov	r3, fp
 800b2fc:	4680      	mov	r8, r0
 800b2fe:	4689      	mov	r9, r1
 800b300:	f7f5 fbec 	bl	8000adc <__aeabi_dcmplt>
 800b304:	2800      	cmp	r0, #0
 800b306:	d163      	bne.n	800b3d0 <_dtoa_r+0x608>
 800b308:	4642      	mov	r2, r8
 800b30a:	464b      	mov	r3, r9
 800b30c:	4936      	ldr	r1, [pc, #216]	; (800b3e8 <_dtoa_r+0x620>)
 800b30e:	2000      	movs	r0, #0
 800b310:	f7f4 ffba 	bl	8000288 <__aeabi_dsub>
 800b314:	4652      	mov	r2, sl
 800b316:	465b      	mov	r3, fp
 800b318:	f7f5 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	f040 80b5 	bne.w	800b48c <_dtoa_r+0x6c4>
 800b322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b324:	429d      	cmp	r5, r3
 800b326:	d081      	beq.n	800b22c <_dtoa_r+0x464>
 800b328:	4b30      	ldr	r3, [pc, #192]	; (800b3ec <_dtoa_r+0x624>)
 800b32a:	2200      	movs	r2, #0
 800b32c:	4650      	mov	r0, sl
 800b32e:	4659      	mov	r1, fp
 800b330:	f7f5 f962 	bl	80005f8 <__aeabi_dmul>
 800b334:	4b2d      	ldr	r3, [pc, #180]	; (800b3ec <_dtoa_r+0x624>)
 800b336:	4682      	mov	sl, r0
 800b338:	468b      	mov	fp, r1
 800b33a:	4640      	mov	r0, r8
 800b33c:	4649      	mov	r1, r9
 800b33e:	2200      	movs	r2, #0
 800b340:	f7f5 f95a 	bl	80005f8 <__aeabi_dmul>
 800b344:	4680      	mov	r8, r0
 800b346:	4689      	mov	r9, r1
 800b348:	e7c6      	b.n	800b2d8 <_dtoa_r+0x510>
 800b34a:	4650      	mov	r0, sl
 800b34c:	4659      	mov	r1, fp
 800b34e:	f7f5 f953 	bl	80005f8 <__aeabi_dmul>
 800b352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b354:	9d01      	ldr	r5, [sp, #4]
 800b356:	930f      	str	r3, [sp, #60]	; 0x3c
 800b358:	4682      	mov	sl, r0
 800b35a:	468b      	mov	fp, r1
 800b35c:	4649      	mov	r1, r9
 800b35e:	4640      	mov	r0, r8
 800b360:	f7f5 fbfa 	bl	8000b58 <__aeabi_d2iz>
 800b364:	4606      	mov	r6, r0
 800b366:	f7f5 f8dd 	bl	8000524 <__aeabi_i2d>
 800b36a:	3630      	adds	r6, #48	; 0x30
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	4640      	mov	r0, r8
 800b372:	4649      	mov	r1, r9
 800b374:	f7f4 ff88 	bl	8000288 <__aeabi_dsub>
 800b378:	f805 6b01 	strb.w	r6, [r5], #1
 800b37c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b37e:	429d      	cmp	r5, r3
 800b380:	4680      	mov	r8, r0
 800b382:	4689      	mov	r9, r1
 800b384:	f04f 0200 	mov.w	r2, #0
 800b388:	d124      	bne.n	800b3d4 <_dtoa_r+0x60c>
 800b38a:	4b1b      	ldr	r3, [pc, #108]	; (800b3f8 <_dtoa_r+0x630>)
 800b38c:	4650      	mov	r0, sl
 800b38e:	4659      	mov	r1, fp
 800b390:	f7f4 ff7c 	bl	800028c <__adddf3>
 800b394:	4602      	mov	r2, r0
 800b396:	460b      	mov	r3, r1
 800b398:	4640      	mov	r0, r8
 800b39a:	4649      	mov	r1, r9
 800b39c:	f7f5 fbbc 	bl	8000b18 <__aeabi_dcmpgt>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d173      	bne.n	800b48c <_dtoa_r+0x6c4>
 800b3a4:	4652      	mov	r2, sl
 800b3a6:	465b      	mov	r3, fp
 800b3a8:	4913      	ldr	r1, [pc, #76]	; (800b3f8 <_dtoa_r+0x630>)
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	f7f4 ff6c 	bl	8000288 <__aeabi_dsub>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	4640      	mov	r0, r8
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	f7f5 fb90 	bl	8000adc <__aeabi_dcmplt>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	f43f af35 	beq.w	800b22c <_dtoa_r+0x464>
 800b3c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b3c4:	1e6b      	subs	r3, r5, #1
 800b3c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b3cc:	2b30      	cmp	r3, #48	; 0x30
 800b3ce:	d0f8      	beq.n	800b3c2 <_dtoa_r+0x5fa>
 800b3d0:	9700      	str	r7, [sp, #0]
 800b3d2:	e049      	b.n	800b468 <_dtoa_r+0x6a0>
 800b3d4:	4b05      	ldr	r3, [pc, #20]	; (800b3ec <_dtoa_r+0x624>)
 800b3d6:	f7f5 f90f 	bl	80005f8 <__aeabi_dmul>
 800b3da:	4680      	mov	r8, r0
 800b3dc:	4689      	mov	r9, r1
 800b3de:	e7bd      	b.n	800b35c <_dtoa_r+0x594>
 800b3e0:	0800e900 	.word	0x0800e900
 800b3e4:	0800e8d8 	.word	0x0800e8d8
 800b3e8:	3ff00000 	.word	0x3ff00000
 800b3ec:	40240000 	.word	0x40240000
 800b3f0:	401c0000 	.word	0x401c0000
 800b3f4:	40140000 	.word	0x40140000
 800b3f8:	3fe00000 	.word	0x3fe00000
 800b3fc:	9d01      	ldr	r5, [sp, #4]
 800b3fe:	4656      	mov	r6, sl
 800b400:	465f      	mov	r7, fp
 800b402:	4642      	mov	r2, r8
 800b404:	464b      	mov	r3, r9
 800b406:	4630      	mov	r0, r6
 800b408:	4639      	mov	r1, r7
 800b40a:	f7f5 fa1f 	bl	800084c <__aeabi_ddiv>
 800b40e:	f7f5 fba3 	bl	8000b58 <__aeabi_d2iz>
 800b412:	4682      	mov	sl, r0
 800b414:	f7f5 f886 	bl	8000524 <__aeabi_i2d>
 800b418:	4642      	mov	r2, r8
 800b41a:	464b      	mov	r3, r9
 800b41c:	f7f5 f8ec 	bl	80005f8 <__aeabi_dmul>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	4630      	mov	r0, r6
 800b426:	4639      	mov	r1, r7
 800b428:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b42c:	f7f4 ff2c 	bl	8000288 <__aeabi_dsub>
 800b430:	f805 6b01 	strb.w	r6, [r5], #1
 800b434:	9e01      	ldr	r6, [sp, #4]
 800b436:	9f03      	ldr	r7, [sp, #12]
 800b438:	1bae      	subs	r6, r5, r6
 800b43a:	42b7      	cmp	r7, r6
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	d135      	bne.n	800b4ae <_dtoa_r+0x6e6>
 800b442:	f7f4 ff23 	bl	800028c <__adddf3>
 800b446:	4642      	mov	r2, r8
 800b448:	464b      	mov	r3, r9
 800b44a:	4606      	mov	r6, r0
 800b44c:	460f      	mov	r7, r1
 800b44e:	f7f5 fb63 	bl	8000b18 <__aeabi_dcmpgt>
 800b452:	b9d0      	cbnz	r0, 800b48a <_dtoa_r+0x6c2>
 800b454:	4642      	mov	r2, r8
 800b456:	464b      	mov	r3, r9
 800b458:	4630      	mov	r0, r6
 800b45a:	4639      	mov	r1, r7
 800b45c:	f7f5 fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 800b460:	b110      	cbz	r0, 800b468 <_dtoa_r+0x6a0>
 800b462:	f01a 0f01 	tst.w	sl, #1
 800b466:	d110      	bne.n	800b48a <_dtoa_r+0x6c2>
 800b468:	4620      	mov	r0, r4
 800b46a:	ee18 1a10 	vmov	r1, s16
 800b46e:	f000 fd19 	bl	800bea4 <_Bfree>
 800b472:	2300      	movs	r3, #0
 800b474:	9800      	ldr	r0, [sp, #0]
 800b476:	702b      	strb	r3, [r5, #0]
 800b478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b47a:	3001      	adds	r0, #1
 800b47c:	6018      	str	r0, [r3, #0]
 800b47e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b480:	2b00      	cmp	r3, #0
 800b482:	f43f acf1 	beq.w	800ae68 <_dtoa_r+0xa0>
 800b486:	601d      	str	r5, [r3, #0]
 800b488:	e4ee      	b.n	800ae68 <_dtoa_r+0xa0>
 800b48a:	9f00      	ldr	r7, [sp, #0]
 800b48c:	462b      	mov	r3, r5
 800b48e:	461d      	mov	r5, r3
 800b490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b494:	2a39      	cmp	r2, #57	; 0x39
 800b496:	d106      	bne.n	800b4a6 <_dtoa_r+0x6de>
 800b498:	9a01      	ldr	r2, [sp, #4]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d1f7      	bne.n	800b48e <_dtoa_r+0x6c6>
 800b49e:	9901      	ldr	r1, [sp, #4]
 800b4a0:	2230      	movs	r2, #48	; 0x30
 800b4a2:	3701      	adds	r7, #1
 800b4a4:	700a      	strb	r2, [r1, #0]
 800b4a6:	781a      	ldrb	r2, [r3, #0]
 800b4a8:	3201      	adds	r2, #1
 800b4aa:	701a      	strb	r2, [r3, #0]
 800b4ac:	e790      	b.n	800b3d0 <_dtoa_r+0x608>
 800b4ae:	4ba6      	ldr	r3, [pc, #664]	; (800b748 <_dtoa_r+0x980>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f7f5 f8a1 	bl	80005f8 <__aeabi_dmul>
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	460f      	mov	r7, r1
 800b4be:	f7f5 fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	d09d      	beq.n	800b402 <_dtoa_r+0x63a>
 800b4c6:	e7cf      	b.n	800b468 <_dtoa_r+0x6a0>
 800b4c8:	9a08      	ldr	r2, [sp, #32]
 800b4ca:	2a00      	cmp	r2, #0
 800b4cc:	f000 80d7 	beq.w	800b67e <_dtoa_r+0x8b6>
 800b4d0:	9a06      	ldr	r2, [sp, #24]
 800b4d2:	2a01      	cmp	r2, #1
 800b4d4:	f300 80ba 	bgt.w	800b64c <_dtoa_r+0x884>
 800b4d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b4da:	2a00      	cmp	r2, #0
 800b4dc:	f000 80b2 	beq.w	800b644 <_dtoa_r+0x87c>
 800b4e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b4e4:	9e07      	ldr	r6, [sp, #28]
 800b4e6:	9d04      	ldr	r5, [sp, #16]
 800b4e8:	9a04      	ldr	r2, [sp, #16]
 800b4ea:	441a      	add	r2, r3
 800b4ec:	9204      	str	r2, [sp, #16]
 800b4ee:	9a05      	ldr	r2, [sp, #20]
 800b4f0:	2101      	movs	r1, #1
 800b4f2:	441a      	add	r2, r3
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	9205      	str	r2, [sp, #20]
 800b4f8:	f000 fd8c 	bl	800c014 <__i2b>
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	2d00      	cmp	r5, #0
 800b500:	dd0c      	ble.n	800b51c <_dtoa_r+0x754>
 800b502:	9b05      	ldr	r3, [sp, #20]
 800b504:	2b00      	cmp	r3, #0
 800b506:	dd09      	ble.n	800b51c <_dtoa_r+0x754>
 800b508:	42ab      	cmp	r3, r5
 800b50a:	9a04      	ldr	r2, [sp, #16]
 800b50c:	bfa8      	it	ge
 800b50e:	462b      	movge	r3, r5
 800b510:	1ad2      	subs	r2, r2, r3
 800b512:	9204      	str	r2, [sp, #16]
 800b514:	9a05      	ldr	r2, [sp, #20]
 800b516:	1aed      	subs	r5, r5, r3
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	9305      	str	r3, [sp, #20]
 800b51c:	9b07      	ldr	r3, [sp, #28]
 800b51e:	b31b      	cbz	r3, 800b568 <_dtoa_r+0x7a0>
 800b520:	9b08      	ldr	r3, [sp, #32]
 800b522:	2b00      	cmp	r3, #0
 800b524:	f000 80af 	beq.w	800b686 <_dtoa_r+0x8be>
 800b528:	2e00      	cmp	r6, #0
 800b52a:	dd13      	ble.n	800b554 <_dtoa_r+0x78c>
 800b52c:	4639      	mov	r1, r7
 800b52e:	4632      	mov	r2, r6
 800b530:	4620      	mov	r0, r4
 800b532:	f000 fe2f 	bl	800c194 <__pow5mult>
 800b536:	ee18 2a10 	vmov	r2, s16
 800b53a:	4601      	mov	r1, r0
 800b53c:	4607      	mov	r7, r0
 800b53e:	4620      	mov	r0, r4
 800b540:	f000 fd7e 	bl	800c040 <__multiply>
 800b544:	ee18 1a10 	vmov	r1, s16
 800b548:	4680      	mov	r8, r0
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 fcaa 	bl	800bea4 <_Bfree>
 800b550:	ee08 8a10 	vmov	s16, r8
 800b554:	9b07      	ldr	r3, [sp, #28]
 800b556:	1b9a      	subs	r2, r3, r6
 800b558:	d006      	beq.n	800b568 <_dtoa_r+0x7a0>
 800b55a:	ee18 1a10 	vmov	r1, s16
 800b55e:	4620      	mov	r0, r4
 800b560:	f000 fe18 	bl	800c194 <__pow5mult>
 800b564:	ee08 0a10 	vmov	s16, r0
 800b568:	2101      	movs	r1, #1
 800b56a:	4620      	mov	r0, r4
 800b56c:	f000 fd52 	bl	800c014 <__i2b>
 800b570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b572:	2b00      	cmp	r3, #0
 800b574:	4606      	mov	r6, r0
 800b576:	f340 8088 	ble.w	800b68a <_dtoa_r+0x8c2>
 800b57a:	461a      	mov	r2, r3
 800b57c:	4601      	mov	r1, r0
 800b57e:	4620      	mov	r0, r4
 800b580:	f000 fe08 	bl	800c194 <__pow5mult>
 800b584:	9b06      	ldr	r3, [sp, #24]
 800b586:	2b01      	cmp	r3, #1
 800b588:	4606      	mov	r6, r0
 800b58a:	f340 8081 	ble.w	800b690 <_dtoa_r+0x8c8>
 800b58e:	f04f 0800 	mov.w	r8, #0
 800b592:	6933      	ldr	r3, [r6, #16]
 800b594:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b598:	6918      	ldr	r0, [r3, #16]
 800b59a:	f000 fceb 	bl	800bf74 <__hi0bits>
 800b59e:	f1c0 0020 	rsb	r0, r0, #32
 800b5a2:	9b05      	ldr	r3, [sp, #20]
 800b5a4:	4418      	add	r0, r3
 800b5a6:	f010 001f 	ands.w	r0, r0, #31
 800b5aa:	f000 8092 	beq.w	800b6d2 <_dtoa_r+0x90a>
 800b5ae:	f1c0 0320 	rsb	r3, r0, #32
 800b5b2:	2b04      	cmp	r3, #4
 800b5b4:	f340 808a 	ble.w	800b6cc <_dtoa_r+0x904>
 800b5b8:	f1c0 001c 	rsb	r0, r0, #28
 800b5bc:	9b04      	ldr	r3, [sp, #16]
 800b5be:	4403      	add	r3, r0
 800b5c0:	9304      	str	r3, [sp, #16]
 800b5c2:	9b05      	ldr	r3, [sp, #20]
 800b5c4:	4403      	add	r3, r0
 800b5c6:	4405      	add	r5, r0
 800b5c8:	9305      	str	r3, [sp, #20]
 800b5ca:	9b04      	ldr	r3, [sp, #16]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	dd07      	ble.n	800b5e0 <_dtoa_r+0x818>
 800b5d0:	ee18 1a10 	vmov	r1, s16
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f000 fe36 	bl	800c248 <__lshift>
 800b5dc:	ee08 0a10 	vmov	s16, r0
 800b5e0:	9b05      	ldr	r3, [sp, #20]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	dd05      	ble.n	800b5f2 <_dtoa_r+0x82a>
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	f000 fe2c 	bl	800c248 <__lshift>
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d06e      	beq.n	800b6d6 <_dtoa_r+0x90e>
 800b5f8:	ee18 0a10 	vmov	r0, s16
 800b5fc:	4631      	mov	r1, r6
 800b5fe:	f000 fe93 	bl	800c328 <__mcmp>
 800b602:	2800      	cmp	r0, #0
 800b604:	da67      	bge.n	800b6d6 <_dtoa_r+0x90e>
 800b606:	9b00      	ldr	r3, [sp, #0]
 800b608:	3b01      	subs	r3, #1
 800b60a:	ee18 1a10 	vmov	r1, s16
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	220a      	movs	r2, #10
 800b612:	2300      	movs	r3, #0
 800b614:	4620      	mov	r0, r4
 800b616:	f000 fc67 	bl	800bee8 <__multadd>
 800b61a:	9b08      	ldr	r3, [sp, #32]
 800b61c:	ee08 0a10 	vmov	s16, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 81b1 	beq.w	800b988 <_dtoa_r+0xbc0>
 800b626:	2300      	movs	r3, #0
 800b628:	4639      	mov	r1, r7
 800b62a:	220a      	movs	r2, #10
 800b62c:	4620      	mov	r0, r4
 800b62e:	f000 fc5b 	bl	800bee8 <__multadd>
 800b632:	9b02      	ldr	r3, [sp, #8]
 800b634:	2b00      	cmp	r3, #0
 800b636:	4607      	mov	r7, r0
 800b638:	f300 808e 	bgt.w	800b758 <_dtoa_r+0x990>
 800b63c:	9b06      	ldr	r3, [sp, #24]
 800b63e:	2b02      	cmp	r3, #2
 800b640:	dc51      	bgt.n	800b6e6 <_dtoa_r+0x91e>
 800b642:	e089      	b.n	800b758 <_dtoa_r+0x990>
 800b644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b646:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b64a:	e74b      	b.n	800b4e4 <_dtoa_r+0x71c>
 800b64c:	9b03      	ldr	r3, [sp, #12]
 800b64e:	1e5e      	subs	r6, r3, #1
 800b650:	9b07      	ldr	r3, [sp, #28]
 800b652:	42b3      	cmp	r3, r6
 800b654:	bfbf      	itttt	lt
 800b656:	9b07      	ldrlt	r3, [sp, #28]
 800b658:	9607      	strlt	r6, [sp, #28]
 800b65a:	1af2      	sublt	r2, r6, r3
 800b65c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b65e:	bfb6      	itet	lt
 800b660:	189b      	addlt	r3, r3, r2
 800b662:	1b9e      	subge	r6, r3, r6
 800b664:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	bfb8      	it	lt
 800b66a:	2600      	movlt	r6, #0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	bfb7      	itett	lt
 800b670:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b674:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b678:	1a9d      	sublt	r5, r3, r2
 800b67a:	2300      	movlt	r3, #0
 800b67c:	e734      	b.n	800b4e8 <_dtoa_r+0x720>
 800b67e:	9e07      	ldr	r6, [sp, #28]
 800b680:	9d04      	ldr	r5, [sp, #16]
 800b682:	9f08      	ldr	r7, [sp, #32]
 800b684:	e73b      	b.n	800b4fe <_dtoa_r+0x736>
 800b686:	9a07      	ldr	r2, [sp, #28]
 800b688:	e767      	b.n	800b55a <_dtoa_r+0x792>
 800b68a:	9b06      	ldr	r3, [sp, #24]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	dc18      	bgt.n	800b6c2 <_dtoa_r+0x8fa>
 800b690:	f1ba 0f00 	cmp.w	sl, #0
 800b694:	d115      	bne.n	800b6c2 <_dtoa_r+0x8fa>
 800b696:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b69a:	b993      	cbnz	r3, 800b6c2 <_dtoa_r+0x8fa>
 800b69c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b6a0:	0d1b      	lsrs	r3, r3, #20
 800b6a2:	051b      	lsls	r3, r3, #20
 800b6a4:	b183      	cbz	r3, 800b6c8 <_dtoa_r+0x900>
 800b6a6:	9b04      	ldr	r3, [sp, #16]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	9304      	str	r3, [sp, #16]
 800b6ac:	9b05      	ldr	r3, [sp, #20]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	9305      	str	r3, [sp, #20]
 800b6b2:	f04f 0801 	mov.w	r8, #1
 800b6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f47f af6a 	bne.w	800b592 <_dtoa_r+0x7ca>
 800b6be:	2001      	movs	r0, #1
 800b6c0:	e76f      	b.n	800b5a2 <_dtoa_r+0x7da>
 800b6c2:	f04f 0800 	mov.w	r8, #0
 800b6c6:	e7f6      	b.n	800b6b6 <_dtoa_r+0x8ee>
 800b6c8:	4698      	mov	r8, r3
 800b6ca:	e7f4      	b.n	800b6b6 <_dtoa_r+0x8ee>
 800b6cc:	f43f af7d 	beq.w	800b5ca <_dtoa_r+0x802>
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	301c      	adds	r0, #28
 800b6d4:	e772      	b.n	800b5bc <_dtoa_r+0x7f4>
 800b6d6:	9b03      	ldr	r3, [sp, #12]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	dc37      	bgt.n	800b74c <_dtoa_r+0x984>
 800b6dc:	9b06      	ldr	r3, [sp, #24]
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	dd34      	ble.n	800b74c <_dtoa_r+0x984>
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	9302      	str	r3, [sp, #8]
 800b6e6:	9b02      	ldr	r3, [sp, #8]
 800b6e8:	b96b      	cbnz	r3, 800b706 <_dtoa_r+0x93e>
 800b6ea:	4631      	mov	r1, r6
 800b6ec:	2205      	movs	r2, #5
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	f000 fbfa 	bl	800bee8 <__multadd>
 800b6f4:	4601      	mov	r1, r0
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	ee18 0a10 	vmov	r0, s16
 800b6fc:	f000 fe14 	bl	800c328 <__mcmp>
 800b700:	2800      	cmp	r0, #0
 800b702:	f73f adbb 	bgt.w	800b27c <_dtoa_r+0x4b4>
 800b706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b708:	9d01      	ldr	r5, [sp, #4]
 800b70a:	43db      	mvns	r3, r3
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	f04f 0800 	mov.w	r8, #0
 800b712:	4631      	mov	r1, r6
 800b714:	4620      	mov	r0, r4
 800b716:	f000 fbc5 	bl	800bea4 <_Bfree>
 800b71a:	2f00      	cmp	r7, #0
 800b71c:	f43f aea4 	beq.w	800b468 <_dtoa_r+0x6a0>
 800b720:	f1b8 0f00 	cmp.w	r8, #0
 800b724:	d005      	beq.n	800b732 <_dtoa_r+0x96a>
 800b726:	45b8      	cmp	r8, r7
 800b728:	d003      	beq.n	800b732 <_dtoa_r+0x96a>
 800b72a:	4641      	mov	r1, r8
 800b72c:	4620      	mov	r0, r4
 800b72e:	f000 fbb9 	bl	800bea4 <_Bfree>
 800b732:	4639      	mov	r1, r7
 800b734:	4620      	mov	r0, r4
 800b736:	f000 fbb5 	bl	800bea4 <_Bfree>
 800b73a:	e695      	b.n	800b468 <_dtoa_r+0x6a0>
 800b73c:	2600      	movs	r6, #0
 800b73e:	4637      	mov	r7, r6
 800b740:	e7e1      	b.n	800b706 <_dtoa_r+0x93e>
 800b742:	9700      	str	r7, [sp, #0]
 800b744:	4637      	mov	r7, r6
 800b746:	e599      	b.n	800b27c <_dtoa_r+0x4b4>
 800b748:	40240000 	.word	0x40240000
 800b74c:	9b08      	ldr	r3, [sp, #32]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	f000 80ca 	beq.w	800b8e8 <_dtoa_r+0xb20>
 800b754:	9b03      	ldr	r3, [sp, #12]
 800b756:	9302      	str	r3, [sp, #8]
 800b758:	2d00      	cmp	r5, #0
 800b75a:	dd05      	ble.n	800b768 <_dtoa_r+0x9a0>
 800b75c:	4639      	mov	r1, r7
 800b75e:	462a      	mov	r2, r5
 800b760:	4620      	mov	r0, r4
 800b762:	f000 fd71 	bl	800c248 <__lshift>
 800b766:	4607      	mov	r7, r0
 800b768:	f1b8 0f00 	cmp.w	r8, #0
 800b76c:	d05b      	beq.n	800b826 <_dtoa_r+0xa5e>
 800b76e:	6879      	ldr	r1, [r7, #4]
 800b770:	4620      	mov	r0, r4
 800b772:	f000 fb57 	bl	800be24 <_Balloc>
 800b776:	4605      	mov	r5, r0
 800b778:	b928      	cbnz	r0, 800b786 <_dtoa_r+0x9be>
 800b77a:	4b87      	ldr	r3, [pc, #540]	; (800b998 <_dtoa_r+0xbd0>)
 800b77c:	4602      	mov	r2, r0
 800b77e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b782:	f7ff bb3b 	b.w	800adfc <_dtoa_r+0x34>
 800b786:	693a      	ldr	r2, [r7, #16]
 800b788:	3202      	adds	r2, #2
 800b78a:	0092      	lsls	r2, r2, #2
 800b78c:	f107 010c 	add.w	r1, r7, #12
 800b790:	300c      	adds	r0, #12
 800b792:	f7fe fd0d 	bl	800a1b0 <memcpy>
 800b796:	2201      	movs	r2, #1
 800b798:	4629      	mov	r1, r5
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 fd54 	bl	800c248 <__lshift>
 800b7a0:	9b01      	ldr	r3, [sp, #4]
 800b7a2:	f103 0901 	add.w	r9, r3, #1
 800b7a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	9305      	str	r3, [sp, #20]
 800b7ae:	f00a 0301 	and.w	r3, sl, #1
 800b7b2:	46b8      	mov	r8, r7
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	4607      	mov	r7, r0
 800b7b8:	4631      	mov	r1, r6
 800b7ba:	ee18 0a10 	vmov	r0, s16
 800b7be:	f7ff fa77 	bl	800acb0 <quorem>
 800b7c2:	4641      	mov	r1, r8
 800b7c4:	9002      	str	r0, [sp, #8]
 800b7c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b7ca:	ee18 0a10 	vmov	r0, s16
 800b7ce:	f000 fdab 	bl	800c328 <__mcmp>
 800b7d2:	463a      	mov	r2, r7
 800b7d4:	9003      	str	r0, [sp, #12]
 800b7d6:	4631      	mov	r1, r6
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f000 fdc1 	bl	800c360 <__mdiff>
 800b7de:	68c2      	ldr	r2, [r0, #12]
 800b7e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	bb02      	cbnz	r2, 800b82a <_dtoa_r+0xa62>
 800b7e8:	4601      	mov	r1, r0
 800b7ea:	ee18 0a10 	vmov	r0, s16
 800b7ee:	f000 fd9b 	bl	800c328 <__mcmp>
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	9207      	str	r2, [sp, #28]
 800b7fa:	f000 fb53 	bl	800bea4 <_Bfree>
 800b7fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b802:	ea43 0102 	orr.w	r1, r3, r2
 800b806:	9b04      	ldr	r3, [sp, #16]
 800b808:	430b      	orrs	r3, r1
 800b80a:	464d      	mov	r5, r9
 800b80c:	d10f      	bne.n	800b82e <_dtoa_r+0xa66>
 800b80e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b812:	d02a      	beq.n	800b86a <_dtoa_r+0xaa2>
 800b814:	9b03      	ldr	r3, [sp, #12]
 800b816:	2b00      	cmp	r3, #0
 800b818:	dd02      	ble.n	800b820 <_dtoa_r+0xa58>
 800b81a:	9b02      	ldr	r3, [sp, #8]
 800b81c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b820:	f88b a000 	strb.w	sl, [fp]
 800b824:	e775      	b.n	800b712 <_dtoa_r+0x94a>
 800b826:	4638      	mov	r0, r7
 800b828:	e7ba      	b.n	800b7a0 <_dtoa_r+0x9d8>
 800b82a:	2201      	movs	r2, #1
 800b82c:	e7e2      	b.n	800b7f4 <_dtoa_r+0xa2c>
 800b82e:	9b03      	ldr	r3, [sp, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	db04      	blt.n	800b83e <_dtoa_r+0xa76>
 800b834:	9906      	ldr	r1, [sp, #24]
 800b836:	430b      	orrs	r3, r1
 800b838:	9904      	ldr	r1, [sp, #16]
 800b83a:	430b      	orrs	r3, r1
 800b83c:	d122      	bne.n	800b884 <_dtoa_r+0xabc>
 800b83e:	2a00      	cmp	r2, #0
 800b840:	ddee      	ble.n	800b820 <_dtoa_r+0xa58>
 800b842:	ee18 1a10 	vmov	r1, s16
 800b846:	2201      	movs	r2, #1
 800b848:	4620      	mov	r0, r4
 800b84a:	f000 fcfd 	bl	800c248 <__lshift>
 800b84e:	4631      	mov	r1, r6
 800b850:	ee08 0a10 	vmov	s16, r0
 800b854:	f000 fd68 	bl	800c328 <__mcmp>
 800b858:	2800      	cmp	r0, #0
 800b85a:	dc03      	bgt.n	800b864 <_dtoa_r+0xa9c>
 800b85c:	d1e0      	bne.n	800b820 <_dtoa_r+0xa58>
 800b85e:	f01a 0f01 	tst.w	sl, #1
 800b862:	d0dd      	beq.n	800b820 <_dtoa_r+0xa58>
 800b864:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b868:	d1d7      	bne.n	800b81a <_dtoa_r+0xa52>
 800b86a:	2339      	movs	r3, #57	; 0x39
 800b86c:	f88b 3000 	strb.w	r3, [fp]
 800b870:	462b      	mov	r3, r5
 800b872:	461d      	mov	r5, r3
 800b874:	3b01      	subs	r3, #1
 800b876:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b87a:	2a39      	cmp	r2, #57	; 0x39
 800b87c:	d071      	beq.n	800b962 <_dtoa_r+0xb9a>
 800b87e:	3201      	adds	r2, #1
 800b880:	701a      	strb	r2, [r3, #0]
 800b882:	e746      	b.n	800b712 <_dtoa_r+0x94a>
 800b884:	2a00      	cmp	r2, #0
 800b886:	dd07      	ble.n	800b898 <_dtoa_r+0xad0>
 800b888:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b88c:	d0ed      	beq.n	800b86a <_dtoa_r+0xaa2>
 800b88e:	f10a 0301 	add.w	r3, sl, #1
 800b892:	f88b 3000 	strb.w	r3, [fp]
 800b896:	e73c      	b.n	800b712 <_dtoa_r+0x94a>
 800b898:	9b05      	ldr	r3, [sp, #20]
 800b89a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b89e:	4599      	cmp	r9, r3
 800b8a0:	d047      	beq.n	800b932 <_dtoa_r+0xb6a>
 800b8a2:	ee18 1a10 	vmov	r1, s16
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	220a      	movs	r2, #10
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f000 fb1c 	bl	800bee8 <__multadd>
 800b8b0:	45b8      	cmp	r8, r7
 800b8b2:	ee08 0a10 	vmov	s16, r0
 800b8b6:	f04f 0300 	mov.w	r3, #0
 800b8ba:	f04f 020a 	mov.w	r2, #10
 800b8be:	4641      	mov	r1, r8
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	d106      	bne.n	800b8d2 <_dtoa_r+0xb0a>
 800b8c4:	f000 fb10 	bl	800bee8 <__multadd>
 800b8c8:	4680      	mov	r8, r0
 800b8ca:	4607      	mov	r7, r0
 800b8cc:	f109 0901 	add.w	r9, r9, #1
 800b8d0:	e772      	b.n	800b7b8 <_dtoa_r+0x9f0>
 800b8d2:	f000 fb09 	bl	800bee8 <__multadd>
 800b8d6:	4639      	mov	r1, r7
 800b8d8:	4680      	mov	r8, r0
 800b8da:	2300      	movs	r3, #0
 800b8dc:	220a      	movs	r2, #10
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f000 fb02 	bl	800bee8 <__multadd>
 800b8e4:	4607      	mov	r7, r0
 800b8e6:	e7f1      	b.n	800b8cc <_dtoa_r+0xb04>
 800b8e8:	9b03      	ldr	r3, [sp, #12]
 800b8ea:	9302      	str	r3, [sp, #8]
 800b8ec:	9d01      	ldr	r5, [sp, #4]
 800b8ee:	ee18 0a10 	vmov	r0, s16
 800b8f2:	4631      	mov	r1, r6
 800b8f4:	f7ff f9dc 	bl	800acb0 <quorem>
 800b8f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b8fc:	9b01      	ldr	r3, [sp, #4]
 800b8fe:	f805 ab01 	strb.w	sl, [r5], #1
 800b902:	1aea      	subs	r2, r5, r3
 800b904:	9b02      	ldr	r3, [sp, #8]
 800b906:	4293      	cmp	r3, r2
 800b908:	dd09      	ble.n	800b91e <_dtoa_r+0xb56>
 800b90a:	ee18 1a10 	vmov	r1, s16
 800b90e:	2300      	movs	r3, #0
 800b910:	220a      	movs	r2, #10
 800b912:	4620      	mov	r0, r4
 800b914:	f000 fae8 	bl	800bee8 <__multadd>
 800b918:	ee08 0a10 	vmov	s16, r0
 800b91c:	e7e7      	b.n	800b8ee <_dtoa_r+0xb26>
 800b91e:	9b02      	ldr	r3, [sp, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	bfc8      	it	gt
 800b924:	461d      	movgt	r5, r3
 800b926:	9b01      	ldr	r3, [sp, #4]
 800b928:	bfd8      	it	le
 800b92a:	2501      	movle	r5, #1
 800b92c:	441d      	add	r5, r3
 800b92e:	f04f 0800 	mov.w	r8, #0
 800b932:	ee18 1a10 	vmov	r1, s16
 800b936:	2201      	movs	r2, #1
 800b938:	4620      	mov	r0, r4
 800b93a:	f000 fc85 	bl	800c248 <__lshift>
 800b93e:	4631      	mov	r1, r6
 800b940:	ee08 0a10 	vmov	s16, r0
 800b944:	f000 fcf0 	bl	800c328 <__mcmp>
 800b948:	2800      	cmp	r0, #0
 800b94a:	dc91      	bgt.n	800b870 <_dtoa_r+0xaa8>
 800b94c:	d102      	bne.n	800b954 <_dtoa_r+0xb8c>
 800b94e:	f01a 0f01 	tst.w	sl, #1
 800b952:	d18d      	bne.n	800b870 <_dtoa_r+0xaa8>
 800b954:	462b      	mov	r3, r5
 800b956:	461d      	mov	r5, r3
 800b958:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b95c:	2a30      	cmp	r2, #48	; 0x30
 800b95e:	d0fa      	beq.n	800b956 <_dtoa_r+0xb8e>
 800b960:	e6d7      	b.n	800b712 <_dtoa_r+0x94a>
 800b962:	9a01      	ldr	r2, [sp, #4]
 800b964:	429a      	cmp	r2, r3
 800b966:	d184      	bne.n	800b872 <_dtoa_r+0xaaa>
 800b968:	9b00      	ldr	r3, [sp, #0]
 800b96a:	3301      	adds	r3, #1
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	2331      	movs	r3, #49	; 0x31
 800b970:	7013      	strb	r3, [r2, #0]
 800b972:	e6ce      	b.n	800b712 <_dtoa_r+0x94a>
 800b974:	4b09      	ldr	r3, [pc, #36]	; (800b99c <_dtoa_r+0xbd4>)
 800b976:	f7ff ba95 	b.w	800aea4 <_dtoa_r+0xdc>
 800b97a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f47f aa6e 	bne.w	800ae5e <_dtoa_r+0x96>
 800b982:	4b07      	ldr	r3, [pc, #28]	; (800b9a0 <_dtoa_r+0xbd8>)
 800b984:	f7ff ba8e 	b.w	800aea4 <_dtoa_r+0xdc>
 800b988:	9b02      	ldr	r3, [sp, #8]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	dcae      	bgt.n	800b8ec <_dtoa_r+0xb24>
 800b98e:	9b06      	ldr	r3, [sp, #24]
 800b990:	2b02      	cmp	r3, #2
 800b992:	f73f aea8 	bgt.w	800b6e6 <_dtoa_r+0x91e>
 800b996:	e7a9      	b.n	800b8ec <_dtoa_r+0xb24>
 800b998:	0800e804 	.word	0x0800e804
 800b99c:	0800e660 	.word	0x0800e660
 800b9a0:	0800e785 	.word	0x0800e785

0800b9a4 <print_e>:
 800b9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9a6:	b087      	sub	sp, #28
 800b9a8:	ec43 2b10 	vmov	d0, r2, r3
 800b9ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b9ae:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 800b9b2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b9b4:	ab04      	add	r3, sp, #16
 800b9b6:	9301      	str	r3, [sp, #4]
 800b9b8:	ab03      	add	r3, sp, #12
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	1c62      	adds	r2, r4, #1
 800b9be:	ab05      	add	r3, sp, #20
 800b9c0:	460f      	mov	r7, r1
 800b9c2:	2102      	movs	r1, #2
 800b9c4:	f7ff fa00 	bl	800adc8 <_dtoa_r>
 800b9c8:	9a05      	ldr	r2, [sp, #20]
 800b9ca:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d105      	bne.n	800b9de <print_e+0x3a>
 800b9d2:	4601      	mov	r1, r0
 800b9d4:	4638      	mov	r0, r7
 800b9d6:	f001 f9f4 	bl	800cdc2 <strcpy>
 800b9da:	b007      	add	sp, #28
 800b9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9de:	463b      	mov	r3, r7
 800b9e0:	7801      	ldrb	r1, [r0, #0]
 800b9e2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9e6:	2c00      	cmp	r4, #0
 800b9e8:	bfc8      	it	gt
 800b9ea:	2501      	movgt	r5, #1
 800b9ec:	212e      	movs	r1, #46	; 0x2e
 800b9ee:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800b9f2:	b10f      	cbz	r7, 800b9f8 <print_e+0x54>
 800b9f4:	2c00      	cmp	r4, #0
 800b9f6:	dc37      	bgt.n	800ba68 <print_e+0xc4>
 800b9f8:	2e67      	cmp	r6, #103	; 0x67
 800b9fa:	d046      	beq.n	800ba8a <print_e+0xe6>
 800b9fc:	2e47      	cmp	r6, #71	; 0x47
 800b9fe:	d046      	beq.n	800ba8e <print_e+0xea>
 800ba00:	212e      	movs	r1, #46	; 0x2e
 800ba02:	2030      	movs	r0, #48	; 0x30
 800ba04:	2c00      	cmp	r4, #0
 800ba06:	dc38      	bgt.n	800ba7a <print_e+0xd6>
 800ba08:	1e51      	subs	r1, r2, #1
 800ba0a:	2900      	cmp	r1, #0
 800ba0c:	bfb8      	it	lt
 800ba0e:	f1c2 0201 	rsblt	r2, r2, #1
 800ba12:	4618      	mov	r0, r3
 800ba14:	9105      	str	r1, [sp, #20]
 800ba16:	bfac      	ite	ge
 800ba18:	222b      	movge	r2, #43	; 0x2b
 800ba1a:	9205      	strlt	r2, [sp, #20]
 800ba1c:	f800 6b02 	strb.w	r6, [r0], #2
 800ba20:	bfa8      	it	ge
 800ba22:	705a      	strbge	r2, [r3, #1]
 800ba24:	9a05      	ldr	r2, [sp, #20]
 800ba26:	bfbc      	itt	lt
 800ba28:	212d      	movlt	r1, #45	; 0x2d
 800ba2a:	7059      	strblt	r1, [r3, #1]
 800ba2c:	2a63      	cmp	r2, #99	; 0x63
 800ba2e:	dd0b      	ble.n	800ba48 <print_e+0xa4>
 800ba30:	2164      	movs	r1, #100	; 0x64
 800ba32:	fb92 f1f1 	sdiv	r1, r2, r1
 800ba36:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800ba3a:	1cd8      	adds	r0, r3, #3
 800ba3c:	709c      	strb	r4, [r3, #2]
 800ba3e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800ba42:	fb03 2201 	mla	r2, r3, r1, r2
 800ba46:	9205      	str	r2, [sp, #20]
 800ba48:	9b05      	ldr	r3, [sp, #20]
 800ba4a:	220a      	movs	r2, #10
 800ba4c:	fb93 f2f2 	sdiv	r2, r3, r2
 800ba50:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800ba54:	7001      	strb	r1, [r0, #0]
 800ba56:	f06f 0109 	mvn.w	r1, #9
 800ba5a:	fb01 3302 	mla	r3, r1, r2, r3
 800ba5e:	3330      	adds	r3, #48	; 0x30
 800ba60:	7043      	strb	r3, [r0, #1]
 800ba62:	2300      	movs	r3, #0
 800ba64:	7083      	strb	r3, [r0, #2]
 800ba66:	e7b8      	b.n	800b9da <print_e+0x36>
 800ba68:	b10d      	cbz	r5, 800ba6e <print_e+0xca>
 800ba6a:	f803 1b01 	strb.w	r1, [r3], #1
 800ba6e:	7805      	ldrb	r5, [r0, #0]
 800ba70:	f803 5b01 	strb.w	r5, [r3], #1
 800ba74:	3c01      	subs	r4, #1
 800ba76:	2500      	movs	r5, #0
 800ba78:	e7b9      	b.n	800b9ee <print_e+0x4a>
 800ba7a:	b10d      	cbz	r5, 800ba80 <print_e+0xdc>
 800ba7c:	f803 1b01 	strb.w	r1, [r3], #1
 800ba80:	f803 0b01 	strb.w	r0, [r3], #1
 800ba84:	3c01      	subs	r4, #1
 800ba86:	2500      	movs	r5, #0
 800ba88:	e7bc      	b.n	800ba04 <print_e+0x60>
 800ba8a:	2665      	movs	r6, #101	; 0x65
 800ba8c:	e7bc      	b.n	800ba08 <print_e+0x64>
 800ba8e:	2645      	movs	r6, #69	; 0x45
 800ba90:	e7ba      	b.n	800ba08 <print_e+0x64>
 800ba92:	0000      	movs	r0, r0
 800ba94:	0000      	movs	r0, r0
	...

0800ba98 <_gcvt>:
 800ba98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba9c:	ec55 4b10 	vmov	r4, r5, d0
 800baa0:	b088      	sub	sp, #32
 800baa2:	4681      	mov	r9, r0
 800baa4:	4688      	mov	r8, r1
 800baa6:	4616      	mov	r6, r2
 800baa8:	469a      	mov	sl, r3
 800baaa:	ee10 0a10 	vmov	r0, s0
 800baae:	2200      	movs	r2, #0
 800bab0:	2300      	movs	r3, #0
 800bab2:	4629      	mov	r1, r5
 800bab4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800bab6:	f7f5 f811 	bl	8000adc <__aeabi_dcmplt>
 800baba:	b110      	cbz	r0, 800bac2 <_gcvt+0x2a>
 800babc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bac0:	461d      	mov	r5, r3
 800bac2:	2200      	movs	r2, #0
 800bac4:	2300      	movs	r3, #0
 800bac6:	4620      	mov	r0, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	f7f4 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 800bace:	b138      	cbz	r0, 800bae0 <_gcvt+0x48>
 800bad0:	2330      	movs	r3, #48	; 0x30
 800bad2:	7033      	strb	r3, [r6, #0]
 800bad4:	2300      	movs	r3, #0
 800bad6:	7073      	strb	r3, [r6, #1]
 800bad8:	4630      	mov	r0, r6
 800bada:	b008      	add	sp, #32
 800badc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae0:	a34b      	add	r3, pc, #300	; (adr r3, 800bc10 <_gcvt+0x178>)
 800bae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae6:	4620      	mov	r0, r4
 800bae8:	4629      	mov	r1, r5
 800baea:	f7f5 f801 	bl	8000af0 <__aeabi_dcmple>
 800baee:	b158      	cbz	r0, 800bb08 <_gcvt+0x70>
 800baf0:	f108 31ff 	add.w	r1, r8, #4294967295
 800baf4:	9100      	str	r1, [sp, #0]
 800baf6:	e9cd a701 	strd	sl, r7, [sp, #4]
 800bafa:	4622      	mov	r2, r4
 800bafc:	462b      	mov	r3, r5
 800bafe:	4631      	mov	r1, r6
 800bb00:	4648      	mov	r0, r9
 800bb02:	f7ff ff4f 	bl	800b9a4 <print_e>
 800bb06:	e7e7      	b.n	800bad8 <_gcvt+0x40>
 800bb08:	4640      	mov	r0, r8
 800bb0a:	f000 fd0f 	bl	800c52c <_mprec_log10>
 800bb0e:	4622      	mov	r2, r4
 800bb10:	ec51 0b10 	vmov	r0, r1, d0
 800bb14:	462b      	mov	r3, r5
 800bb16:	f7f4 ffeb 	bl	8000af0 <__aeabi_dcmple>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d1e8      	bne.n	800baf0 <_gcvt+0x58>
 800bb1e:	ab07      	add	r3, sp, #28
 800bb20:	9301      	str	r3, [sp, #4]
 800bb22:	ab06      	add	r3, sp, #24
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	4642      	mov	r2, r8
 800bb28:	ab05      	add	r3, sp, #20
 800bb2a:	ec45 4b10 	vmov	d0, r4, r5
 800bb2e:	2102      	movs	r1, #2
 800bb30:	4648      	mov	r0, r9
 800bb32:	f7ff f949 	bl	800adc8 <_dtoa_r>
 800bb36:	9a05      	ldr	r2, [sp, #20]
 800bb38:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d00e      	beq.n	800bb5e <_gcvt+0xc6>
 800bb40:	4633      	mov	r3, r6
 800bb42:	44b0      	add	r8, r6
 800bb44:	4605      	mov	r5, r0
 800bb46:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bb4a:	9c05      	ldr	r4, [sp, #20]
 800bb4c:	eba8 0203 	sub.w	r2, r8, r3
 800bb50:	b109      	cbz	r1, 800bb56 <_gcvt+0xbe>
 800bb52:	2c00      	cmp	r4, #0
 800bb54:	dc08      	bgt.n	800bb68 <_gcvt+0xd0>
 800bb56:	2100      	movs	r1, #0
 800bb58:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800bb5c:	e00d      	b.n	800bb7a <_gcvt+0xe2>
 800bb5e:	4601      	mov	r1, r0
 800bb60:	4630      	mov	r0, r6
 800bb62:	f001 f92e 	bl	800cdc2 <strcpy>
 800bb66:	e7b7      	b.n	800bad8 <_gcvt+0x40>
 800bb68:	3c01      	subs	r4, #1
 800bb6a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb6e:	9405      	str	r4, [sp, #20]
 800bb70:	e7e8      	b.n	800bb44 <_gcvt+0xac>
 800bb72:	f803 cb01 	strb.w	ip, [r3], #1
 800bb76:	3a01      	subs	r2, #1
 800bb78:	2101      	movs	r1, #1
 800bb7a:	2c00      	cmp	r4, #0
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	dc2a      	bgt.n	800bbd6 <_gcvt+0x13e>
 800bb80:	b101      	cbz	r1, 800bb84 <_gcvt+0xec>
 800bb82:	9405      	str	r4, [sp, #20]
 800bb84:	b90f      	cbnz	r7, 800bb8a <_gcvt+0xf2>
 800bb86:	7829      	ldrb	r1, [r5, #0]
 800bb88:	b311      	cbz	r1, 800bbd0 <_gcvt+0x138>
 800bb8a:	42b3      	cmp	r3, r6
 800bb8c:	bf04      	itt	eq
 800bb8e:	2130      	moveq	r1, #48	; 0x30
 800bb90:	f803 1b01 	strbeq.w	r1, [r3], #1
 800bb94:	212e      	movs	r1, #46	; 0x2e
 800bb96:	7019      	strb	r1, [r3, #0]
 800bb98:	9905      	ldr	r1, [sp, #20]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	2400      	movs	r4, #0
 800bb9e:	eba1 0c03 	sub.w	ip, r1, r3
 800bba2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 800bba6:	eb1c 0f00 	cmn.w	ip, r0
 800bbaa:	d41c      	bmi.n	800bbe6 <_gcvt+0x14e>
 800bbac:	2900      	cmp	r1, #0
 800bbae:	f1c1 0000 	rsb	r0, r1, #0
 800bbb2:	bfc8      	it	gt
 800bbb4:	2000      	movgt	r0, #0
 800bbb6:	f100 0c01 	add.w	ip, r0, #1
 800bbba:	4463      	add	r3, ip
 800bbbc:	4401      	add	r1, r0
 800bbbe:	b104      	cbz	r4, 800bbc2 <_gcvt+0x12a>
 800bbc0:	9105      	str	r1, [sp, #20]
 800bbc2:	1e69      	subs	r1, r5, #1
 800bbc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bbc8:	b108      	cbz	r0, 800bbce <_gcvt+0x136>
 800bbca:	2a00      	cmp	r2, #0
 800bbcc:	dc0f      	bgt.n	800bbee <_gcvt+0x156>
 800bbce:	b9df      	cbnz	r7, 800bc08 <_gcvt+0x170>
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	701a      	strb	r2, [r3, #0]
 800bbd4:	e780      	b.n	800bad8 <_gcvt+0x40>
 800bbd6:	2a00      	cmp	r2, #0
 800bbd8:	f104 34ff 	add.w	r4, r4, #4294967295
 800bbdc:	dcc9      	bgt.n	800bb72 <_gcvt+0xda>
 800bbde:	2900      	cmp	r1, #0
 800bbe0:	d0d0      	beq.n	800bb84 <_gcvt+0xec>
 800bbe2:	9005      	str	r0, [sp, #20]
 800bbe4:	e7ce      	b.n	800bb84 <_gcvt+0xec>
 800bbe6:	f800 ef01 	strb.w	lr, [r0, #1]!
 800bbea:	2401      	movs	r4, #1
 800bbec:	e7db      	b.n	800bba6 <_gcvt+0x10e>
 800bbee:	f803 0b01 	strb.w	r0, [r3], #1
 800bbf2:	3a01      	subs	r2, #1
 800bbf4:	e7e6      	b.n	800bbc4 <_gcvt+0x12c>
 800bbf6:	f801 5b01 	strb.w	r5, [r1], #1
 800bbfa:	1a60      	subs	r0, r4, r1
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	dcfa      	bgt.n	800bbf6 <_gcvt+0x15e>
 800bc00:	2a00      	cmp	r2, #0
 800bc02:	bfa8      	it	ge
 800bc04:	189b      	addge	r3, r3, r2
 800bc06:	e7e3      	b.n	800bbd0 <_gcvt+0x138>
 800bc08:	4619      	mov	r1, r3
 800bc0a:	189c      	adds	r4, r3, r2
 800bc0c:	2530      	movs	r5, #48	; 0x30
 800bc0e:	e7f4      	b.n	800bbfa <_gcvt+0x162>
 800bc10:	eb1c432d 	.word	0xeb1c432d
 800bc14:	3f1a36e2 	.word	0x3f1a36e2

0800bc18 <std>:
 800bc18:	2300      	movs	r3, #0
 800bc1a:	b510      	push	{r4, lr}
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	e9c0 3300 	strd	r3, r3, [r0]
 800bc22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc26:	6083      	str	r3, [r0, #8]
 800bc28:	8181      	strh	r1, [r0, #12]
 800bc2a:	6643      	str	r3, [r0, #100]	; 0x64
 800bc2c:	81c2      	strh	r2, [r0, #14]
 800bc2e:	6183      	str	r3, [r0, #24]
 800bc30:	4619      	mov	r1, r3
 800bc32:	2208      	movs	r2, #8
 800bc34:	305c      	adds	r0, #92	; 0x5c
 800bc36:	f7fe fac9 	bl	800a1cc <memset>
 800bc3a:	4b05      	ldr	r3, [pc, #20]	; (800bc50 <std+0x38>)
 800bc3c:	6263      	str	r3, [r4, #36]	; 0x24
 800bc3e:	4b05      	ldr	r3, [pc, #20]	; (800bc54 <std+0x3c>)
 800bc40:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc42:	4b05      	ldr	r3, [pc, #20]	; (800bc58 <std+0x40>)
 800bc44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc46:	4b05      	ldr	r3, [pc, #20]	; (800bc5c <std+0x44>)
 800bc48:	6224      	str	r4, [r4, #32]
 800bc4a:	6323      	str	r3, [r4, #48]	; 0x30
 800bc4c:	bd10      	pop	{r4, pc}
 800bc4e:	bf00      	nop
 800bc50:	0800cd3d 	.word	0x0800cd3d
 800bc54:	0800cd5f 	.word	0x0800cd5f
 800bc58:	0800cd97 	.word	0x0800cd97
 800bc5c:	0800cdbb 	.word	0x0800cdbb

0800bc60 <_cleanup_r>:
 800bc60:	4901      	ldr	r1, [pc, #4]	; (800bc68 <_cleanup_r+0x8>)
 800bc62:	f000 b8af 	b.w	800bdc4 <_fwalk_reent>
 800bc66:	bf00      	nop
 800bc68:	0800d0e1 	.word	0x0800d0e1

0800bc6c <__sfmoreglue>:
 800bc6c:	b570      	push	{r4, r5, r6, lr}
 800bc6e:	2268      	movs	r2, #104	; 0x68
 800bc70:	1e4d      	subs	r5, r1, #1
 800bc72:	4355      	muls	r5, r2
 800bc74:	460e      	mov	r6, r1
 800bc76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc7a:	f000 fcf7 	bl	800c66c <_malloc_r>
 800bc7e:	4604      	mov	r4, r0
 800bc80:	b140      	cbz	r0, 800bc94 <__sfmoreglue+0x28>
 800bc82:	2100      	movs	r1, #0
 800bc84:	e9c0 1600 	strd	r1, r6, [r0]
 800bc88:	300c      	adds	r0, #12
 800bc8a:	60a0      	str	r0, [r4, #8]
 800bc8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc90:	f7fe fa9c 	bl	800a1cc <memset>
 800bc94:	4620      	mov	r0, r4
 800bc96:	bd70      	pop	{r4, r5, r6, pc}

0800bc98 <__sfp_lock_acquire>:
 800bc98:	4801      	ldr	r0, [pc, #4]	; (800bca0 <__sfp_lock_acquire+0x8>)
 800bc9a:	f000 b8b8 	b.w	800be0e <__retarget_lock_acquire_recursive>
 800bc9e:	bf00      	nop
 800bca0:	20005505 	.word	0x20005505

0800bca4 <__sfp_lock_release>:
 800bca4:	4801      	ldr	r0, [pc, #4]	; (800bcac <__sfp_lock_release+0x8>)
 800bca6:	f000 b8b3 	b.w	800be10 <__retarget_lock_release_recursive>
 800bcaa:	bf00      	nop
 800bcac:	20005505 	.word	0x20005505

0800bcb0 <__sinit_lock_acquire>:
 800bcb0:	4801      	ldr	r0, [pc, #4]	; (800bcb8 <__sinit_lock_acquire+0x8>)
 800bcb2:	f000 b8ac 	b.w	800be0e <__retarget_lock_acquire_recursive>
 800bcb6:	bf00      	nop
 800bcb8:	20005506 	.word	0x20005506

0800bcbc <__sinit_lock_release>:
 800bcbc:	4801      	ldr	r0, [pc, #4]	; (800bcc4 <__sinit_lock_release+0x8>)
 800bcbe:	f000 b8a7 	b.w	800be10 <__retarget_lock_release_recursive>
 800bcc2:	bf00      	nop
 800bcc4:	20005506 	.word	0x20005506

0800bcc8 <__sinit>:
 800bcc8:	b510      	push	{r4, lr}
 800bcca:	4604      	mov	r4, r0
 800bccc:	f7ff fff0 	bl	800bcb0 <__sinit_lock_acquire>
 800bcd0:	69a3      	ldr	r3, [r4, #24]
 800bcd2:	b11b      	cbz	r3, 800bcdc <__sinit+0x14>
 800bcd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcd8:	f7ff bff0 	b.w	800bcbc <__sinit_lock_release>
 800bcdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bce0:	6523      	str	r3, [r4, #80]	; 0x50
 800bce2:	4b13      	ldr	r3, [pc, #76]	; (800bd30 <__sinit+0x68>)
 800bce4:	4a13      	ldr	r2, [pc, #76]	; (800bd34 <__sinit+0x6c>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	62a2      	str	r2, [r4, #40]	; 0x28
 800bcea:	42a3      	cmp	r3, r4
 800bcec:	bf04      	itt	eq
 800bcee:	2301      	moveq	r3, #1
 800bcf0:	61a3      	streq	r3, [r4, #24]
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f000 f820 	bl	800bd38 <__sfp>
 800bcf8:	6060      	str	r0, [r4, #4]
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 f81c 	bl	800bd38 <__sfp>
 800bd00:	60a0      	str	r0, [r4, #8]
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 f818 	bl	800bd38 <__sfp>
 800bd08:	2200      	movs	r2, #0
 800bd0a:	60e0      	str	r0, [r4, #12]
 800bd0c:	2104      	movs	r1, #4
 800bd0e:	6860      	ldr	r0, [r4, #4]
 800bd10:	f7ff ff82 	bl	800bc18 <std>
 800bd14:	68a0      	ldr	r0, [r4, #8]
 800bd16:	2201      	movs	r2, #1
 800bd18:	2109      	movs	r1, #9
 800bd1a:	f7ff ff7d 	bl	800bc18 <std>
 800bd1e:	68e0      	ldr	r0, [r4, #12]
 800bd20:	2202      	movs	r2, #2
 800bd22:	2112      	movs	r1, #18
 800bd24:	f7ff ff78 	bl	800bc18 <std>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	61a3      	str	r3, [r4, #24]
 800bd2c:	e7d2      	b.n	800bcd4 <__sinit+0xc>
 800bd2e:	bf00      	nop
 800bd30:	0800e64c 	.word	0x0800e64c
 800bd34:	0800bc61 	.word	0x0800bc61

0800bd38 <__sfp>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	4607      	mov	r7, r0
 800bd3c:	f7ff ffac 	bl	800bc98 <__sfp_lock_acquire>
 800bd40:	4b1e      	ldr	r3, [pc, #120]	; (800bdbc <__sfp+0x84>)
 800bd42:	681e      	ldr	r6, [r3, #0]
 800bd44:	69b3      	ldr	r3, [r6, #24]
 800bd46:	b913      	cbnz	r3, 800bd4e <__sfp+0x16>
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f7ff ffbd 	bl	800bcc8 <__sinit>
 800bd4e:	3648      	adds	r6, #72	; 0x48
 800bd50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd54:	3b01      	subs	r3, #1
 800bd56:	d503      	bpl.n	800bd60 <__sfp+0x28>
 800bd58:	6833      	ldr	r3, [r6, #0]
 800bd5a:	b30b      	cbz	r3, 800bda0 <__sfp+0x68>
 800bd5c:	6836      	ldr	r6, [r6, #0]
 800bd5e:	e7f7      	b.n	800bd50 <__sfp+0x18>
 800bd60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd64:	b9d5      	cbnz	r5, 800bd9c <__sfp+0x64>
 800bd66:	4b16      	ldr	r3, [pc, #88]	; (800bdc0 <__sfp+0x88>)
 800bd68:	60e3      	str	r3, [r4, #12]
 800bd6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd6e:	6665      	str	r5, [r4, #100]	; 0x64
 800bd70:	f000 f84c 	bl	800be0c <__retarget_lock_init_recursive>
 800bd74:	f7ff ff96 	bl	800bca4 <__sfp_lock_release>
 800bd78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd80:	6025      	str	r5, [r4, #0]
 800bd82:	61a5      	str	r5, [r4, #24]
 800bd84:	2208      	movs	r2, #8
 800bd86:	4629      	mov	r1, r5
 800bd88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd8c:	f7fe fa1e 	bl	800a1cc <memset>
 800bd90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd98:	4620      	mov	r0, r4
 800bd9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd9c:	3468      	adds	r4, #104	; 0x68
 800bd9e:	e7d9      	b.n	800bd54 <__sfp+0x1c>
 800bda0:	2104      	movs	r1, #4
 800bda2:	4638      	mov	r0, r7
 800bda4:	f7ff ff62 	bl	800bc6c <__sfmoreglue>
 800bda8:	4604      	mov	r4, r0
 800bdaa:	6030      	str	r0, [r6, #0]
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d1d5      	bne.n	800bd5c <__sfp+0x24>
 800bdb0:	f7ff ff78 	bl	800bca4 <__sfp_lock_release>
 800bdb4:	230c      	movs	r3, #12
 800bdb6:	603b      	str	r3, [r7, #0]
 800bdb8:	e7ee      	b.n	800bd98 <__sfp+0x60>
 800bdba:	bf00      	nop
 800bdbc:	0800e64c 	.word	0x0800e64c
 800bdc0:	ffff0001 	.word	0xffff0001

0800bdc4 <_fwalk_reent>:
 800bdc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc8:	4606      	mov	r6, r0
 800bdca:	4688      	mov	r8, r1
 800bdcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bdd0:	2700      	movs	r7, #0
 800bdd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdd6:	f1b9 0901 	subs.w	r9, r9, #1
 800bdda:	d505      	bpl.n	800bde8 <_fwalk_reent+0x24>
 800bddc:	6824      	ldr	r4, [r4, #0]
 800bdde:	2c00      	cmp	r4, #0
 800bde0:	d1f7      	bne.n	800bdd2 <_fwalk_reent+0xe>
 800bde2:	4638      	mov	r0, r7
 800bde4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde8:	89ab      	ldrh	r3, [r5, #12]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d907      	bls.n	800bdfe <_fwalk_reent+0x3a>
 800bdee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	d003      	beq.n	800bdfe <_fwalk_reent+0x3a>
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	47c0      	blx	r8
 800bdfc:	4307      	orrs	r7, r0
 800bdfe:	3568      	adds	r5, #104	; 0x68
 800be00:	e7e9      	b.n	800bdd6 <_fwalk_reent+0x12>
	...

0800be04 <_localeconv_r>:
 800be04:	4800      	ldr	r0, [pc, #0]	; (800be08 <_localeconv_r+0x4>)
 800be06:	4770      	bx	lr
 800be08:	20000170 	.word	0x20000170

0800be0c <__retarget_lock_init_recursive>:
 800be0c:	4770      	bx	lr

0800be0e <__retarget_lock_acquire_recursive>:
 800be0e:	4770      	bx	lr

0800be10 <__retarget_lock_release_recursive>:
 800be10:	4770      	bx	lr
	...

0800be14 <malloc>:
 800be14:	4b02      	ldr	r3, [pc, #8]	; (800be20 <malloc+0xc>)
 800be16:	4601      	mov	r1, r0
 800be18:	6818      	ldr	r0, [r3, #0]
 800be1a:	f000 bc27 	b.w	800c66c <_malloc_r>
 800be1e:	bf00      	nop
 800be20:	2000001c 	.word	0x2000001c

0800be24 <_Balloc>:
 800be24:	b570      	push	{r4, r5, r6, lr}
 800be26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be28:	4604      	mov	r4, r0
 800be2a:	460d      	mov	r5, r1
 800be2c:	b976      	cbnz	r6, 800be4c <_Balloc+0x28>
 800be2e:	2010      	movs	r0, #16
 800be30:	f7ff fff0 	bl	800be14 <malloc>
 800be34:	4602      	mov	r2, r0
 800be36:	6260      	str	r0, [r4, #36]	; 0x24
 800be38:	b920      	cbnz	r0, 800be44 <_Balloc+0x20>
 800be3a:	4b18      	ldr	r3, [pc, #96]	; (800be9c <_Balloc+0x78>)
 800be3c:	4818      	ldr	r0, [pc, #96]	; (800bea0 <_Balloc+0x7c>)
 800be3e:	2166      	movs	r1, #102	; 0x66
 800be40:	f001 f89a 	bl	800cf78 <__assert_func>
 800be44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be48:	6006      	str	r6, [r0, #0]
 800be4a:	60c6      	str	r6, [r0, #12]
 800be4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be4e:	68f3      	ldr	r3, [r6, #12]
 800be50:	b183      	cbz	r3, 800be74 <_Balloc+0x50>
 800be52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be5a:	b9b8      	cbnz	r0, 800be8c <_Balloc+0x68>
 800be5c:	2101      	movs	r1, #1
 800be5e:	fa01 f605 	lsl.w	r6, r1, r5
 800be62:	1d72      	adds	r2, r6, #5
 800be64:	0092      	lsls	r2, r2, #2
 800be66:	4620      	mov	r0, r4
 800be68:	f000 fb7e 	bl	800c568 <_calloc_r>
 800be6c:	b160      	cbz	r0, 800be88 <_Balloc+0x64>
 800be6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be72:	e00e      	b.n	800be92 <_Balloc+0x6e>
 800be74:	2221      	movs	r2, #33	; 0x21
 800be76:	2104      	movs	r1, #4
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 fb75 	bl	800c568 <_calloc_r>
 800be7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be80:	60f0      	str	r0, [r6, #12]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1e4      	bne.n	800be52 <_Balloc+0x2e>
 800be88:	2000      	movs	r0, #0
 800be8a:	bd70      	pop	{r4, r5, r6, pc}
 800be8c:	6802      	ldr	r2, [r0, #0]
 800be8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be92:	2300      	movs	r3, #0
 800be94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be98:	e7f7      	b.n	800be8a <_Balloc+0x66>
 800be9a:	bf00      	nop
 800be9c:	0800e792 	.word	0x0800e792
 800bea0:	0800e878 	.word	0x0800e878

0800bea4 <_Bfree>:
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bea8:	4605      	mov	r5, r0
 800beaa:	460c      	mov	r4, r1
 800beac:	b976      	cbnz	r6, 800becc <_Bfree+0x28>
 800beae:	2010      	movs	r0, #16
 800beb0:	f7ff ffb0 	bl	800be14 <malloc>
 800beb4:	4602      	mov	r2, r0
 800beb6:	6268      	str	r0, [r5, #36]	; 0x24
 800beb8:	b920      	cbnz	r0, 800bec4 <_Bfree+0x20>
 800beba:	4b09      	ldr	r3, [pc, #36]	; (800bee0 <_Bfree+0x3c>)
 800bebc:	4809      	ldr	r0, [pc, #36]	; (800bee4 <_Bfree+0x40>)
 800bebe:	218a      	movs	r1, #138	; 0x8a
 800bec0:	f001 f85a 	bl	800cf78 <__assert_func>
 800bec4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bec8:	6006      	str	r6, [r0, #0]
 800beca:	60c6      	str	r6, [r0, #12]
 800becc:	b13c      	cbz	r4, 800bede <_Bfree+0x3a>
 800bece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bed0:	6862      	ldr	r2, [r4, #4]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bed8:	6021      	str	r1, [r4, #0]
 800beda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bede:	bd70      	pop	{r4, r5, r6, pc}
 800bee0:	0800e792 	.word	0x0800e792
 800bee4:	0800e878 	.word	0x0800e878

0800bee8 <__multadd>:
 800bee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beec:	690d      	ldr	r5, [r1, #16]
 800beee:	4607      	mov	r7, r0
 800bef0:	460c      	mov	r4, r1
 800bef2:	461e      	mov	r6, r3
 800bef4:	f101 0c14 	add.w	ip, r1, #20
 800bef8:	2000      	movs	r0, #0
 800befa:	f8dc 3000 	ldr.w	r3, [ip]
 800befe:	b299      	uxth	r1, r3
 800bf00:	fb02 6101 	mla	r1, r2, r1, r6
 800bf04:	0c1e      	lsrs	r6, r3, #16
 800bf06:	0c0b      	lsrs	r3, r1, #16
 800bf08:	fb02 3306 	mla	r3, r2, r6, r3
 800bf0c:	b289      	uxth	r1, r1
 800bf0e:	3001      	adds	r0, #1
 800bf10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf14:	4285      	cmp	r5, r0
 800bf16:	f84c 1b04 	str.w	r1, [ip], #4
 800bf1a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf1e:	dcec      	bgt.n	800befa <__multadd+0x12>
 800bf20:	b30e      	cbz	r6, 800bf66 <__multadd+0x7e>
 800bf22:	68a3      	ldr	r3, [r4, #8]
 800bf24:	42ab      	cmp	r3, r5
 800bf26:	dc19      	bgt.n	800bf5c <__multadd+0x74>
 800bf28:	6861      	ldr	r1, [r4, #4]
 800bf2a:	4638      	mov	r0, r7
 800bf2c:	3101      	adds	r1, #1
 800bf2e:	f7ff ff79 	bl	800be24 <_Balloc>
 800bf32:	4680      	mov	r8, r0
 800bf34:	b928      	cbnz	r0, 800bf42 <__multadd+0x5a>
 800bf36:	4602      	mov	r2, r0
 800bf38:	4b0c      	ldr	r3, [pc, #48]	; (800bf6c <__multadd+0x84>)
 800bf3a:	480d      	ldr	r0, [pc, #52]	; (800bf70 <__multadd+0x88>)
 800bf3c:	21b5      	movs	r1, #181	; 0xb5
 800bf3e:	f001 f81b 	bl	800cf78 <__assert_func>
 800bf42:	6922      	ldr	r2, [r4, #16]
 800bf44:	3202      	adds	r2, #2
 800bf46:	f104 010c 	add.w	r1, r4, #12
 800bf4a:	0092      	lsls	r2, r2, #2
 800bf4c:	300c      	adds	r0, #12
 800bf4e:	f7fe f92f 	bl	800a1b0 <memcpy>
 800bf52:	4621      	mov	r1, r4
 800bf54:	4638      	mov	r0, r7
 800bf56:	f7ff ffa5 	bl	800bea4 <_Bfree>
 800bf5a:	4644      	mov	r4, r8
 800bf5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf60:	3501      	adds	r5, #1
 800bf62:	615e      	str	r6, [r3, #20]
 800bf64:	6125      	str	r5, [r4, #16]
 800bf66:	4620      	mov	r0, r4
 800bf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf6c:	0800e804 	.word	0x0800e804
 800bf70:	0800e878 	.word	0x0800e878

0800bf74 <__hi0bits>:
 800bf74:	0c03      	lsrs	r3, r0, #16
 800bf76:	041b      	lsls	r3, r3, #16
 800bf78:	b9d3      	cbnz	r3, 800bfb0 <__hi0bits+0x3c>
 800bf7a:	0400      	lsls	r0, r0, #16
 800bf7c:	2310      	movs	r3, #16
 800bf7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf82:	bf04      	itt	eq
 800bf84:	0200      	lsleq	r0, r0, #8
 800bf86:	3308      	addeq	r3, #8
 800bf88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf8c:	bf04      	itt	eq
 800bf8e:	0100      	lsleq	r0, r0, #4
 800bf90:	3304      	addeq	r3, #4
 800bf92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bf96:	bf04      	itt	eq
 800bf98:	0080      	lsleq	r0, r0, #2
 800bf9a:	3302      	addeq	r3, #2
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	db05      	blt.n	800bfac <__hi0bits+0x38>
 800bfa0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfa4:	f103 0301 	add.w	r3, r3, #1
 800bfa8:	bf08      	it	eq
 800bfaa:	2320      	moveq	r3, #32
 800bfac:	4618      	mov	r0, r3
 800bfae:	4770      	bx	lr
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	e7e4      	b.n	800bf7e <__hi0bits+0xa>

0800bfb4 <__lo0bits>:
 800bfb4:	6803      	ldr	r3, [r0, #0]
 800bfb6:	f013 0207 	ands.w	r2, r3, #7
 800bfba:	4601      	mov	r1, r0
 800bfbc:	d00b      	beq.n	800bfd6 <__lo0bits+0x22>
 800bfbe:	07da      	lsls	r2, r3, #31
 800bfc0:	d423      	bmi.n	800c00a <__lo0bits+0x56>
 800bfc2:	0798      	lsls	r0, r3, #30
 800bfc4:	bf49      	itett	mi
 800bfc6:	085b      	lsrmi	r3, r3, #1
 800bfc8:	089b      	lsrpl	r3, r3, #2
 800bfca:	2001      	movmi	r0, #1
 800bfcc:	600b      	strmi	r3, [r1, #0]
 800bfce:	bf5c      	itt	pl
 800bfd0:	600b      	strpl	r3, [r1, #0]
 800bfd2:	2002      	movpl	r0, #2
 800bfd4:	4770      	bx	lr
 800bfd6:	b298      	uxth	r0, r3
 800bfd8:	b9a8      	cbnz	r0, 800c006 <__lo0bits+0x52>
 800bfda:	0c1b      	lsrs	r3, r3, #16
 800bfdc:	2010      	movs	r0, #16
 800bfde:	b2da      	uxtb	r2, r3
 800bfe0:	b90a      	cbnz	r2, 800bfe6 <__lo0bits+0x32>
 800bfe2:	3008      	adds	r0, #8
 800bfe4:	0a1b      	lsrs	r3, r3, #8
 800bfe6:	071a      	lsls	r2, r3, #28
 800bfe8:	bf04      	itt	eq
 800bfea:	091b      	lsreq	r3, r3, #4
 800bfec:	3004      	addeq	r0, #4
 800bfee:	079a      	lsls	r2, r3, #30
 800bff0:	bf04      	itt	eq
 800bff2:	089b      	lsreq	r3, r3, #2
 800bff4:	3002      	addeq	r0, #2
 800bff6:	07da      	lsls	r2, r3, #31
 800bff8:	d403      	bmi.n	800c002 <__lo0bits+0x4e>
 800bffa:	085b      	lsrs	r3, r3, #1
 800bffc:	f100 0001 	add.w	r0, r0, #1
 800c000:	d005      	beq.n	800c00e <__lo0bits+0x5a>
 800c002:	600b      	str	r3, [r1, #0]
 800c004:	4770      	bx	lr
 800c006:	4610      	mov	r0, r2
 800c008:	e7e9      	b.n	800bfde <__lo0bits+0x2a>
 800c00a:	2000      	movs	r0, #0
 800c00c:	4770      	bx	lr
 800c00e:	2020      	movs	r0, #32
 800c010:	4770      	bx	lr
	...

0800c014 <__i2b>:
 800c014:	b510      	push	{r4, lr}
 800c016:	460c      	mov	r4, r1
 800c018:	2101      	movs	r1, #1
 800c01a:	f7ff ff03 	bl	800be24 <_Balloc>
 800c01e:	4602      	mov	r2, r0
 800c020:	b928      	cbnz	r0, 800c02e <__i2b+0x1a>
 800c022:	4b05      	ldr	r3, [pc, #20]	; (800c038 <__i2b+0x24>)
 800c024:	4805      	ldr	r0, [pc, #20]	; (800c03c <__i2b+0x28>)
 800c026:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c02a:	f000 ffa5 	bl	800cf78 <__assert_func>
 800c02e:	2301      	movs	r3, #1
 800c030:	6144      	str	r4, [r0, #20]
 800c032:	6103      	str	r3, [r0, #16]
 800c034:	bd10      	pop	{r4, pc}
 800c036:	bf00      	nop
 800c038:	0800e804 	.word	0x0800e804
 800c03c:	0800e878 	.word	0x0800e878

0800c040 <__multiply>:
 800c040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c044:	4691      	mov	r9, r2
 800c046:	690a      	ldr	r2, [r1, #16]
 800c048:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	bfb8      	it	lt
 800c050:	460b      	movlt	r3, r1
 800c052:	460c      	mov	r4, r1
 800c054:	bfbc      	itt	lt
 800c056:	464c      	movlt	r4, r9
 800c058:	4699      	movlt	r9, r3
 800c05a:	6927      	ldr	r7, [r4, #16]
 800c05c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c060:	68a3      	ldr	r3, [r4, #8]
 800c062:	6861      	ldr	r1, [r4, #4]
 800c064:	eb07 060a 	add.w	r6, r7, sl
 800c068:	42b3      	cmp	r3, r6
 800c06a:	b085      	sub	sp, #20
 800c06c:	bfb8      	it	lt
 800c06e:	3101      	addlt	r1, #1
 800c070:	f7ff fed8 	bl	800be24 <_Balloc>
 800c074:	b930      	cbnz	r0, 800c084 <__multiply+0x44>
 800c076:	4602      	mov	r2, r0
 800c078:	4b44      	ldr	r3, [pc, #272]	; (800c18c <__multiply+0x14c>)
 800c07a:	4845      	ldr	r0, [pc, #276]	; (800c190 <__multiply+0x150>)
 800c07c:	f240 115d 	movw	r1, #349	; 0x15d
 800c080:	f000 ff7a 	bl	800cf78 <__assert_func>
 800c084:	f100 0514 	add.w	r5, r0, #20
 800c088:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c08c:	462b      	mov	r3, r5
 800c08e:	2200      	movs	r2, #0
 800c090:	4543      	cmp	r3, r8
 800c092:	d321      	bcc.n	800c0d8 <__multiply+0x98>
 800c094:	f104 0314 	add.w	r3, r4, #20
 800c098:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c09c:	f109 0314 	add.w	r3, r9, #20
 800c0a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0a4:	9202      	str	r2, [sp, #8]
 800c0a6:	1b3a      	subs	r2, r7, r4
 800c0a8:	3a15      	subs	r2, #21
 800c0aa:	f022 0203 	bic.w	r2, r2, #3
 800c0ae:	3204      	adds	r2, #4
 800c0b0:	f104 0115 	add.w	r1, r4, #21
 800c0b4:	428f      	cmp	r7, r1
 800c0b6:	bf38      	it	cc
 800c0b8:	2204      	movcc	r2, #4
 800c0ba:	9201      	str	r2, [sp, #4]
 800c0bc:	9a02      	ldr	r2, [sp, #8]
 800c0be:	9303      	str	r3, [sp, #12]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d80c      	bhi.n	800c0de <__multiply+0x9e>
 800c0c4:	2e00      	cmp	r6, #0
 800c0c6:	dd03      	ble.n	800c0d0 <__multiply+0x90>
 800c0c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d05a      	beq.n	800c186 <__multiply+0x146>
 800c0d0:	6106      	str	r6, [r0, #16]
 800c0d2:	b005      	add	sp, #20
 800c0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0d8:	f843 2b04 	str.w	r2, [r3], #4
 800c0dc:	e7d8      	b.n	800c090 <__multiply+0x50>
 800c0de:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0e2:	f1ba 0f00 	cmp.w	sl, #0
 800c0e6:	d024      	beq.n	800c132 <__multiply+0xf2>
 800c0e8:	f104 0e14 	add.w	lr, r4, #20
 800c0ec:	46a9      	mov	r9, r5
 800c0ee:	f04f 0c00 	mov.w	ip, #0
 800c0f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c0f6:	f8d9 1000 	ldr.w	r1, [r9]
 800c0fa:	fa1f fb82 	uxth.w	fp, r2
 800c0fe:	b289      	uxth	r1, r1
 800c100:	fb0a 110b 	mla	r1, sl, fp, r1
 800c104:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c108:	f8d9 2000 	ldr.w	r2, [r9]
 800c10c:	4461      	add	r1, ip
 800c10e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c112:	fb0a c20b 	mla	r2, sl, fp, ip
 800c116:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c11a:	b289      	uxth	r1, r1
 800c11c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c120:	4577      	cmp	r7, lr
 800c122:	f849 1b04 	str.w	r1, [r9], #4
 800c126:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c12a:	d8e2      	bhi.n	800c0f2 <__multiply+0xb2>
 800c12c:	9a01      	ldr	r2, [sp, #4]
 800c12e:	f845 c002 	str.w	ip, [r5, r2]
 800c132:	9a03      	ldr	r2, [sp, #12]
 800c134:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c138:	3304      	adds	r3, #4
 800c13a:	f1b9 0f00 	cmp.w	r9, #0
 800c13e:	d020      	beq.n	800c182 <__multiply+0x142>
 800c140:	6829      	ldr	r1, [r5, #0]
 800c142:	f104 0c14 	add.w	ip, r4, #20
 800c146:	46ae      	mov	lr, r5
 800c148:	f04f 0a00 	mov.w	sl, #0
 800c14c:	f8bc b000 	ldrh.w	fp, [ip]
 800c150:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c154:	fb09 220b 	mla	r2, r9, fp, r2
 800c158:	4492      	add	sl, r2
 800c15a:	b289      	uxth	r1, r1
 800c15c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c160:	f84e 1b04 	str.w	r1, [lr], #4
 800c164:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c168:	f8be 1000 	ldrh.w	r1, [lr]
 800c16c:	0c12      	lsrs	r2, r2, #16
 800c16e:	fb09 1102 	mla	r1, r9, r2, r1
 800c172:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c176:	4567      	cmp	r7, ip
 800c178:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c17c:	d8e6      	bhi.n	800c14c <__multiply+0x10c>
 800c17e:	9a01      	ldr	r2, [sp, #4]
 800c180:	50a9      	str	r1, [r5, r2]
 800c182:	3504      	adds	r5, #4
 800c184:	e79a      	b.n	800c0bc <__multiply+0x7c>
 800c186:	3e01      	subs	r6, #1
 800c188:	e79c      	b.n	800c0c4 <__multiply+0x84>
 800c18a:	bf00      	nop
 800c18c:	0800e804 	.word	0x0800e804
 800c190:	0800e878 	.word	0x0800e878

0800c194 <__pow5mult>:
 800c194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c198:	4615      	mov	r5, r2
 800c19a:	f012 0203 	ands.w	r2, r2, #3
 800c19e:	4606      	mov	r6, r0
 800c1a0:	460f      	mov	r7, r1
 800c1a2:	d007      	beq.n	800c1b4 <__pow5mult+0x20>
 800c1a4:	4c25      	ldr	r4, [pc, #148]	; (800c23c <__pow5mult+0xa8>)
 800c1a6:	3a01      	subs	r2, #1
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1ae:	f7ff fe9b 	bl	800bee8 <__multadd>
 800c1b2:	4607      	mov	r7, r0
 800c1b4:	10ad      	asrs	r5, r5, #2
 800c1b6:	d03d      	beq.n	800c234 <__pow5mult+0xa0>
 800c1b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1ba:	b97c      	cbnz	r4, 800c1dc <__pow5mult+0x48>
 800c1bc:	2010      	movs	r0, #16
 800c1be:	f7ff fe29 	bl	800be14 <malloc>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	6270      	str	r0, [r6, #36]	; 0x24
 800c1c6:	b928      	cbnz	r0, 800c1d4 <__pow5mult+0x40>
 800c1c8:	4b1d      	ldr	r3, [pc, #116]	; (800c240 <__pow5mult+0xac>)
 800c1ca:	481e      	ldr	r0, [pc, #120]	; (800c244 <__pow5mult+0xb0>)
 800c1cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c1d0:	f000 fed2 	bl	800cf78 <__assert_func>
 800c1d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1d8:	6004      	str	r4, [r0, #0]
 800c1da:	60c4      	str	r4, [r0, #12]
 800c1dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c1e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1e4:	b94c      	cbnz	r4, 800c1fa <__pow5mult+0x66>
 800c1e6:	f240 2171 	movw	r1, #625	; 0x271
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	f7ff ff12 	bl	800c014 <__i2b>
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	6003      	str	r3, [r0, #0]
 800c1fa:	f04f 0900 	mov.w	r9, #0
 800c1fe:	07eb      	lsls	r3, r5, #31
 800c200:	d50a      	bpl.n	800c218 <__pow5mult+0x84>
 800c202:	4639      	mov	r1, r7
 800c204:	4622      	mov	r2, r4
 800c206:	4630      	mov	r0, r6
 800c208:	f7ff ff1a 	bl	800c040 <__multiply>
 800c20c:	4639      	mov	r1, r7
 800c20e:	4680      	mov	r8, r0
 800c210:	4630      	mov	r0, r6
 800c212:	f7ff fe47 	bl	800bea4 <_Bfree>
 800c216:	4647      	mov	r7, r8
 800c218:	106d      	asrs	r5, r5, #1
 800c21a:	d00b      	beq.n	800c234 <__pow5mult+0xa0>
 800c21c:	6820      	ldr	r0, [r4, #0]
 800c21e:	b938      	cbnz	r0, 800c230 <__pow5mult+0x9c>
 800c220:	4622      	mov	r2, r4
 800c222:	4621      	mov	r1, r4
 800c224:	4630      	mov	r0, r6
 800c226:	f7ff ff0b 	bl	800c040 <__multiply>
 800c22a:	6020      	str	r0, [r4, #0]
 800c22c:	f8c0 9000 	str.w	r9, [r0]
 800c230:	4604      	mov	r4, r0
 800c232:	e7e4      	b.n	800c1fe <__pow5mult+0x6a>
 800c234:	4638      	mov	r0, r7
 800c236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c23a:	bf00      	nop
 800c23c:	0800e9c8 	.word	0x0800e9c8
 800c240:	0800e792 	.word	0x0800e792
 800c244:	0800e878 	.word	0x0800e878

0800c248 <__lshift>:
 800c248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c24c:	460c      	mov	r4, r1
 800c24e:	6849      	ldr	r1, [r1, #4]
 800c250:	6923      	ldr	r3, [r4, #16]
 800c252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c256:	68a3      	ldr	r3, [r4, #8]
 800c258:	4607      	mov	r7, r0
 800c25a:	4691      	mov	r9, r2
 800c25c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c260:	f108 0601 	add.w	r6, r8, #1
 800c264:	42b3      	cmp	r3, r6
 800c266:	db0b      	blt.n	800c280 <__lshift+0x38>
 800c268:	4638      	mov	r0, r7
 800c26a:	f7ff fddb 	bl	800be24 <_Balloc>
 800c26e:	4605      	mov	r5, r0
 800c270:	b948      	cbnz	r0, 800c286 <__lshift+0x3e>
 800c272:	4602      	mov	r2, r0
 800c274:	4b2a      	ldr	r3, [pc, #168]	; (800c320 <__lshift+0xd8>)
 800c276:	482b      	ldr	r0, [pc, #172]	; (800c324 <__lshift+0xdc>)
 800c278:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c27c:	f000 fe7c 	bl	800cf78 <__assert_func>
 800c280:	3101      	adds	r1, #1
 800c282:	005b      	lsls	r3, r3, #1
 800c284:	e7ee      	b.n	800c264 <__lshift+0x1c>
 800c286:	2300      	movs	r3, #0
 800c288:	f100 0114 	add.w	r1, r0, #20
 800c28c:	f100 0210 	add.w	r2, r0, #16
 800c290:	4618      	mov	r0, r3
 800c292:	4553      	cmp	r3, sl
 800c294:	db37      	blt.n	800c306 <__lshift+0xbe>
 800c296:	6920      	ldr	r0, [r4, #16]
 800c298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c29c:	f104 0314 	add.w	r3, r4, #20
 800c2a0:	f019 091f 	ands.w	r9, r9, #31
 800c2a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c2ac:	d02f      	beq.n	800c30e <__lshift+0xc6>
 800c2ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c2b2:	468a      	mov	sl, r1
 800c2b4:	f04f 0c00 	mov.w	ip, #0
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	fa02 f209 	lsl.w	r2, r2, r9
 800c2be:	ea42 020c 	orr.w	r2, r2, ip
 800c2c2:	f84a 2b04 	str.w	r2, [sl], #4
 800c2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ca:	4298      	cmp	r0, r3
 800c2cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c2d0:	d8f2      	bhi.n	800c2b8 <__lshift+0x70>
 800c2d2:	1b03      	subs	r3, r0, r4
 800c2d4:	3b15      	subs	r3, #21
 800c2d6:	f023 0303 	bic.w	r3, r3, #3
 800c2da:	3304      	adds	r3, #4
 800c2dc:	f104 0215 	add.w	r2, r4, #21
 800c2e0:	4290      	cmp	r0, r2
 800c2e2:	bf38      	it	cc
 800c2e4:	2304      	movcc	r3, #4
 800c2e6:	f841 c003 	str.w	ip, [r1, r3]
 800c2ea:	f1bc 0f00 	cmp.w	ip, #0
 800c2ee:	d001      	beq.n	800c2f4 <__lshift+0xac>
 800c2f0:	f108 0602 	add.w	r6, r8, #2
 800c2f4:	3e01      	subs	r6, #1
 800c2f6:	4638      	mov	r0, r7
 800c2f8:	612e      	str	r6, [r5, #16]
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	f7ff fdd2 	bl	800bea4 <_Bfree>
 800c300:	4628      	mov	r0, r5
 800c302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c306:	f842 0f04 	str.w	r0, [r2, #4]!
 800c30a:	3301      	adds	r3, #1
 800c30c:	e7c1      	b.n	800c292 <__lshift+0x4a>
 800c30e:	3904      	subs	r1, #4
 800c310:	f853 2b04 	ldr.w	r2, [r3], #4
 800c314:	f841 2f04 	str.w	r2, [r1, #4]!
 800c318:	4298      	cmp	r0, r3
 800c31a:	d8f9      	bhi.n	800c310 <__lshift+0xc8>
 800c31c:	e7ea      	b.n	800c2f4 <__lshift+0xac>
 800c31e:	bf00      	nop
 800c320:	0800e804 	.word	0x0800e804
 800c324:	0800e878 	.word	0x0800e878

0800c328 <__mcmp>:
 800c328:	b530      	push	{r4, r5, lr}
 800c32a:	6902      	ldr	r2, [r0, #16]
 800c32c:	690c      	ldr	r4, [r1, #16]
 800c32e:	1b12      	subs	r2, r2, r4
 800c330:	d10e      	bne.n	800c350 <__mcmp+0x28>
 800c332:	f100 0314 	add.w	r3, r0, #20
 800c336:	3114      	adds	r1, #20
 800c338:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c33c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c340:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c344:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c348:	42a5      	cmp	r5, r4
 800c34a:	d003      	beq.n	800c354 <__mcmp+0x2c>
 800c34c:	d305      	bcc.n	800c35a <__mcmp+0x32>
 800c34e:	2201      	movs	r2, #1
 800c350:	4610      	mov	r0, r2
 800c352:	bd30      	pop	{r4, r5, pc}
 800c354:	4283      	cmp	r3, r0
 800c356:	d3f3      	bcc.n	800c340 <__mcmp+0x18>
 800c358:	e7fa      	b.n	800c350 <__mcmp+0x28>
 800c35a:	f04f 32ff 	mov.w	r2, #4294967295
 800c35e:	e7f7      	b.n	800c350 <__mcmp+0x28>

0800c360 <__mdiff>:
 800c360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c364:	460c      	mov	r4, r1
 800c366:	4606      	mov	r6, r0
 800c368:	4611      	mov	r1, r2
 800c36a:	4620      	mov	r0, r4
 800c36c:	4690      	mov	r8, r2
 800c36e:	f7ff ffdb 	bl	800c328 <__mcmp>
 800c372:	1e05      	subs	r5, r0, #0
 800c374:	d110      	bne.n	800c398 <__mdiff+0x38>
 800c376:	4629      	mov	r1, r5
 800c378:	4630      	mov	r0, r6
 800c37a:	f7ff fd53 	bl	800be24 <_Balloc>
 800c37e:	b930      	cbnz	r0, 800c38e <__mdiff+0x2e>
 800c380:	4b3a      	ldr	r3, [pc, #232]	; (800c46c <__mdiff+0x10c>)
 800c382:	4602      	mov	r2, r0
 800c384:	f240 2132 	movw	r1, #562	; 0x232
 800c388:	4839      	ldr	r0, [pc, #228]	; (800c470 <__mdiff+0x110>)
 800c38a:	f000 fdf5 	bl	800cf78 <__assert_func>
 800c38e:	2301      	movs	r3, #1
 800c390:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c398:	bfa4      	itt	ge
 800c39a:	4643      	movge	r3, r8
 800c39c:	46a0      	movge	r8, r4
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3a4:	bfa6      	itte	ge
 800c3a6:	461c      	movge	r4, r3
 800c3a8:	2500      	movge	r5, #0
 800c3aa:	2501      	movlt	r5, #1
 800c3ac:	f7ff fd3a 	bl	800be24 <_Balloc>
 800c3b0:	b920      	cbnz	r0, 800c3bc <__mdiff+0x5c>
 800c3b2:	4b2e      	ldr	r3, [pc, #184]	; (800c46c <__mdiff+0x10c>)
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c3ba:	e7e5      	b.n	800c388 <__mdiff+0x28>
 800c3bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c3c0:	6926      	ldr	r6, [r4, #16]
 800c3c2:	60c5      	str	r5, [r0, #12]
 800c3c4:	f104 0914 	add.w	r9, r4, #20
 800c3c8:	f108 0514 	add.w	r5, r8, #20
 800c3cc:	f100 0e14 	add.w	lr, r0, #20
 800c3d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c3d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c3d8:	f108 0210 	add.w	r2, r8, #16
 800c3dc:	46f2      	mov	sl, lr
 800c3de:	2100      	movs	r1, #0
 800c3e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3e8:	fa1f f883 	uxth.w	r8, r3
 800c3ec:	fa11 f18b 	uxtah	r1, r1, fp
 800c3f0:	0c1b      	lsrs	r3, r3, #16
 800c3f2:	eba1 0808 	sub.w	r8, r1, r8
 800c3f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c3fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c3fe:	fa1f f888 	uxth.w	r8, r8
 800c402:	1419      	asrs	r1, r3, #16
 800c404:	454e      	cmp	r6, r9
 800c406:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c40a:	f84a 3b04 	str.w	r3, [sl], #4
 800c40e:	d8e7      	bhi.n	800c3e0 <__mdiff+0x80>
 800c410:	1b33      	subs	r3, r6, r4
 800c412:	3b15      	subs	r3, #21
 800c414:	f023 0303 	bic.w	r3, r3, #3
 800c418:	3304      	adds	r3, #4
 800c41a:	3415      	adds	r4, #21
 800c41c:	42a6      	cmp	r6, r4
 800c41e:	bf38      	it	cc
 800c420:	2304      	movcc	r3, #4
 800c422:	441d      	add	r5, r3
 800c424:	4473      	add	r3, lr
 800c426:	469e      	mov	lr, r3
 800c428:	462e      	mov	r6, r5
 800c42a:	4566      	cmp	r6, ip
 800c42c:	d30e      	bcc.n	800c44c <__mdiff+0xec>
 800c42e:	f10c 0203 	add.w	r2, ip, #3
 800c432:	1b52      	subs	r2, r2, r5
 800c434:	f022 0203 	bic.w	r2, r2, #3
 800c438:	3d03      	subs	r5, #3
 800c43a:	45ac      	cmp	ip, r5
 800c43c:	bf38      	it	cc
 800c43e:	2200      	movcc	r2, #0
 800c440:	441a      	add	r2, r3
 800c442:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c446:	b17b      	cbz	r3, 800c468 <__mdiff+0x108>
 800c448:	6107      	str	r7, [r0, #16]
 800c44a:	e7a3      	b.n	800c394 <__mdiff+0x34>
 800c44c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c450:	fa11 f288 	uxtah	r2, r1, r8
 800c454:	1414      	asrs	r4, r2, #16
 800c456:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c45a:	b292      	uxth	r2, r2
 800c45c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c460:	f84e 2b04 	str.w	r2, [lr], #4
 800c464:	1421      	asrs	r1, r4, #16
 800c466:	e7e0      	b.n	800c42a <__mdiff+0xca>
 800c468:	3f01      	subs	r7, #1
 800c46a:	e7ea      	b.n	800c442 <__mdiff+0xe2>
 800c46c:	0800e804 	.word	0x0800e804
 800c470:	0800e878 	.word	0x0800e878

0800c474 <__d2b>:
 800c474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c478:	4689      	mov	r9, r1
 800c47a:	2101      	movs	r1, #1
 800c47c:	ec57 6b10 	vmov	r6, r7, d0
 800c480:	4690      	mov	r8, r2
 800c482:	f7ff fccf 	bl	800be24 <_Balloc>
 800c486:	4604      	mov	r4, r0
 800c488:	b930      	cbnz	r0, 800c498 <__d2b+0x24>
 800c48a:	4602      	mov	r2, r0
 800c48c:	4b25      	ldr	r3, [pc, #148]	; (800c524 <__d2b+0xb0>)
 800c48e:	4826      	ldr	r0, [pc, #152]	; (800c528 <__d2b+0xb4>)
 800c490:	f240 310a 	movw	r1, #778	; 0x30a
 800c494:	f000 fd70 	bl	800cf78 <__assert_func>
 800c498:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c49c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c4a0:	bb35      	cbnz	r5, 800c4f0 <__d2b+0x7c>
 800c4a2:	2e00      	cmp	r6, #0
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	d028      	beq.n	800c4fa <__d2b+0x86>
 800c4a8:	4668      	mov	r0, sp
 800c4aa:	9600      	str	r6, [sp, #0]
 800c4ac:	f7ff fd82 	bl	800bfb4 <__lo0bits>
 800c4b0:	9900      	ldr	r1, [sp, #0]
 800c4b2:	b300      	cbz	r0, 800c4f6 <__d2b+0x82>
 800c4b4:	9a01      	ldr	r2, [sp, #4]
 800c4b6:	f1c0 0320 	rsb	r3, r0, #32
 800c4ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c4be:	430b      	orrs	r3, r1
 800c4c0:	40c2      	lsrs	r2, r0
 800c4c2:	6163      	str	r3, [r4, #20]
 800c4c4:	9201      	str	r2, [sp, #4]
 800c4c6:	9b01      	ldr	r3, [sp, #4]
 800c4c8:	61a3      	str	r3, [r4, #24]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	bf14      	ite	ne
 800c4ce:	2202      	movne	r2, #2
 800c4d0:	2201      	moveq	r2, #1
 800c4d2:	6122      	str	r2, [r4, #16]
 800c4d4:	b1d5      	cbz	r5, 800c50c <__d2b+0x98>
 800c4d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c4da:	4405      	add	r5, r0
 800c4dc:	f8c9 5000 	str.w	r5, [r9]
 800c4e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4e4:	f8c8 0000 	str.w	r0, [r8]
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	b003      	add	sp, #12
 800c4ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4f4:	e7d5      	b.n	800c4a2 <__d2b+0x2e>
 800c4f6:	6161      	str	r1, [r4, #20]
 800c4f8:	e7e5      	b.n	800c4c6 <__d2b+0x52>
 800c4fa:	a801      	add	r0, sp, #4
 800c4fc:	f7ff fd5a 	bl	800bfb4 <__lo0bits>
 800c500:	9b01      	ldr	r3, [sp, #4]
 800c502:	6163      	str	r3, [r4, #20]
 800c504:	2201      	movs	r2, #1
 800c506:	6122      	str	r2, [r4, #16]
 800c508:	3020      	adds	r0, #32
 800c50a:	e7e3      	b.n	800c4d4 <__d2b+0x60>
 800c50c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c510:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c514:	f8c9 0000 	str.w	r0, [r9]
 800c518:	6918      	ldr	r0, [r3, #16]
 800c51a:	f7ff fd2b 	bl	800bf74 <__hi0bits>
 800c51e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c522:	e7df      	b.n	800c4e4 <__d2b+0x70>
 800c524:	0800e804 	.word	0x0800e804
 800c528:	0800e878 	.word	0x0800e878

0800c52c <_mprec_log10>:
 800c52c:	2817      	cmp	r0, #23
 800c52e:	b5d0      	push	{r4, r6, r7, lr}
 800c530:	4604      	mov	r4, r0
 800c532:	dc07      	bgt.n	800c544 <_mprec_log10+0x18>
 800c534:	4809      	ldr	r0, [pc, #36]	; (800c55c <_mprec_log10+0x30>)
 800c536:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800c53a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c53e:	ec41 0b10 	vmov	d0, r0, r1
 800c542:	bdd0      	pop	{r4, r6, r7, pc}
 800c544:	4906      	ldr	r1, [pc, #24]	; (800c560 <_mprec_log10+0x34>)
 800c546:	4f07      	ldr	r7, [pc, #28]	; (800c564 <_mprec_log10+0x38>)
 800c548:	2000      	movs	r0, #0
 800c54a:	2600      	movs	r6, #0
 800c54c:	4632      	mov	r2, r6
 800c54e:	463b      	mov	r3, r7
 800c550:	f7f4 f852 	bl	80005f8 <__aeabi_dmul>
 800c554:	3c01      	subs	r4, #1
 800c556:	d1f9      	bne.n	800c54c <_mprec_log10+0x20>
 800c558:	e7f1      	b.n	800c53e <_mprec_log10+0x12>
 800c55a:	bf00      	nop
 800c55c:	0800e900 	.word	0x0800e900
 800c560:	3ff00000 	.word	0x3ff00000
 800c564:	40240000 	.word	0x40240000

0800c568 <_calloc_r>:
 800c568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c56a:	fba1 2402 	umull	r2, r4, r1, r2
 800c56e:	b94c      	cbnz	r4, 800c584 <_calloc_r+0x1c>
 800c570:	4611      	mov	r1, r2
 800c572:	9201      	str	r2, [sp, #4]
 800c574:	f000 f87a 	bl	800c66c <_malloc_r>
 800c578:	9a01      	ldr	r2, [sp, #4]
 800c57a:	4605      	mov	r5, r0
 800c57c:	b930      	cbnz	r0, 800c58c <_calloc_r+0x24>
 800c57e:	4628      	mov	r0, r5
 800c580:	b003      	add	sp, #12
 800c582:	bd30      	pop	{r4, r5, pc}
 800c584:	220c      	movs	r2, #12
 800c586:	6002      	str	r2, [r0, #0]
 800c588:	2500      	movs	r5, #0
 800c58a:	e7f8      	b.n	800c57e <_calloc_r+0x16>
 800c58c:	4621      	mov	r1, r4
 800c58e:	f7fd fe1d 	bl	800a1cc <memset>
 800c592:	e7f4      	b.n	800c57e <_calloc_r+0x16>

0800c594 <_free_r>:
 800c594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c596:	2900      	cmp	r1, #0
 800c598:	d044      	beq.n	800c624 <_free_r+0x90>
 800c59a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c59e:	9001      	str	r0, [sp, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f1a1 0404 	sub.w	r4, r1, #4
 800c5a6:	bfb8      	it	lt
 800c5a8:	18e4      	addlt	r4, r4, r3
 800c5aa:	f000 fe8b 	bl	800d2c4 <__malloc_lock>
 800c5ae:	4a1e      	ldr	r2, [pc, #120]	; (800c628 <_free_r+0x94>)
 800c5b0:	9801      	ldr	r0, [sp, #4]
 800c5b2:	6813      	ldr	r3, [r2, #0]
 800c5b4:	b933      	cbnz	r3, 800c5c4 <_free_r+0x30>
 800c5b6:	6063      	str	r3, [r4, #4]
 800c5b8:	6014      	str	r4, [r2, #0]
 800c5ba:	b003      	add	sp, #12
 800c5bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5c0:	f000 be86 	b.w	800d2d0 <__malloc_unlock>
 800c5c4:	42a3      	cmp	r3, r4
 800c5c6:	d908      	bls.n	800c5da <_free_r+0x46>
 800c5c8:	6825      	ldr	r5, [r4, #0]
 800c5ca:	1961      	adds	r1, r4, r5
 800c5cc:	428b      	cmp	r3, r1
 800c5ce:	bf01      	itttt	eq
 800c5d0:	6819      	ldreq	r1, [r3, #0]
 800c5d2:	685b      	ldreq	r3, [r3, #4]
 800c5d4:	1949      	addeq	r1, r1, r5
 800c5d6:	6021      	streq	r1, [r4, #0]
 800c5d8:	e7ed      	b.n	800c5b6 <_free_r+0x22>
 800c5da:	461a      	mov	r2, r3
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	b10b      	cbz	r3, 800c5e4 <_free_r+0x50>
 800c5e0:	42a3      	cmp	r3, r4
 800c5e2:	d9fa      	bls.n	800c5da <_free_r+0x46>
 800c5e4:	6811      	ldr	r1, [r2, #0]
 800c5e6:	1855      	adds	r5, r2, r1
 800c5e8:	42a5      	cmp	r5, r4
 800c5ea:	d10b      	bne.n	800c604 <_free_r+0x70>
 800c5ec:	6824      	ldr	r4, [r4, #0]
 800c5ee:	4421      	add	r1, r4
 800c5f0:	1854      	adds	r4, r2, r1
 800c5f2:	42a3      	cmp	r3, r4
 800c5f4:	6011      	str	r1, [r2, #0]
 800c5f6:	d1e0      	bne.n	800c5ba <_free_r+0x26>
 800c5f8:	681c      	ldr	r4, [r3, #0]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	6053      	str	r3, [r2, #4]
 800c5fe:	4421      	add	r1, r4
 800c600:	6011      	str	r1, [r2, #0]
 800c602:	e7da      	b.n	800c5ba <_free_r+0x26>
 800c604:	d902      	bls.n	800c60c <_free_r+0x78>
 800c606:	230c      	movs	r3, #12
 800c608:	6003      	str	r3, [r0, #0]
 800c60a:	e7d6      	b.n	800c5ba <_free_r+0x26>
 800c60c:	6825      	ldr	r5, [r4, #0]
 800c60e:	1961      	adds	r1, r4, r5
 800c610:	428b      	cmp	r3, r1
 800c612:	bf04      	itt	eq
 800c614:	6819      	ldreq	r1, [r3, #0]
 800c616:	685b      	ldreq	r3, [r3, #4]
 800c618:	6063      	str	r3, [r4, #4]
 800c61a:	bf04      	itt	eq
 800c61c:	1949      	addeq	r1, r1, r5
 800c61e:	6021      	streq	r1, [r4, #0]
 800c620:	6054      	str	r4, [r2, #4]
 800c622:	e7ca      	b.n	800c5ba <_free_r+0x26>
 800c624:	b003      	add	sp, #12
 800c626:	bd30      	pop	{r4, r5, pc}
 800c628:	20005508 	.word	0x20005508

0800c62c <sbrk_aligned>:
 800c62c:	b570      	push	{r4, r5, r6, lr}
 800c62e:	4e0e      	ldr	r6, [pc, #56]	; (800c668 <sbrk_aligned+0x3c>)
 800c630:	460c      	mov	r4, r1
 800c632:	6831      	ldr	r1, [r6, #0]
 800c634:	4605      	mov	r5, r0
 800c636:	b911      	cbnz	r1, 800c63e <sbrk_aligned+0x12>
 800c638:	f000 fb70 	bl	800cd1c <_sbrk_r>
 800c63c:	6030      	str	r0, [r6, #0]
 800c63e:	4621      	mov	r1, r4
 800c640:	4628      	mov	r0, r5
 800c642:	f000 fb6b 	bl	800cd1c <_sbrk_r>
 800c646:	1c43      	adds	r3, r0, #1
 800c648:	d00a      	beq.n	800c660 <sbrk_aligned+0x34>
 800c64a:	1cc4      	adds	r4, r0, #3
 800c64c:	f024 0403 	bic.w	r4, r4, #3
 800c650:	42a0      	cmp	r0, r4
 800c652:	d007      	beq.n	800c664 <sbrk_aligned+0x38>
 800c654:	1a21      	subs	r1, r4, r0
 800c656:	4628      	mov	r0, r5
 800c658:	f000 fb60 	bl	800cd1c <_sbrk_r>
 800c65c:	3001      	adds	r0, #1
 800c65e:	d101      	bne.n	800c664 <sbrk_aligned+0x38>
 800c660:	f04f 34ff 	mov.w	r4, #4294967295
 800c664:	4620      	mov	r0, r4
 800c666:	bd70      	pop	{r4, r5, r6, pc}
 800c668:	2000550c 	.word	0x2000550c

0800c66c <_malloc_r>:
 800c66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c670:	1ccd      	adds	r5, r1, #3
 800c672:	f025 0503 	bic.w	r5, r5, #3
 800c676:	3508      	adds	r5, #8
 800c678:	2d0c      	cmp	r5, #12
 800c67a:	bf38      	it	cc
 800c67c:	250c      	movcc	r5, #12
 800c67e:	2d00      	cmp	r5, #0
 800c680:	4607      	mov	r7, r0
 800c682:	db01      	blt.n	800c688 <_malloc_r+0x1c>
 800c684:	42a9      	cmp	r1, r5
 800c686:	d905      	bls.n	800c694 <_malloc_r+0x28>
 800c688:	230c      	movs	r3, #12
 800c68a:	603b      	str	r3, [r7, #0]
 800c68c:	2600      	movs	r6, #0
 800c68e:	4630      	mov	r0, r6
 800c690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c694:	4e2e      	ldr	r6, [pc, #184]	; (800c750 <_malloc_r+0xe4>)
 800c696:	f000 fe15 	bl	800d2c4 <__malloc_lock>
 800c69a:	6833      	ldr	r3, [r6, #0]
 800c69c:	461c      	mov	r4, r3
 800c69e:	bb34      	cbnz	r4, 800c6ee <_malloc_r+0x82>
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	4638      	mov	r0, r7
 800c6a4:	f7ff ffc2 	bl	800c62c <sbrk_aligned>
 800c6a8:	1c43      	adds	r3, r0, #1
 800c6aa:	4604      	mov	r4, r0
 800c6ac:	d14d      	bne.n	800c74a <_malloc_r+0xde>
 800c6ae:	6834      	ldr	r4, [r6, #0]
 800c6b0:	4626      	mov	r6, r4
 800c6b2:	2e00      	cmp	r6, #0
 800c6b4:	d140      	bne.n	800c738 <_malloc_r+0xcc>
 800c6b6:	6823      	ldr	r3, [r4, #0]
 800c6b8:	4631      	mov	r1, r6
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	eb04 0803 	add.w	r8, r4, r3
 800c6c0:	f000 fb2c 	bl	800cd1c <_sbrk_r>
 800c6c4:	4580      	cmp	r8, r0
 800c6c6:	d13a      	bne.n	800c73e <_malloc_r+0xd2>
 800c6c8:	6821      	ldr	r1, [r4, #0]
 800c6ca:	3503      	adds	r5, #3
 800c6cc:	1a6d      	subs	r5, r5, r1
 800c6ce:	f025 0503 	bic.w	r5, r5, #3
 800c6d2:	3508      	adds	r5, #8
 800c6d4:	2d0c      	cmp	r5, #12
 800c6d6:	bf38      	it	cc
 800c6d8:	250c      	movcc	r5, #12
 800c6da:	4629      	mov	r1, r5
 800c6dc:	4638      	mov	r0, r7
 800c6de:	f7ff ffa5 	bl	800c62c <sbrk_aligned>
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	d02b      	beq.n	800c73e <_malloc_r+0xd2>
 800c6e6:	6823      	ldr	r3, [r4, #0]
 800c6e8:	442b      	add	r3, r5
 800c6ea:	6023      	str	r3, [r4, #0]
 800c6ec:	e00e      	b.n	800c70c <_malloc_r+0xa0>
 800c6ee:	6822      	ldr	r2, [r4, #0]
 800c6f0:	1b52      	subs	r2, r2, r5
 800c6f2:	d41e      	bmi.n	800c732 <_malloc_r+0xc6>
 800c6f4:	2a0b      	cmp	r2, #11
 800c6f6:	d916      	bls.n	800c726 <_malloc_r+0xba>
 800c6f8:	1961      	adds	r1, r4, r5
 800c6fa:	42a3      	cmp	r3, r4
 800c6fc:	6025      	str	r5, [r4, #0]
 800c6fe:	bf18      	it	ne
 800c700:	6059      	strne	r1, [r3, #4]
 800c702:	6863      	ldr	r3, [r4, #4]
 800c704:	bf08      	it	eq
 800c706:	6031      	streq	r1, [r6, #0]
 800c708:	5162      	str	r2, [r4, r5]
 800c70a:	604b      	str	r3, [r1, #4]
 800c70c:	4638      	mov	r0, r7
 800c70e:	f104 060b 	add.w	r6, r4, #11
 800c712:	f000 fddd 	bl	800d2d0 <__malloc_unlock>
 800c716:	f026 0607 	bic.w	r6, r6, #7
 800c71a:	1d23      	adds	r3, r4, #4
 800c71c:	1af2      	subs	r2, r6, r3
 800c71e:	d0b6      	beq.n	800c68e <_malloc_r+0x22>
 800c720:	1b9b      	subs	r3, r3, r6
 800c722:	50a3      	str	r3, [r4, r2]
 800c724:	e7b3      	b.n	800c68e <_malloc_r+0x22>
 800c726:	6862      	ldr	r2, [r4, #4]
 800c728:	42a3      	cmp	r3, r4
 800c72a:	bf0c      	ite	eq
 800c72c:	6032      	streq	r2, [r6, #0]
 800c72e:	605a      	strne	r2, [r3, #4]
 800c730:	e7ec      	b.n	800c70c <_malloc_r+0xa0>
 800c732:	4623      	mov	r3, r4
 800c734:	6864      	ldr	r4, [r4, #4]
 800c736:	e7b2      	b.n	800c69e <_malloc_r+0x32>
 800c738:	4634      	mov	r4, r6
 800c73a:	6876      	ldr	r6, [r6, #4]
 800c73c:	e7b9      	b.n	800c6b2 <_malloc_r+0x46>
 800c73e:	230c      	movs	r3, #12
 800c740:	603b      	str	r3, [r7, #0]
 800c742:	4638      	mov	r0, r7
 800c744:	f000 fdc4 	bl	800d2d0 <__malloc_unlock>
 800c748:	e7a1      	b.n	800c68e <_malloc_r+0x22>
 800c74a:	6025      	str	r5, [r4, #0]
 800c74c:	e7de      	b.n	800c70c <_malloc_r+0xa0>
 800c74e:	bf00      	nop
 800c750:	20005508 	.word	0x20005508

0800c754 <_realloc_r>:
 800c754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c758:	4680      	mov	r8, r0
 800c75a:	4614      	mov	r4, r2
 800c75c:	460e      	mov	r6, r1
 800c75e:	b921      	cbnz	r1, 800c76a <_realloc_r+0x16>
 800c760:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c764:	4611      	mov	r1, r2
 800c766:	f7ff bf81 	b.w	800c66c <_malloc_r>
 800c76a:	b92a      	cbnz	r2, 800c778 <_realloc_r+0x24>
 800c76c:	f7ff ff12 	bl	800c594 <_free_r>
 800c770:	4625      	mov	r5, r4
 800c772:	4628      	mov	r0, r5
 800c774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c778:	f000 fdb0 	bl	800d2dc <_malloc_usable_size_r>
 800c77c:	4284      	cmp	r4, r0
 800c77e:	4607      	mov	r7, r0
 800c780:	d802      	bhi.n	800c788 <_realloc_r+0x34>
 800c782:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c786:	d812      	bhi.n	800c7ae <_realloc_r+0x5a>
 800c788:	4621      	mov	r1, r4
 800c78a:	4640      	mov	r0, r8
 800c78c:	f7ff ff6e 	bl	800c66c <_malloc_r>
 800c790:	4605      	mov	r5, r0
 800c792:	2800      	cmp	r0, #0
 800c794:	d0ed      	beq.n	800c772 <_realloc_r+0x1e>
 800c796:	42bc      	cmp	r4, r7
 800c798:	4622      	mov	r2, r4
 800c79a:	4631      	mov	r1, r6
 800c79c:	bf28      	it	cs
 800c79e:	463a      	movcs	r2, r7
 800c7a0:	f7fd fd06 	bl	800a1b0 <memcpy>
 800c7a4:	4631      	mov	r1, r6
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	f7ff fef4 	bl	800c594 <_free_r>
 800c7ac:	e7e1      	b.n	800c772 <_realloc_r+0x1e>
 800c7ae:	4635      	mov	r5, r6
 800c7b0:	e7df      	b.n	800c772 <_realloc_r+0x1e>

0800c7b2 <__ssputs_r>:
 800c7b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7b6:	688e      	ldr	r6, [r1, #8]
 800c7b8:	429e      	cmp	r6, r3
 800c7ba:	4682      	mov	sl, r0
 800c7bc:	460c      	mov	r4, r1
 800c7be:	4690      	mov	r8, r2
 800c7c0:	461f      	mov	r7, r3
 800c7c2:	d838      	bhi.n	800c836 <__ssputs_r+0x84>
 800c7c4:	898a      	ldrh	r2, [r1, #12]
 800c7c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7ca:	d032      	beq.n	800c832 <__ssputs_r+0x80>
 800c7cc:	6825      	ldr	r5, [r4, #0]
 800c7ce:	6909      	ldr	r1, [r1, #16]
 800c7d0:	eba5 0901 	sub.w	r9, r5, r1
 800c7d4:	6965      	ldr	r5, [r4, #20]
 800c7d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7de:	3301      	adds	r3, #1
 800c7e0:	444b      	add	r3, r9
 800c7e2:	106d      	asrs	r5, r5, #1
 800c7e4:	429d      	cmp	r5, r3
 800c7e6:	bf38      	it	cc
 800c7e8:	461d      	movcc	r5, r3
 800c7ea:	0553      	lsls	r3, r2, #21
 800c7ec:	d531      	bpl.n	800c852 <__ssputs_r+0xa0>
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	f7ff ff3c 	bl	800c66c <_malloc_r>
 800c7f4:	4606      	mov	r6, r0
 800c7f6:	b950      	cbnz	r0, 800c80e <__ssputs_r+0x5c>
 800c7f8:	230c      	movs	r3, #12
 800c7fa:	f8ca 3000 	str.w	r3, [sl]
 800c7fe:	89a3      	ldrh	r3, [r4, #12]
 800c800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c804:	81a3      	strh	r3, [r4, #12]
 800c806:	f04f 30ff 	mov.w	r0, #4294967295
 800c80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c80e:	6921      	ldr	r1, [r4, #16]
 800c810:	464a      	mov	r2, r9
 800c812:	f7fd fccd 	bl	800a1b0 <memcpy>
 800c816:	89a3      	ldrh	r3, [r4, #12]
 800c818:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c820:	81a3      	strh	r3, [r4, #12]
 800c822:	6126      	str	r6, [r4, #16]
 800c824:	6165      	str	r5, [r4, #20]
 800c826:	444e      	add	r6, r9
 800c828:	eba5 0509 	sub.w	r5, r5, r9
 800c82c:	6026      	str	r6, [r4, #0]
 800c82e:	60a5      	str	r5, [r4, #8]
 800c830:	463e      	mov	r6, r7
 800c832:	42be      	cmp	r6, r7
 800c834:	d900      	bls.n	800c838 <__ssputs_r+0x86>
 800c836:	463e      	mov	r6, r7
 800c838:	6820      	ldr	r0, [r4, #0]
 800c83a:	4632      	mov	r2, r6
 800c83c:	4641      	mov	r1, r8
 800c83e:	f000 fd27 	bl	800d290 <memmove>
 800c842:	68a3      	ldr	r3, [r4, #8]
 800c844:	1b9b      	subs	r3, r3, r6
 800c846:	60a3      	str	r3, [r4, #8]
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	4433      	add	r3, r6
 800c84c:	6023      	str	r3, [r4, #0]
 800c84e:	2000      	movs	r0, #0
 800c850:	e7db      	b.n	800c80a <__ssputs_r+0x58>
 800c852:	462a      	mov	r2, r5
 800c854:	f7ff ff7e 	bl	800c754 <_realloc_r>
 800c858:	4606      	mov	r6, r0
 800c85a:	2800      	cmp	r0, #0
 800c85c:	d1e1      	bne.n	800c822 <__ssputs_r+0x70>
 800c85e:	6921      	ldr	r1, [r4, #16]
 800c860:	4650      	mov	r0, sl
 800c862:	f7ff fe97 	bl	800c594 <_free_r>
 800c866:	e7c7      	b.n	800c7f8 <__ssputs_r+0x46>

0800c868 <_svfiprintf_r>:
 800c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86c:	4698      	mov	r8, r3
 800c86e:	898b      	ldrh	r3, [r1, #12]
 800c870:	061b      	lsls	r3, r3, #24
 800c872:	b09d      	sub	sp, #116	; 0x74
 800c874:	4607      	mov	r7, r0
 800c876:	460d      	mov	r5, r1
 800c878:	4614      	mov	r4, r2
 800c87a:	d50e      	bpl.n	800c89a <_svfiprintf_r+0x32>
 800c87c:	690b      	ldr	r3, [r1, #16]
 800c87e:	b963      	cbnz	r3, 800c89a <_svfiprintf_r+0x32>
 800c880:	2140      	movs	r1, #64	; 0x40
 800c882:	f7ff fef3 	bl	800c66c <_malloc_r>
 800c886:	6028      	str	r0, [r5, #0]
 800c888:	6128      	str	r0, [r5, #16]
 800c88a:	b920      	cbnz	r0, 800c896 <_svfiprintf_r+0x2e>
 800c88c:	230c      	movs	r3, #12
 800c88e:	603b      	str	r3, [r7, #0]
 800c890:	f04f 30ff 	mov.w	r0, #4294967295
 800c894:	e0d1      	b.n	800ca3a <_svfiprintf_r+0x1d2>
 800c896:	2340      	movs	r3, #64	; 0x40
 800c898:	616b      	str	r3, [r5, #20]
 800c89a:	2300      	movs	r3, #0
 800c89c:	9309      	str	r3, [sp, #36]	; 0x24
 800c89e:	2320      	movs	r3, #32
 800c8a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8a8:	2330      	movs	r3, #48	; 0x30
 800c8aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca54 <_svfiprintf_r+0x1ec>
 800c8ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8b2:	f04f 0901 	mov.w	r9, #1
 800c8b6:	4623      	mov	r3, r4
 800c8b8:	469a      	mov	sl, r3
 800c8ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8be:	b10a      	cbz	r2, 800c8c4 <_svfiprintf_r+0x5c>
 800c8c0:	2a25      	cmp	r2, #37	; 0x25
 800c8c2:	d1f9      	bne.n	800c8b8 <_svfiprintf_r+0x50>
 800c8c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c8c8:	d00b      	beq.n	800c8e2 <_svfiprintf_r+0x7a>
 800c8ca:	465b      	mov	r3, fp
 800c8cc:	4622      	mov	r2, r4
 800c8ce:	4629      	mov	r1, r5
 800c8d0:	4638      	mov	r0, r7
 800c8d2:	f7ff ff6e 	bl	800c7b2 <__ssputs_r>
 800c8d6:	3001      	adds	r0, #1
 800c8d8:	f000 80aa 	beq.w	800ca30 <_svfiprintf_r+0x1c8>
 800c8dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8de:	445a      	add	r2, fp
 800c8e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c8e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f000 80a2 	beq.w	800ca30 <_svfiprintf_r+0x1c8>
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8f6:	f10a 0a01 	add.w	sl, sl, #1
 800c8fa:	9304      	str	r3, [sp, #16]
 800c8fc:	9307      	str	r3, [sp, #28]
 800c8fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c902:	931a      	str	r3, [sp, #104]	; 0x68
 800c904:	4654      	mov	r4, sl
 800c906:	2205      	movs	r2, #5
 800c908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c90c:	4851      	ldr	r0, [pc, #324]	; (800ca54 <_svfiprintf_r+0x1ec>)
 800c90e:	f7f3 fc67 	bl	80001e0 <memchr>
 800c912:	9a04      	ldr	r2, [sp, #16]
 800c914:	b9d8      	cbnz	r0, 800c94e <_svfiprintf_r+0xe6>
 800c916:	06d0      	lsls	r0, r2, #27
 800c918:	bf44      	itt	mi
 800c91a:	2320      	movmi	r3, #32
 800c91c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c920:	0711      	lsls	r1, r2, #28
 800c922:	bf44      	itt	mi
 800c924:	232b      	movmi	r3, #43	; 0x2b
 800c926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c92a:	f89a 3000 	ldrb.w	r3, [sl]
 800c92e:	2b2a      	cmp	r3, #42	; 0x2a
 800c930:	d015      	beq.n	800c95e <_svfiprintf_r+0xf6>
 800c932:	9a07      	ldr	r2, [sp, #28]
 800c934:	4654      	mov	r4, sl
 800c936:	2000      	movs	r0, #0
 800c938:	f04f 0c0a 	mov.w	ip, #10
 800c93c:	4621      	mov	r1, r4
 800c93e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c942:	3b30      	subs	r3, #48	; 0x30
 800c944:	2b09      	cmp	r3, #9
 800c946:	d94e      	bls.n	800c9e6 <_svfiprintf_r+0x17e>
 800c948:	b1b0      	cbz	r0, 800c978 <_svfiprintf_r+0x110>
 800c94a:	9207      	str	r2, [sp, #28]
 800c94c:	e014      	b.n	800c978 <_svfiprintf_r+0x110>
 800c94e:	eba0 0308 	sub.w	r3, r0, r8
 800c952:	fa09 f303 	lsl.w	r3, r9, r3
 800c956:	4313      	orrs	r3, r2
 800c958:	9304      	str	r3, [sp, #16]
 800c95a:	46a2      	mov	sl, r4
 800c95c:	e7d2      	b.n	800c904 <_svfiprintf_r+0x9c>
 800c95e:	9b03      	ldr	r3, [sp, #12]
 800c960:	1d19      	adds	r1, r3, #4
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	9103      	str	r1, [sp, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	bfbb      	ittet	lt
 800c96a:	425b      	neglt	r3, r3
 800c96c:	f042 0202 	orrlt.w	r2, r2, #2
 800c970:	9307      	strge	r3, [sp, #28]
 800c972:	9307      	strlt	r3, [sp, #28]
 800c974:	bfb8      	it	lt
 800c976:	9204      	strlt	r2, [sp, #16]
 800c978:	7823      	ldrb	r3, [r4, #0]
 800c97a:	2b2e      	cmp	r3, #46	; 0x2e
 800c97c:	d10c      	bne.n	800c998 <_svfiprintf_r+0x130>
 800c97e:	7863      	ldrb	r3, [r4, #1]
 800c980:	2b2a      	cmp	r3, #42	; 0x2a
 800c982:	d135      	bne.n	800c9f0 <_svfiprintf_r+0x188>
 800c984:	9b03      	ldr	r3, [sp, #12]
 800c986:	1d1a      	adds	r2, r3, #4
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	9203      	str	r2, [sp, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	bfb8      	it	lt
 800c990:	f04f 33ff 	movlt.w	r3, #4294967295
 800c994:	3402      	adds	r4, #2
 800c996:	9305      	str	r3, [sp, #20]
 800c998:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca64 <_svfiprintf_r+0x1fc>
 800c99c:	7821      	ldrb	r1, [r4, #0]
 800c99e:	2203      	movs	r2, #3
 800c9a0:	4650      	mov	r0, sl
 800c9a2:	f7f3 fc1d 	bl	80001e0 <memchr>
 800c9a6:	b140      	cbz	r0, 800c9ba <_svfiprintf_r+0x152>
 800c9a8:	2340      	movs	r3, #64	; 0x40
 800c9aa:	eba0 000a 	sub.w	r0, r0, sl
 800c9ae:	fa03 f000 	lsl.w	r0, r3, r0
 800c9b2:	9b04      	ldr	r3, [sp, #16]
 800c9b4:	4303      	orrs	r3, r0
 800c9b6:	3401      	adds	r4, #1
 800c9b8:	9304      	str	r3, [sp, #16]
 800c9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9be:	4826      	ldr	r0, [pc, #152]	; (800ca58 <_svfiprintf_r+0x1f0>)
 800c9c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9c4:	2206      	movs	r2, #6
 800c9c6:	f7f3 fc0b 	bl	80001e0 <memchr>
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d038      	beq.n	800ca40 <_svfiprintf_r+0x1d8>
 800c9ce:	4b23      	ldr	r3, [pc, #140]	; (800ca5c <_svfiprintf_r+0x1f4>)
 800c9d0:	bb1b      	cbnz	r3, 800ca1a <_svfiprintf_r+0x1b2>
 800c9d2:	9b03      	ldr	r3, [sp, #12]
 800c9d4:	3307      	adds	r3, #7
 800c9d6:	f023 0307 	bic.w	r3, r3, #7
 800c9da:	3308      	adds	r3, #8
 800c9dc:	9303      	str	r3, [sp, #12]
 800c9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9e0:	4433      	add	r3, r6
 800c9e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c9e4:	e767      	b.n	800c8b6 <_svfiprintf_r+0x4e>
 800c9e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	2001      	movs	r0, #1
 800c9ee:	e7a5      	b.n	800c93c <_svfiprintf_r+0xd4>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	3401      	adds	r4, #1
 800c9f4:	9305      	str	r3, [sp, #20]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	f04f 0c0a 	mov.w	ip, #10
 800c9fc:	4620      	mov	r0, r4
 800c9fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca02:	3a30      	subs	r2, #48	; 0x30
 800ca04:	2a09      	cmp	r2, #9
 800ca06:	d903      	bls.n	800ca10 <_svfiprintf_r+0x1a8>
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d0c5      	beq.n	800c998 <_svfiprintf_r+0x130>
 800ca0c:	9105      	str	r1, [sp, #20]
 800ca0e:	e7c3      	b.n	800c998 <_svfiprintf_r+0x130>
 800ca10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca14:	4604      	mov	r4, r0
 800ca16:	2301      	movs	r3, #1
 800ca18:	e7f0      	b.n	800c9fc <_svfiprintf_r+0x194>
 800ca1a:	ab03      	add	r3, sp, #12
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	462a      	mov	r2, r5
 800ca20:	4b0f      	ldr	r3, [pc, #60]	; (800ca60 <_svfiprintf_r+0x1f8>)
 800ca22:	a904      	add	r1, sp, #16
 800ca24:	4638      	mov	r0, r7
 800ca26:	f7fd fc79 	bl	800a31c <_printf_float>
 800ca2a:	1c42      	adds	r2, r0, #1
 800ca2c:	4606      	mov	r6, r0
 800ca2e:	d1d6      	bne.n	800c9de <_svfiprintf_r+0x176>
 800ca30:	89ab      	ldrh	r3, [r5, #12]
 800ca32:	065b      	lsls	r3, r3, #25
 800ca34:	f53f af2c 	bmi.w	800c890 <_svfiprintf_r+0x28>
 800ca38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca3a:	b01d      	add	sp, #116	; 0x74
 800ca3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca40:	ab03      	add	r3, sp, #12
 800ca42:	9300      	str	r3, [sp, #0]
 800ca44:	462a      	mov	r2, r5
 800ca46:	4b06      	ldr	r3, [pc, #24]	; (800ca60 <_svfiprintf_r+0x1f8>)
 800ca48:	a904      	add	r1, sp, #16
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	f7fd ff0a 	bl	800a864 <_printf_i>
 800ca50:	e7eb      	b.n	800ca2a <_svfiprintf_r+0x1c2>
 800ca52:	bf00      	nop
 800ca54:	0800e9d4 	.word	0x0800e9d4
 800ca58:	0800e9de 	.word	0x0800e9de
 800ca5c:	0800a31d 	.word	0x0800a31d
 800ca60:	0800c7b3 	.word	0x0800c7b3
 800ca64:	0800e9da 	.word	0x0800e9da

0800ca68 <__sfputc_r>:
 800ca68:	6893      	ldr	r3, [r2, #8]
 800ca6a:	3b01      	subs	r3, #1
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	b410      	push	{r4}
 800ca70:	6093      	str	r3, [r2, #8]
 800ca72:	da08      	bge.n	800ca86 <__sfputc_r+0x1e>
 800ca74:	6994      	ldr	r4, [r2, #24]
 800ca76:	42a3      	cmp	r3, r4
 800ca78:	db01      	blt.n	800ca7e <__sfputc_r+0x16>
 800ca7a:	290a      	cmp	r1, #10
 800ca7c:	d103      	bne.n	800ca86 <__sfputc_r+0x1e>
 800ca7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca82:	f000 b9a7 	b.w	800cdd4 <__swbuf_r>
 800ca86:	6813      	ldr	r3, [r2, #0]
 800ca88:	1c58      	adds	r0, r3, #1
 800ca8a:	6010      	str	r0, [r2, #0]
 800ca8c:	7019      	strb	r1, [r3, #0]
 800ca8e:	4608      	mov	r0, r1
 800ca90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca94:	4770      	bx	lr

0800ca96 <__sfputs_r>:
 800ca96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca98:	4606      	mov	r6, r0
 800ca9a:	460f      	mov	r7, r1
 800ca9c:	4614      	mov	r4, r2
 800ca9e:	18d5      	adds	r5, r2, r3
 800caa0:	42ac      	cmp	r4, r5
 800caa2:	d101      	bne.n	800caa8 <__sfputs_r+0x12>
 800caa4:	2000      	movs	r0, #0
 800caa6:	e007      	b.n	800cab8 <__sfputs_r+0x22>
 800caa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caac:	463a      	mov	r2, r7
 800caae:	4630      	mov	r0, r6
 800cab0:	f7ff ffda 	bl	800ca68 <__sfputc_r>
 800cab4:	1c43      	adds	r3, r0, #1
 800cab6:	d1f3      	bne.n	800caa0 <__sfputs_r+0xa>
 800cab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cabc <_vfiprintf_r>:
 800cabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac0:	460d      	mov	r5, r1
 800cac2:	b09d      	sub	sp, #116	; 0x74
 800cac4:	4614      	mov	r4, r2
 800cac6:	4698      	mov	r8, r3
 800cac8:	4606      	mov	r6, r0
 800caca:	b118      	cbz	r0, 800cad4 <_vfiprintf_r+0x18>
 800cacc:	6983      	ldr	r3, [r0, #24]
 800cace:	b90b      	cbnz	r3, 800cad4 <_vfiprintf_r+0x18>
 800cad0:	f7ff f8fa 	bl	800bcc8 <__sinit>
 800cad4:	4b89      	ldr	r3, [pc, #548]	; (800ccfc <_vfiprintf_r+0x240>)
 800cad6:	429d      	cmp	r5, r3
 800cad8:	d11b      	bne.n	800cb12 <_vfiprintf_r+0x56>
 800cada:	6875      	ldr	r5, [r6, #4]
 800cadc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cade:	07d9      	lsls	r1, r3, #31
 800cae0:	d405      	bmi.n	800caee <_vfiprintf_r+0x32>
 800cae2:	89ab      	ldrh	r3, [r5, #12]
 800cae4:	059a      	lsls	r2, r3, #22
 800cae6:	d402      	bmi.n	800caee <_vfiprintf_r+0x32>
 800cae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800caea:	f7ff f990 	bl	800be0e <__retarget_lock_acquire_recursive>
 800caee:	89ab      	ldrh	r3, [r5, #12]
 800caf0:	071b      	lsls	r3, r3, #28
 800caf2:	d501      	bpl.n	800caf8 <_vfiprintf_r+0x3c>
 800caf4:	692b      	ldr	r3, [r5, #16]
 800caf6:	b9eb      	cbnz	r3, 800cb34 <_vfiprintf_r+0x78>
 800caf8:	4629      	mov	r1, r5
 800cafa:	4630      	mov	r0, r6
 800cafc:	f000 f9ce 	bl	800ce9c <__swsetup_r>
 800cb00:	b1c0      	cbz	r0, 800cb34 <_vfiprintf_r+0x78>
 800cb02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb04:	07dc      	lsls	r4, r3, #31
 800cb06:	d50e      	bpl.n	800cb26 <_vfiprintf_r+0x6a>
 800cb08:	f04f 30ff 	mov.w	r0, #4294967295
 800cb0c:	b01d      	add	sp, #116	; 0x74
 800cb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb12:	4b7b      	ldr	r3, [pc, #492]	; (800cd00 <_vfiprintf_r+0x244>)
 800cb14:	429d      	cmp	r5, r3
 800cb16:	d101      	bne.n	800cb1c <_vfiprintf_r+0x60>
 800cb18:	68b5      	ldr	r5, [r6, #8]
 800cb1a:	e7df      	b.n	800cadc <_vfiprintf_r+0x20>
 800cb1c:	4b79      	ldr	r3, [pc, #484]	; (800cd04 <_vfiprintf_r+0x248>)
 800cb1e:	429d      	cmp	r5, r3
 800cb20:	bf08      	it	eq
 800cb22:	68f5      	ldreq	r5, [r6, #12]
 800cb24:	e7da      	b.n	800cadc <_vfiprintf_r+0x20>
 800cb26:	89ab      	ldrh	r3, [r5, #12]
 800cb28:	0598      	lsls	r0, r3, #22
 800cb2a:	d4ed      	bmi.n	800cb08 <_vfiprintf_r+0x4c>
 800cb2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb2e:	f7ff f96f 	bl	800be10 <__retarget_lock_release_recursive>
 800cb32:	e7e9      	b.n	800cb08 <_vfiprintf_r+0x4c>
 800cb34:	2300      	movs	r3, #0
 800cb36:	9309      	str	r3, [sp, #36]	; 0x24
 800cb38:	2320      	movs	r3, #32
 800cb3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb42:	2330      	movs	r3, #48	; 0x30
 800cb44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cd08 <_vfiprintf_r+0x24c>
 800cb48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb4c:	f04f 0901 	mov.w	r9, #1
 800cb50:	4623      	mov	r3, r4
 800cb52:	469a      	mov	sl, r3
 800cb54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb58:	b10a      	cbz	r2, 800cb5e <_vfiprintf_r+0xa2>
 800cb5a:	2a25      	cmp	r2, #37	; 0x25
 800cb5c:	d1f9      	bne.n	800cb52 <_vfiprintf_r+0x96>
 800cb5e:	ebba 0b04 	subs.w	fp, sl, r4
 800cb62:	d00b      	beq.n	800cb7c <_vfiprintf_r+0xc0>
 800cb64:	465b      	mov	r3, fp
 800cb66:	4622      	mov	r2, r4
 800cb68:	4629      	mov	r1, r5
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	f7ff ff93 	bl	800ca96 <__sfputs_r>
 800cb70:	3001      	adds	r0, #1
 800cb72:	f000 80aa 	beq.w	800ccca <_vfiprintf_r+0x20e>
 800cb76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb78:	445a      	add	r2, fp
 800cb7a:	9209      	str	r2, [sp, #36]	; 0x24
 800cb7c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f000 80a2 	beq.w	800ccca <_vfiprintf_r+0x20e>
 800cb86:	2300      	movs	r3, #0
 800cb88:	f04f 32ff 	mov.w	r2, #4294967295
 800cb8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb90:	f10a 0a01 	add.w	sl, sl, #1
 800cb94:	9304      	str	r3, [sp, #16]
 800cb96:	9307      	str	r3, [sp, #28]
 800cb98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb9c:	931a      	str	r3, [sp, #104]	; 0x68
 800cb9e:	4654      	mov	r4, sl
 800cba0:	2205      	movs	r2, #5
 800cba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cba6:	4858      	ldr	r0, [pc, #352]	; (800cd08 <_vfiprintf_r+0x24c>)
 800cba8:	f7f3 fb1a 	bl	80001e0 <memchr>
 800cbac:	9a04      	ldr	r2, [sp, #16]
 800cbae:	b9d8      	cbnz	r0, 800cbe8 <_vfiprintf_r+0x12c>
 800cbb0:	06d1      	lsls	r1, r2, #27
 800cbb2:	bf44      	itt	mi
 800cbb4:	2320      	movmi	r3, #32
 800cbb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbba:	0713      	lsls	r3, r2, #28
 800cbbc:	bf44      	itt	mi
 800cbbe:	232b      	movmi	r3, #43	; 0x2b
 800cbc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbc4:	f89a 3000 	ldrb.w	r3, [sl]
 800cbc8:	2b2a      	cmp	r3, #42	; 0x2a
 800cbca:	d015      	beq.n	800cbf8 <_vfiprintf_r+0x13c>
 800cbcc:	9a07      	ldr	r2, [sp, #28]
 800cbce:	4654      	mov	r4, sl
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	f04f 0c0a 	mov.w	ip, #10
 800cbd6:	4621      	mov	r1, r4
 800cbd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbdc:	3b30      	subs	r3, #48	; 0x30
 800cbde:	2b09      	cmp	r3, #9
 800cbe0:	d94e      	bls.n	800cc80 <_vfiprintf_r+0x1c4>
 800cbe2:	b1b0      	cbz	r0, 800cc12 <_vfiprintf_r+0x156>
 800cbe4:	9207      	str	r2, [sp, #28]
 800cbe6:	e014      	b.n	800cc12 <_vfiprintf_r+0x156>
 800cbe8:	eba0 0308 	sub.w	r3, r0, r8
 800cbec:	fa09 f303 	lsl.w	r3, r9, r3
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	9304      	str	r3, [sp, #16]
 800cbf4:	46a2      	mov	sl, r4
 800cbf6:	e7d2      	b.n	800cb9e <_vfiprintf_r+0xe2>
 800cbf8:	9b03      	ldr	r3, [sp, #12]
 800cbfa:	1d19      	adds	r1, r3, #4
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	9103      	str	r1, [sp, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	bfbb      	ittet	lt
 800cc04:	425b      	neglt	r3, r3
 800cc06:	f042 0202 	orrlt.w	r2, r2, #2
 800cc0a:	9307      	strge	r3, [sp, #28]
 800cc0c:	9307      	strlt	r3, [sp, #28]
 800cc0e:	bfb8      	it	lt
 800cc10:	9204      	strlt	r2, [sp, #16]
 800cc12:	7823      	ldrb	r3, [r4, #0]
 800cc14:	2b2e      	cmp	r3, #46	; 0x2e
 800cc16:	d10c      	bne.n	800cc32 <_vfiprintf_r+0x176>
 800cc18:	7863      	ldrb	r3, [r4, #1]
 800cc1a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc1c:	d135      	bne.n	800cc8a <_vfiprintf_r+0x1ce>
 800cc1e:	9b03      	ldr	r3, [sp, #12]
 800cc20:	1d1a      	adds	r2, r3, #4
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	9203      	str	r2, [sp, #12]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	bfb8      	it	lt
 800cc2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc2e:	3402      	adds	r4, #2
 800cc30:	9305      	str	r3, [sp, #20]
 800cc32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd18 <_vfiprintf_r+0x25c>
 800cc36:	7821      	ldrb	r1, [r4, #0]
 800cc38:	2203      	movs	r2, #3
 800cc3a:	4650      	mov	r0, sl
 800cc3c:	f7f3 fad0 	bl	80001e0 <memchr>
 800cc40:	b140      	cbz	r0, 800cc54 <_vfiprintf_r+0x198>
 800cc42:	2340      	movs	r3, #64	; 0x40
 800cc44:	eba0 000a 	sub.w	r0, r0, sl
 800cc48:	fa03 f000 	lsl.w	r0, r3, r0
 800cc4c:	9b04      	ldr	r3, [sp, #16]
 800cc4e:	4303      	orrs	r3, r0
 800cc50:	3401      	adds	r4, #1
 800cc52:	9304      	str	r3, [sp, #16]
 800cc54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc58:	482c      	ldr	r0, [pc, #176]	; (800cd0c <_vfiprintf_r+0x250>)
 800cc5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc5e:	2206      	movs	r2, #6
 800cc60:	f7f3 fabe 	bl	80001e0 <memchr>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d03f      	beq.n	800cce8 <_vfiprintf_r+0x22c>
 800cc68:	4b29      	ldr	r3, [pc, #164]	; (800cd10 <_vfiprintf_r+0x254>)
 800cc6a:	bb1b      	cbnz	r3, 800ccb4 <_vfiprintf_r+0x1f8>
 800cc6c:	9b03      	ldr	r3, [sp, #12]
 800cc6e:	3307      	adds	r3, #7
 800cc70:	f023 0307 	bic.w	r3, r3, #7
 800cc74:	3308      	adds	r3, #8
 800cc76:	9303      	str	r3, [sp, #12]
 800cc78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc7a:	443b      	add	r3, r7
 800cc7c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc7e:	e767      	b.n	800cb50 <_vfiprintf_r+0x94>
 800cc80:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc84:	460c      	mov	r4, r1
 800cc86:	2001      	movs	r0, #1
 800cc88:	e7a5      	b.n	800cbd6 <_vfiprintf_r+0x11a>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	3401      	adds	r4, #1
 800cc8e:	9305      	str	r3, [sp, #20]
 800cc90:	4619      	mov	r1, r3
 800cc92:	f04f 0c0a 	mov.w	ip, #10
 800cc96:	4620      	mov	r0, r4
 800cc98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc9c:	3a30      	subs	r2, #48	; 0x30
 800cc9e:	2a09      	cmp	r2, #9
 800cca0:	d903      	bls.n	800ccaa <_vfiprintf_r+0x1ee>
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d0c5      	beq.n	800cc32 <_vfiprintf_r+0x176>
 800cca6:	9105      	str	r1, [sp, #20]
 800cca8:	e7c3      	b.n	800cc32 <_vfiprintf_r+0x176>
 800ccaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccae:	4604      	mov	r4, r0
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e7f0      	b.n	800cc96 <_vfiprintf_r+0x1da>
 800ccb4:	ab03      	add	r3, sp, #12
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	462a      	mov	r2, r5
 800ccba:	4b16      	ldr	r3, [pc, #88]	; (800cd14 <_vfiprintf_r+0x258>)
 800ccbc:	a904      	add	r1, sp, #16
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f7fd fb2c 	bl	800a31c <_printf_float>
 800ccc4:	4607      	mov	r7, r0
 800ccc6:	1c78      	adds	r0, r7, #1
 800ccc8:	d1d6      	bne.n	800cc78 <_vfiprintf_r+0x1bc>
 800ccca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cccc:	07d9      	lsls	r1, r3, #31
 800ccce:	d405      	bmi.n	800ccdc <_vfiprintf_r+0x220>
 800ccd0:	89ab      	ldrh	r3, [r5, #12]
 800ccd2:	059a      	lsls	r2, r3, #22
 800ccd4:	d402      	bmi.n	800ccdc <_vfiprintf_r+0x220>
 800ccd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccd8:	f7ff f89a 	bl	800be10 <__retarget_lock_release_recursive>
 800ccdc:	89ab      	ldrh	r3, [r5, #12]
 800ccde:	065b      	lsls	r3, r3, #25
 800cce0:	f53f af12 	bmi.w	800cb08 <_vfiprintf_r+0x4c>
 800cce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cce6:	e711      	b.n	800cb0c <_vfiprintf_r+0x50>
 800cce8:	ab03      	add	r3, sp, #12
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	462a      	mov	r2, r5
 800ccee:	4b09      	ldr	r3, [pc, #36]	; (800cd14 <_vfiprintf_r+0x258>)
 800ccf0:	a904      	add	r1, sp, #16
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f7fd fdb6 	bl	800a864 <_printf_i>
 800ccf8:	e7e4      	b.n	800ccc4 <_vfiprintf_r+0x208>
 800ccfa:	bf00      	nop
 800ccfc:	0800e838 	.word	0x0800e838
 800cd00:	0800e858 	.word	0x0800e858
 800cd04:	0800e818 	.word	0x0800e818
 800cd08:	0800e9d4 	.word	0x0800e9d4
 800cd0c:	0800e9de 	.word	0x0800e9de
 800cd10:	0800a31d 	.word	0x0800a31d
 800cd14:	0800ca97 	.word	0x0800ca97
 800cd18:	0800e9da 	.word	0x0800e9da

0800cd1c <_sbrk_r>:
 800cd1c:	b538      	push	{r3, r4, r5, lr}
 800cd1e:	4d06      	ldr	r5, [pc, #24]	; (800cd38 <_sbrk_r+0x1c>)
 800cd20:	2300      	movs	r3, #0
 800cd22:	4604      	mov	r4, r0
 800cd24:	4608      	mov	r0, r1
 800cd26:	602b      	str	r3, [r5, #0]
 800cd28:	f7f6 fd18 	bl	800375c <_sbrk>
 800cd2c:	1c43      	adds	r3, r0, #1
 800cd2e:	d102      	bne.n	800cd36 <_sbrk_r+0x1a>
 800cd30:	682b      	ldr	r3, [r5, #0]
 800cd32:	b103      	cbz	r3, 800cd36 <_sbrk_r+0x1a>
 800cd34:	6023      	str	r3, [r4, #0]
 800cd36:	bd38      	pop	{r3, r4, r5, pc}
 800cd38:	20005510 	.word	0x20005510

0800cd3c <__sread>:
 800cd3c:	b510      	push	{r4, lr}
 800cd3e:	460c      	mov	r4, r1
 800cd40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd44:	f000 fad2 	bl	800d2ec <_read_r>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	bfab      	itete	ge
 800cd4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd4e:	89a3      	ldrhlt	r3, [r4, #12]
 800cd50:	181b      	addge	r3, r3, r0
 800cd52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd56:	bfac      	ite	ge
 800cd58:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd5a:	81a3      	strhlt	r3, [r4, #12]
 800cd5c:	bd10      	pop	{r4, pc}

0800cd5e <__swrite>:
 800cd5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd62:	461f      	mov	r7, r3
 800cd64:	898b      	ldrh	r3, [r1, #12]
 800cd66:	05db      	lsls	r3, r3, #23
 800cd68:	4605      	mov	r5, r0
 800cd6a:	460c      	mov	r4, r1
 800cd6c:	4616      	mov	r6, r2
 800cd6e:	d505      	bpl.n	800cd7c <__swrite+0x1e>
 800cd70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd74:	2302      	movs	r3, #2
 800cd76:	2200      	movs	r2, #0
 800cd78:	f000 fa00 	bl	800d17c <_lseek_r>
 800cd7c:	89a3      	ldrh	r3, [r4, #12]
 800cd7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd86:	81a3      	strh	r3, [r4, #12]
 800cd88:	4632      	mov	r2, r6
 800cd8a:	463b      	mov	r3, r7
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd92:	f000 b871 	b.w	800ce78 <_write_r>

0800cd96 <__sseek>:
 800cd96:	b510      	push	{r4, lr}
 800cd98:	460c      	mov	r4, r1
 800cd9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd9e:	f000 f9ed 	bl	800d17c <_lseek_r>
 800cda2:	1c43      	adds	r3, r0, #1
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	bf15      	itete	ne
 800cda8:	6560      	strne	r0, [r4, #84]	; 0x54
 800cdaa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cdae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cdb2:	81a3      	strheq	r3, [r4, #12]
 800cdb4:	bf18      	it	ne
 800cdb6:	81a3      	strhne	r3, [r4, #12]
 800cdb8:	bd10      	pop	{r4, pc}

0800cdba <__sclose>:
 800cdba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdbe:	f000 b8f9 	b.w	800cfb4 <_close_r>

0800cdc2 <strcpy>:
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdc8:	f803 2b01 	strb.w	r2, [r3], #1
 800cdcc:	2a00      	cmp	r2, #0
 800cdce:	d1f9      	bne.n	800cdc4 <strcpy+0x2>
 800cdd0:	4770      	bx	lr
	...

0800cdd4 <__swbuf_r>:
 800cdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdd6:	460e      	mov	r6, r1
 800cdd8:	4614      	mov	r4, r2
 800cdda:	4605      	mov	r5, r0
 800cddc:	b118      	cbz	r0, 800cde6 <__swbuf_r+0x12>
 800cdde:	6983      	ldr	r3, [r0, #24]
 800cde0:	b90b      	cbnz	r3, 800cde6 <__swbuf_r+0x12>
 800cde2:	f7fe ff71 	bl	800bcc8 <__sinit>
 800cde6:	4b21      	ldr	r3, [pc, #132]	; (800ce6c <__swbuf_r+0x98>)
 800cde8:	429c      	cmp	r4, r3
 800cdea:	d12b      	bne.n	800ce44 <__swbuf_r+0x70>
 800cdec:	686c      	ldr	r4, [r5, #4]
 800cdee:	69a3      	ldr	r3, [r4, #24]
 800cdf0:	60a3      	str	r3, [r4, #8]
 800cdf2:	89a3      	ldrh	r3, [r4, #12]
 800cdf4:	071a      	lsls	r2, r3, #28
 800cdf6:	d52f      	bpl.n	800ce58 <__swbuf_r+0x84>
 800cdf8:	6923      	ldr	r3, [r4, #16]
 800cdfa:	b36b      	cbz	r3, 800ce58 <__swbuf_r+0x84>
 800cdfc:	6923      	ldr	r3, [r4, #16]
 800cdfe:	6820      	ldr	r0, [r4, #0]
 800ce00:	1ac0      	subs	r0, r0, r3
 800ce02:	6963      	ldr	r3, [r4, #20]
 800ce04:	b2f6      	uxtb	r6, r6
 800ce06:	4283      	cmp	r3, r0
 800ce08:	4637      	mov	r7, r6
 800ce0a:	dc04      	bgt.n	800ce16 <__swbuf_r+0x42>
 800ce0c:	4621      	mov	r1, r4
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f000 f966 	bl	800d0e0 <_fflush_r>
 800ce14:	bb30      	cbnz	r0, 800ce64 <__swbuf_r+0x90>
 800ce16:	68a3      	ldr	r3, [r4, #8]
 800ce18:	3b01      	subs	r3, #1
 800ce1a:	60a3      	str	r3, [r4, #8]
 800ce1c:	6823      	ldr	r3, [r4, #0]
 800ce1e:	1c5a      	adds	r2, r3, #1
 800ce20:	6022      	str	r2, [r4, #0]
 800ce22:	701e      	strb	r6, [r3, #0]
 800ce24:	6963      	ldr	r3, [r4, #20]
 800ce26:	3001      	adds	r0, #1
 800ce28:	4283      	cmp	r3, r0
 800ce2a:	d004      	beq.n	800ce36 <__swbuf_r+0x62>
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	07db      	lsls	r3, r3, #31
 800ce30:	d506      	bpl.n	800ce40 <__swbuf_r+0x6c>
 800ce32:	2e0a      	cmp	r6, #10
 800ce34:	d104      	bne.n	800ce40 <__swbuf_r+0x6c>
 800ce36:	4621      	mov	r1, r4
 800ce38:	4628      	mov	r0, r5
 800ce3a:	f000 f951 	bl	800d0e0 <_fflush_r>
 800ce3e:	b988      	cbnz	r0, 800ce64 <__swbuf_r+0x90>
 800ce40:	4638      	mov	r0, r7
 800ce42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce44:	4b0a      	ldr	r3, [pc, #40]	; (800ce70 <__swbuf_r+0x9c>)
 800ce46:	429c      	cmp	r4, r3
 800ce48:	d101      	bne.n	800ce4e <__swbuf_r+0x7a>
 800ce4a:	68ac      	ldr	r4, [r5, #8]
 800ce4c:	e7cf      	b.n	800cdee <__swbuf_r+0x1a>
 800ce4e:	4b09      	ldr	r3, [pc, #36]	; (800ce74 <__swbuf_r+0xa0>)
 800ce50:	429c      	cmp	r4, r3
 800ce52:	bf08      	it	eq
 800ce54:	68ec      	ldreq	r4, [r5, #12]
 800ce56:	e7ca      	b.n	800cdee <__swbuf_r+0x1a>
 800ce58:	4621      	mov	r1, r4
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	f000 f81e 	bl	800ce9c <__swsetup_r>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	d0cb      	beq.n	800cdfc <__swbuf_r+0x28>
 800ce64:	f04f 37ff 	mov.w	r7, #4294967295
 800ce68:	e7ea      	b.n	800ce40 <__swbuf_r+0x6c>
 800ce6a:	bf00      	nop
 800ce6c:	0800e838 	.word	0x0800e838
 800ce70:	0800e858 	.word	0x0800e858
 800ce74:	0800e818 	.word	0x0800e818

0800ce78 <_write_r>:
 800ce78:	b538      	push	{r3, r4, r5, lr}
 800ce7a:	4d07      	ldr	r5, [pc, #28]	; (800ce98 <_write_r+0x20>)
 800ce7c:	4604      	mov	r4, r0
 800ce7e:	4608      	mov	r0, r1
 800ce80:	4611      	mov	r1, r2
 800ce82:	2200      	movs	r2, #0
 800ce84:	602a      	str	r2, [r5, #0]
 800ce86:	461a      	mov	r2, r3
 800ce88:	f7f6 fc17 	bl	80036ba <_write>
 800ce8c:	1c43      	adds	r3, r0, #1
 800ce8e:	d102      	bne.n	800ce96 <_write_r+0x1e>
 800ce90:	682b      	ldr	r3, [r5, #0]
 800ce92:	b103      	cbz	r3, 800ce96 <_write_r+0x1e>
 800ce94:	6023      	str	r3, [r4, #0]
 800ce96:	bd38      	pop	{r3, r4, r5, pc}
 800ce98:	20005510 	.word	0x20005510

0800ce9c <__swsetup_r>:
 800ce9c:	4b32      	ldr	r3, [pc, #200]	; (800cf68 <__swsetup_r+0xcc>)
 800ce9e:	b570      	push	{r4, r5, r6, lr}
 800cea0:	681d      	ldr	r5, [r3, #0]
 800cea2:	4606      	mov	r6, r0
 800cea4:	460c      	mov	r4, r1
 800cea6:	b125      	cbz	r5, 800ceb2 <__swsetup_r+0x16>
 800cea8:	69ab      	ldr	r3, [r5, #24]
 800ceaa:	b913      	cbnz	r3, 800ceb2 <__swsetup_r+0x16>
 800ceac:	4628      	mov	r0, r5
 800ceae:	f7fe ff0b 	bl	800bcc8 <__sinit>
 800ceb2:	4b2e      	ldr	r3, [pc, #184]	; (800cf6c <__swsetup_r+0xd0>)
 800ceb4:	429c      	cmp	r4, r3
 800ceb6:	d10f      	bne.n	800ced8 <__swsetup_r+0x3c>
 800ceb8:	686c      	ldr	r4, [r5, #4]
 800ceba:	89a3      	ldrh	r3, [r4, #12]
 800cebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cec0:	0719      	lsls	r1, r3, #28
 800cec2:	d42c      	bmi.n	800cf1e <__swsetup_r+0x82>
 800cec4:	06dd      	lsls	r5, r3, #27
 800cec6:	d411      	bmi.n	800ceec <__swsetup_r+0x50>
 800cec8:	2309      	movs	r3, #9
 800ceca:	6033      	str	r3, [r6, #0]
 800cecc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ced0:	81a3      	strh	r3, [r4, #12]
 800ced2:	f04f 30ff 	mov.w	r0, #4294967295
 800ced6:	e03e      	b.n	800cf56 <__swsetup_r+0xba>
 800ced8:	4b25      	ldr	r3, [pc, #148]	; (800cf70 <__swsetup_r+0xd4>)
 800ceda:	429c      	cmp	r4, r3
 800cedc:	d101      	bne.n	800cee2 <__swsetup_r+0x46>
 800cede:	68ac      	ldr	r4, [r5, #8]
 800cee0:	e7eb      	b.n	800ceba <__swsetup_r+0x1e>
 800cee2:	4b24      	ldr	r3, [pc, #144]	; (800cf74 <__swsetup_r+0xd8>)
 800cee4:	429c      	cmp	r4, r3
 800cee6:	bf08      	it	eq
 800cee8:	68ec      	ldreq	r4, [r5, #12]
 800ceea:	e7e6      	b.n	800ceba <__swsetup_r+0x1e>
 800ceec:	0758      	lsls	r0, r3, #29
 800ceee:	d512      	bpl.n	800cf16 <__swsetup_r+0x7a>
 800cef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cef2:	b141      	cbz	r1, 800cf06 <__swsetup_r+0x6a>
 800cef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cef8:	4299      	cmp	r1, r3
 800cefa:	d002      	beq.n	800cf02 <__swsetup_r+0x66>
 800cefc:	4630      	mov	r0, r6
 800cefe:	f7ff fb49 	bl	800c594 <_free_r>
 800cf02:	2300      	movs	r3, #0
 800cf04:	6363      	str	r3, [r4, #52]	; 0x34
 800cf06:	89a3      	ldrh	r3, [r4, #12]
 800cf08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf0c:	81a3      	strh	r3, [r4, #12]
 800cf0e:	2300      	movs	r3, #0
 800cf10:	6063      	str	r3, [r4, #4]
 800cf12:	6923      	ldr	r3, [r4, #16]
 800cf14:	6023      	str	r3, [r4, #0]
 800cf16:	89a3      	ldrh	r3, [r4, #12]
 800cf18:	f043 0308 	orr.w	r3, r3, #8
 800cf1c:	81a3      	strh	r3, [r4, #12]
 800cf1e:	6923      	ldr	r3, [r4, #16]
 800cf20:	b94b      	cbnz	r3, 800cf36 <__swsetup_r+0x9a>
 800cf22:	89a3      	ldrh	r3, [r4, #12]
 800cf24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf2c:	d003      	beq.n	800cf36 <__swsetup_r+0x9a>
 800cf2e:	4621      	mov	r1, r4
 800cf30:	4630      	mov	r0, r6
 800cf32:	f000 f95b 	bl	800d1ec <__smakebuf_r>
 800cf36:	89a0      	ldrh	r0, [r4, #12]
 800cf38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf3c:	f010 0301 	ands.w	r3, r0, #1
 800cf40:	d00a      	beq.n	800cf58 <__swsetup_r+0xbc>
 800cf42:	2300      	movs	r3, #0
 800cf44:	60a3      	str	r3, [r4, #8]
 800cf46:	6963      	ldr	r3, [r4, #20]
 800cf48:	425b      	negs	r3, r3
 800cf4a:	61a3      	str	r3, [r4, #24]
 800cf4c:	6923      	ldr	r3, [r4, #16]
 800cf4e:	b943      	cbnz	r3, 800cf62 <__swsetup_r+0xc6>
 800cf50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cf54:	d1ba      	bne.n	800cecc <__swsetup_r+0x30>
 800cf56:	bd70      	pop	{r4, r5, r6, pc}
 800cf58:	0781      	lsls	r1, r0, #30
 800cf5a:	bf58      	it	pl
 800cf5c:	6963      	ldrpl	r3, [r4, #20]
 800cf5e:	60a3      	str	r3, [r4, #8]
 800cf60:	e7f4      	b.n	800cf4c <__swsetup_r+0xb0>
 800cf62:	2000      	movs	r0, #0
 800cf64:	e7f7      	b.n	800cf56 <__swsetup_r+0xba>
 800cf66:	bf00      	nop
 800cf68:	2000001c 	.word	0x2000001c
 800cf6c:	0800e838 	.word	0x0800e838
 800cf70:	0800e858 	.word	0x0800e858
 800cf74:	0800e818 	.word	0x0800e818

0800cf78 <__assert_func>:
 800cf78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf7a:	4614      	mov	r4, r2
 800cf7c:	461a      	mov	r2, r3
 800cf7e:	4b09      	ldr	r3, [pc, #36]	; (800cfa4 <__assert_func+0x2c>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4605      	mov	r5, r0
 800cf84:	68d8      	ldr	r0, [r3, #12]
 800cf86:	b14c      	cbz	r4, 800cf9c <__assert_func+0x24>
 800cf88:	4b07      	ldr	r3, [pc, #28]	; (800cfa8 <__assert_func+0x30>)
 800cf8a:	9100      	str	r1, [sp, #0]
 800cf8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf90:	4906      	ldr	r1, [pc, #24]	; (800cfac <__assert_func+0x34>)
 800cf92:	462b      	mov	r3, r5
 800cf94:	f000 f8e0 	bl	800d158 <fiprintf>
 800cf98:	f000 f9c7 	bl	800d32a <abort>
 800cf9c:	4b04      	ldr	r3, [pc, #16]	; (800cfb0 <__assert_func+0x38>)
 800cf9e:	461c      	mov	r4, r3
 800cfa0:	e7f3      	b.n	800cf8a <__assert_func+0x12>
 800cfa2:	bf00      	nop
 800cfa4:	2000001c 	.word	0x2000001c
 800cfa8:	0800e9e5 	.word	0x0800e9e5
 800cfac:	0800e9f2 	.word	0x0800e9f2
 800cfb0:	0800ea20 	.word	0x0800ea20

0800cfb4 <_close_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4d06      	ldr	r5, [pc, #24]	; (800cfd0 <_close_r+0x1c>)
 800cfb8:	2300      	movs	r3, #0
 800cfba:	4604      	mov	r4, r0
 800cfbc:	4608      	mov	r0, r1
 800cfbe:	602b      	str	r3, [r5, #0]
 800cfc0:	f7f6 fb97 	bl	80036f2 <_close>
 800cfc4:	1c43      	adds	r3, r0, #1
 800cfc6:	d102      	bne.n	800cfce <_close_r+0x1a>
 800cfc8:	682b      	ldr	r3, [r5, #0]
 800cfca:	b103      	cbz	r3, 800cfce <_close_r+0x1a>
 800cfcc:	6023      	str	r3, [r4, #0]
 800cfce:	bd38      	pop	{r3, r4, r5, pc}
 800cfd0:	20005510 	.word	0x20005510

0800cfd4 <__sflush_r>:
 800cfd4:	898a      	ldrh	r2, [r1, #12]
 800cfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfda:	4605      	mov	r5, r0
 800cfdc:	0710      	lsls	r0, r2, #28
 800cfde:	460c      	mov	r4, r1
 800cfe0:	d458      	bmi.n	800d094 <__sflush_r+0xc0>
 800cfe2:	684b      	ldr	r3, [r1, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dc05      	bgt.n	800cff4 <__sflush_r+0x20>
 800cfe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	dc02      	bgt.n	800cff4 <__sflush_r+0x20>
 800cfee:	2000      	movs	r0, #0
 800cff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cff6:	2e00      	cmp	r6, #0
 800cff8:	d0f9      	beq.n	800cfee <__sflush_r+0x1a>
 800cffa:	2300      	movs	r3, #0
 800cffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d000:	682f      	ldr	r7, [r5, #0]
 800d002:	602b      	str	r3, [r5, #0]
 800d004:	d032      	beq.n	800d06c <__sflush_r+0x98>
 800d006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d008:	89a3      	ldrh	r3, [r4, #12]
 800d00a:	075a      	lsls	r2, r3, #29
 800d00c:	d505      	bpl.n	800d01a <__sflush_r+0x46>
 800d00e:	6863      	ldr	r3, [r4, #4]
 800d010:	1ac0      	subs	r0, r0, r3
 800d012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d014:	b10b      	cbz	r3, 800d01a <__sflush_r+0x46>
 800d016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d018:	1ac0      	subs	r0, r0, r3
 800d01a:	2300      	movs	r3, #0
 800d01c:	4602      	mov	r2, r0
 800d01e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d020:	6a21      	ldr	r1, [r4, #32]
 800d022:	4628      	mov	r0, r5
 800d024:	47b0      	blx	r6
 800d026:	1c43      	adds	r3, r0, #1
 800d028:	89a3      	ldrh	r3, [r4, #12]
 800d02a:	d106      	bne.n	800d03a <__sflush_r+0x66>
 800d02c:	6829      	ldr	r1, [r5, #0]
 800d02e:	291d      	cmp	r1, #29
 800d030:	d82c      	bhi.n	800d08c <__sflush_r+0xb8>
 800d032:	4a2a      	ldr	r2, [pc, #168]	; (800d0dc <__sflush_r+0x108>)
 800d034:	40ca      	lsrs	r2, r1
 800d036:	07d6      	lsls	r6, r2, #31
 800d038:	d528      	bpl.n	800d08c <__sflush_r+0xb8>
 800d03a:	2200      	movs	r2, #0
 800d03c:	6062      	str	r2, [r4, #4]
 800d03e:	04d9      	lsls	r1, r3, #19
 800d040:	6922      	ldr	r2, [r4, #16]
 800d042:	6022      	str	r2, [r4, #0]
 800d044:	d504      	bpl.n	800d050 <__sflush_r+0x7c>
 800d046:	1c42      	adds	r2, r0, #1
 800d048:	d101      	bne.n	800d04e <__sflush_r+0x7a>
 800d04a:	682b      	ldr	r3, [r5, #0]
 800d04c:	b903      	cbnz	r3, 800d050 <__sflush_r+0x7c>
 800d04e:	6560      	str	r0, [r4, #84]	; 0x54
 800d050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d052:	602f      	str	r7, [r5, #0]
 800d054:	2900      	cmp	r1, #0
 800d056:	d0ca      	beq.n	800cfee <__sflush_r+0x1a>
 800d058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d05c:	4299      	cmp	r1, r3
 800d05e:	d002      	beq.n	800d066 <__sflush_r+0x92>
 800d060:	4628      	mov	r0, r5
 800d062:	f7ff fa97 	bl	800c594 <_free_r>
 800d066:	2000      	movs	r0, #0
 800d068:	6360      	str	r0, [r4, #52]	; 0x34
 800d06a:	e7c1      	b.n	800cff0 <__sflush_r+0x1c>
 800d06c:	6a21      	ldr	r1, [r4, #32]
 800d06e:	2301      	movs	r3, #1
 800d070:	4628      	mov	r0, r5
 800d072:	47b0      	blx	r6
 800d074:	1c41      	adds	r1, r0, #1
 800d076:	d1c7      	bne.n	800d008 <__sflush_r+0x34>
 800d078:	682b      	ldr	r3, [r5, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d0c4      	beq.n	800d008 <__sflush_r+0x34>
 800d07e:	2b1d      	cmp	r3, #29
 800d080:	d001      	beq.n	800d086 <__sflush_r+0xb2>
 800d082:	2b16      	cmp	r3, #22
 800d084:	d101      	bne.n	800d08a <__sflush_r+0xb6>
 800d086:	602f      	str	r7, [r5, #0]
 800d088:	e7b1      	b.n	800cfee <__sflush_r+0x1a>
 800d08a:	89a3      	ldrh	r3, [r4, #12]
 800d08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d090:	81a3      	strh	r3, [r4, #12]
 800d092:	e7ad      	b.n	800cff0 <__sflush_r+0x1c>
 800d094:	690f      	ldr	r7, [r1, #16]
 800d096:	2f00      	cmp	r7, #0
 800d098:	d0a9      	beq.n	800cfee <__sflush_r+0x1a>
 800d09a:	0793      	lsls	r3, r2, #30
 800d09c:	680e      	ldr	r6, [r1, #0]
 800d09e:	bf08      	it	eq
 800d0a0:	694b      	ldreq	r3, [r1, #20]
 800d0a2:	600f      	str	r7, [r1, #0]
 800d0a4:	bf18      	it	ne
 800d0a6:	2300      	movne	r3, #0
 800d0a8:	eba6 0807 	sub.w	r8, r6, r7
 800d0ac:	608b      	str	r3, [r1, #8]
 800d0ae:	f1b8 0f00 	cmp.w	r8, #0
 800d0b2:	dd9c      	ble.n	800cfee <__sflush_r+0x1a>
 800d0b4:	6a21      	ldr	r1, [r4, #32]
 800d0b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0b8:	4643      	mov	r3, r8
 800d0ba:	463a      	mov	r2, r7
 800d0bc:	4628      	mov	r0, r5
 800d0be:	47b0      	blx	r6
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	dc06      	bgt.n	800d0d2 <__sflush_r+0xfe>
 800d0c4:	89a3      	ldrh	r3, [r4, #12]
 800d0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ca:	81a3      	strh	r3, [r4, #12]
 800d0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d0:	e78e      	b.n	800cff0 <__sflush_r+0x1c>
 800d0d2:	4407      	add	r7, r0
 800d0d4:	eba8 0800 	sub.w	r8, r8, r0
 800d0d8:	e7e9      	b.n	800d0ae <__sflush_r+0xda>
 800d0da:	bf00      	nop
 800d0dc:	20400001 	.word	0x20400001

0800d0e0 <_fflush_r>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	690b      	ldr	r3, [r1, #16]
 800d0e4:	4605      	mov	r5, r0
 800d0e6:	460c      	mov	r4, r1
 800d0e8:	b913      	cbnz	r3, 800d0f0 <_fflush_r+0x10>
 800d0ea:	2500      	movs	r5, #0
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	bd38      	pop	{r3, r4, r5, pc}
 800d0f0:	b118      	cbz	r0, 800d0fa <_fflush_r+0x1a>
 800d0f2:	6983      	ldr	r3, [r0, #24]
 800d0f4:	b90b      	cbnz	r3, 800d0fa <_fflush_r+0x1a>
 800d0f6:	f7fe fde7 	bl	800bcc8 <__sinit>
 800d0fa:	4b14      	ldr	r3, [pc, #80]	; (800d14c <_fflush_r+0x6c>)
 800d0fc:	429c      	cmp	r4, r3
 800d0fe:	d11b      	bne.n	800d138 <_fflush_r+0x58>
 800d100:	686c      	ldr	r4, [r5, #4]
 800d102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d0ef      	beq.n	800d0ea <_fflush_r+0xa>
 800d10a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d10c:	07d0      	lsls	r0, r2, #31
 800d10e:	d404      	bmi.n	800d11a <_fflush_r+0x3a>
 800d110:	0599      	lsls	r1, r3, #22
 800d112:	d402      	bmi.n	800d11a <_fflush_r+0x3a>
 800d114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d116:	f7fe fe7a 	bl	800be0e <__retarget_lock_acquire_recursive>
 800d11a:	4628      	mov	r0, r5
 800d11c:	4621      	mov	r1, r4
 800d11e:	f7ff ff59 	bl	800cfd4 <__sflush_r>
 800d122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d124:	07da      	lsls	r2, r3, #31
 800d126:	4605      	mov	r5, r0
 800d128:	d4e0      	bmi.n	800d0ec <_fflush_r+0xc>
 800d12a:	89a3      	ldrh	r3, [r4, #12]
 800d12c:	059b      	lsls	r3, r3, #22
 800d12e:	d4dd      	bmi.n	800d0ec <_fflush_r+0xc>
 800d130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d132:	f7fe fe6d 	bl	800be10 <__retarget_lock_release_recursive>
 800d136:	e7d9      	b.n	800d0ec <_fflush_r+0xc>
 800d138:	4b05      	ldr	r3, [pc, #20]	; (800d150 <_fflush_r+0x70>)
 800d13a:	429c      	cmp	r4, r3
 800d13c:	d101      	bne.n	800d142 <_fflush_r+0x62>
 800d13e:	68ac      	ldr	r4, [r5, #8]
 800d140:	e7df      	b.n	800d102 <_fflush_r+0x22>
 800d142:	4b04      	ldr	r3, [pc, #16]	; (800d154 <_fflush_r+0x74>)
 800d144:	429c      	cmp	r4, r3
 800d146:	bf08      	it	eq
 800d148:	68ec      	ldreq	r4, [r5, #12]
 800d14a:	e7da      	b.n	800d102 <_fflush_r+0x22>
 800d14c:	0800e838 	.word	0x0800e838
 800d150:	0800e858 	.word	0x0800e858
 800d154:	0800e818 	.word	0x0800e818

0800d158 <fiprintf>:
 800d158:	b40e      	push	{r1, r2, r3}
 800d15a:	b503      	push	{r0, r1, lr}
 800d15c:	4601      	mov	r1, r0
 800d15e:	ab03      	add	r3, sp, #12
 800d160:	4805      	ldr	r0, [pc, #20]	; (800d178 <fiprintf+0x20>)
 800d162:	f853 2b04 	ldr.w	r2, [r3], #4
 800d166:	6800      	ldr	r0, [r0, #0]
 800d168:	9301      	str	r3, [sp, #4]
 800d16a:	f7ff fca7 	bl	800cabc <_vfiprintf_r>
 800d16e:	b002      	add	sp, #8
 800d170:	f85d eb04 	ldr.w	lr, [sp], #4
 800d174:	b003      	add	sp, #12
 800d176:	4770      	bx	lr
 800d178:	2000001c 	.word	0x2000001c

0800d17c <_lseek_r>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	4d07      	ldr	r5, [pc, #28]	; (800d19c <_lseek_r+0x20>)
 800d180:	4604      	mov	r4, r0
 800d182:	4608      	mov	r0, r1
 800d184:	4611      	mov	r1, r2
 800d186:	2200      	movs	r2, #0
 800d188:	602a      	str	r2, [r5, #0]
 800d18a:	461a      	mov	r2, r3
 800d18c:	f7f6 fad8 	bl	8003740 <_lseek>
 800d190:	1c43      	adds	r3, r0, #1
 800d192:	d102      	bne.n	800d19a <_lseek_r+0x1e>
 800d194:	682b      	ldr	r3, [r5, #0]
 800d196:	b103      	cbz	r3, 800d19a <_lseek_r+0x1e>
 800d198:	6023      	str	r3, [r4, #0]
 800d19a:	bd38      	pop	{r3, r4, r5, pc}
 800d19c:	20005510 	.word	0x20005510

0800d1a0 <__swhatbuf_r>:
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	460e      	mov	r6, r1
 800d1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1a8:	2900      	cmp	r1, #0
 800d1aa:	b096      	sub	sp, #88	; 0x58
 800d1ac:	4614      	mov	r4, r2
 800d1ae:	461d      	mov	r5, r3
 800d1b0:	da08      	bge.n	800d1c4 <__swhatbuf_r+0x24>
 800d1b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	602a      	str	r2, [r5, #0]
 800d1ba:	061a      	lsls	r2, r3, #24
 800d1bc:	d410      	bmi.n	800d1e0 <__swhatbuf_r+0x40>
 800d1be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1c2:	e00e      	b.n	800d1e2 <__swhatbuf_r+0x42>
 800d1c4:	466a      	mov	r2, sp
 800d1c6:	f000 f8b7 	bl	800d338 <_fstat_r>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	dbf1      	blt.n	800d1b2 <__swhatbuf_r+0x12>
 800d1ce:	9a01      	ldr	r2, [sp, #4]
 800d1d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d1d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d1d8:	425a      	negs	r2, r3
 800d1da:	415a      	adcs	r2, r3
 800d1dc:	602a      	str	r2, [r5, #0]
 800d1de:	e7ee      	b.n	800d1be <__swhatbuf_r+0x1e>
 800d1e0:	2340      	movs	r3, #64	; 0x40
 800d1e2:	2000      	movs	r0, #0
 800d1e4:	6023      	str	r3, [r4, #0]
 800d1e6:	b016      	add	sp, #88	; 0x58
 800d1e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d1ec <__smakebuf_r>:
 800d1ec:	898b      	ldrh	r3, [r1, #12]
 800d1ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1f0:	079d      	lsls	r5, r3, #30
 800d1f2:	4606      	mov	r6, r0
 800d1f4:	460c      	mov	r4, r1
 800d1f6:	d507      	bpl.n	800d208 <__smakebuf_r+0x1c>
 800d1f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1fc:	6023      	str	r3, [r4, #0]
 800d1fe:	6123      	str	r3, [r4, #16]
 800d200:	2301      	movs	r3, #1
 800d202:	6163      	str	r3, [r4, #20]
 800d204:	b002      	add	sp, #8
 800d206:	bd70      	pop	{r4, r5, r6, pc}
 800d208:	ab01      	add	r3, sp, #4
 800d20a:	466a      	mov	r2, sp
 800d20c:	f7ff ffc8 	bl	800d1a0 <__swhatbuf_r>
 800d210:	9900      	ldr	r1, [sp, #0]
 800d212:	4605      	mov	r5, r0
 800d214:	4630      	mov	r0, r6
 800d216:	f7ff fa29 	bl	800c66c <_malloc_r>
 800d21a:	b948      	cbnz	r0, 800d230 <__smakebuf_r+0x44>
 800d21c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d220:	059a      	lsls	r2, r3, #22
 800d222:	d4ef      	bmi.n	800d204 <__smakebuf_r+0x18>
 800d224:	f023 0303 	bic.w	r3, r3, #3
 800d228:	f043 0302 	orr.w	r3, r3, #2
 800d22c:	81a3      	strh	r3, [r4, #12]
 800d22e:	e7e3      	b.n	800d1f8 <__smakebuf_r+0xc>
 800d230:	4b0d      	ldr	r3, [pc, #52]	; (800d268 <__smakebuf_r+0x7c>)
 800d232:	62b3      	str	r3, [r6, #40]	; 0x28
 800d234:	89a3      	ldrh	r3, [r4, #12]
 800d236:	6020      	str	r0, [r4, #0]
 800d238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d23c:	81a3      	strh	r3, [r4, #12]
 800d23e:	9b00      	ldr	r3, [sp, #0]
 800d240:	6163      	str	r3, [r4, #20]
 800d242:	9b01      	ldr	r3, [sp, #4]
 800d244:	6120      	str	r0, [r4, #16]
 800d246:	b15b      	cbz	r3, 800d260 <__smakebuf_r+0x74>
 800d248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d24c:	4630      	mov	r0, r6
 800d24e:	f000 f885 	bl	800d35c <_isatty_r>
 800d252:	b128      	cbz	r0, 800d260 <__smakebuf_r+0x74>
 800d254:	89a3      	ldrh	r3, [r4, #12]
 800d256:	f023 0303 	bic.w	r3, r3, #3
 800d25a:	f043 0301 	orr.w	r3, r3, #1
 800d25e:	81a3      	strh	r3, [r4, #12]
 800d260:	89a0      	ldrh	r0, [r4, #12]
 800d262:	4305      	orrs	r5, r0
 800d264:	81a5      	strh	r5, [r4, #12]
 800d266:	e7cd      	b.n	800d204 <__smakebuf_r+0x18>
 800d268:	0800bc61 	.word	0x0800bc61

0800d26c <__ascii_mbtowc>:
 800d26c:	b082      	sub	sp, #8
 800d26e:	b901      	cbnz	r1, 800d272 <__ascii_mbtowc+0x6>
 800d270:	a901      	add	r1, sp, #4
 800d272:	b142      	cbz	r2, 800d286 <__ascii_mbtowc+0x1a>
 800d274:	b14b      	cbz	r3, 800d28a <__ascii_mbtowc+0x1e>
 800d276:	7813      	ldrb	r3, [r2, #0]
 800d278:	600b      	str	r3, [r1, #0]
 800d27a:	7812      	ldrb	r2, [r2, #0]
 800d27c:	1e10      	subs	r0, r2, #0
 800d27e:	bf18      	it	ne
 800d280:	2001      	movne	r0, #1
 800d282:	b002      	add	sp, #8
 800d284:	4770      	bx	lr
 800d286:	4610      	mov	r0, r2
 800d288:	e7fb      	b.n	800d282 <__ascii_mbtowc+0x16>
 800d28a:	f06f 0001 	mvn.w	r0, #1
 800d28e:	e7f8      	b.n	800d282 <__ascii_mbtowc+0x16>

0800d290 <memmove>:
 800d290:	4288      	cmp	r0, r1
 800d292:	b510      	push	{r4, lr}
 800d294:	eb01 0402 	add.w	r4, r1, r2
 800d298:	d902      	bls.n	800d2a0 <memmove+0x10>
 800d29a:	4284      	cmp	r4, r0
 800d29c:	4623      	mov	r3, r4
 800d29e:	d807      	bhi.n	800d2b0 <memmove+0x20>
 800d2a0:	1e43      	subs	r3, r0, #1
 800d2a2:	42a1      	cmp	r1, r4
 800d2a4:	d008      	beq.n	800d2b8 <memmove+0x28>
 800d2a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2ae:	e7f8      	b.n	800d2a2 <memmove+0x12>
 800d2b0:	4402      	add	r2, r0
 800d2b2:	4601      	mov	r1, r0
 800d2b4:	428a      	cmp	r2, r1
 800d2b6:	d100      	bne.n	800d2ba <memmove+0x2a>
 800d2b8:	bd10      	pop	{r4, pc}
 800d2ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2c2:	e7f7      	b.n	800d2b4 <memmove+0x24>

0800d2c4 <__malloc_lock>:
 800d2c4:	4801      	ldr	r0, [pc, #4]	; (800d2cc <__malloc_lock+0x8>)
 800d2c6:	f7fe bda2 	b.w	800be0e <__retarget_lock_acquire_recursive>
 800d2ca:	bf00      	nop
 800d2cc:	20005504 	.word	0x20005504

0800d2d0 <__malloc_unlock>:
 800d2d0:	4801      	ldr	r0, [pc, #4]	; (800d2d8 <__malloc_unlock+0x8>)
 800d2d2:	f7fe bd9d 	b.w	800be10 <__retarget_lock_release_recursive>
 800d2d6:	bf00      	nop
 800d2d8:	20005504 	.word	0x20005504

0800d2dc <_malloc_usable_size_r>:
 800d2dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2e0:	1f18      	subs	r0, r3, #4
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	bfbc      	itt	lt
 800d2e6:	580b      	ldrlt	r3, [r1, r0]
 800d2e8:	18c0      	addlt	r0, r0, r3
 800d2ea:	4770      	bx	lr

0800d2ec <_read_r>:
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	4d07      	ldr	r5, [pc, #28]	; (800d30c <_read_r+0x20>)
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	4608      	mov	r0, r1
 800d2f4:	4611      	mov	r1, r2
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	602a      	str	r2, [r5, #0]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	f7f6 f9c0 	bl	8003680 <_read>
 800d300:	1c43      	adds	r3, r0, #1
 800d302:	d102      	bne.n	800d30a <_read_r+0x1e>
 800d304:	682b      	ldr	r3, [r5, #0]
 800d306:	b103      	cbz	r3, 800d30a <_read_r+0x1e>
 800d308:	6023      	str	r3, [r4, #0]
 800d30a:	bd38      	pop	{r3, r4, r5, pc}
 800d30c:	20005510 	.word	0x20005510

0800d310 <__ascii_wctomb>:
 800d310:	b149      	cbz	r1, 800d326 <__ascii_wctomb+0x16>
 800d312:	2aff      	cmp	r2, #255	; 0xff
 800d314:	bf85      	ittet	hi
 800d316:	238a      	movhi	r3, #138	; 0x8a
 800d318:	6003      	strhi	r3, [r0, #0]
 800d31a:	700a      	strbls	r2, [r1, #0]
 800d31c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d320:	bf98      	it	ls
 800d322:	2001      	movls	r0, #1
 800d324:	4770      	bx	lr
 800d326:	4608      	mov	r0, r1
 800d328:	4770      	bx	lr

0800d32a <abort>:
 800d32a:	b508      	push	{r3, lr}
 800d32c:	2006      	movs	r0, #6
 800d32e:	f000 f84d 	bl	800d3cc <raise>
 800d332:	2001      	movs	r0, #1
 800d334:	f7f6 f99a 	bl	800366c <_exit>

0800d338 <_fstat_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4d07      	ldr	r5, [pc, #28]	; (800d358 <_fstat_r+0x20>)
 800d33c:	2300      	movs	r3, #0
 800d33e:	4604      	mov	r4, r0
 800d340:	4608      	mov	r0, r1
 800d342:	4611      	mov	r1, r2
 800d344:	602b      	str	r3, [r5, #0]
 800d346:	f7f6 f9e0 	bl	800370a <_fstat>
 800d34a:	1c43      	adds	r3, r0, #1
 800d34c:	d102      	bne.n	800d354 <_fstat_r+0x1c>
 800d34e:	682b      	ldr	r3, [r5, #0]
 800d350:	b103      	cbz	r3, 800d354 <_fstat_r+0x1c>
 800d352:	6023      	str	r3, [r4, #0]
 800d354:	bd38      	pop	{r3, r4, r5, pc}
 800d356:	bf00      	nop
 800d358:	20005510 	.word	0x20005510

0800d35c <_isatty_r>:
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	4d06      	ldr	r5, [pc, #24]	; (800d378 <_isatty_r+0x1c>)
 800d360:	2300      	movs	r3, #0
 800d362:	4604      	mov	r4, r0
 800d364:	4608      	mov	r0, r1
 800d366:	602b      	str	r3, [r5, #0]
 800d368:	f7f6 f9df 	bl	800372a <_isatty>
 800d36c:	1c43      	adds	r3, r0, #1
 800d36e:	d102      	bne.n	800d376 <_isatty_r+0x1a>
 800d370:	682b      	ldr	r3, [r5, #0]
 800d372:	b103      	cbz	r3, 800d376 <_isatty_r+0x1a>
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	bd38      	pop	{r3, r4, r5, pc}
 800d378:	20005510 	.word	0x20005510

0800d37c <_raise_r>:
 800d37c:	291f      	cmp	r1, #31
 800d37e:	b538      	push	{r3, r4, r5, lr}
 800d380:	4604      	mov	r4, r0
 800d382:	460d      	mov	r5, r1
 800d384:	d904      	bls.n	800d390 <_raise_r+0x14>
 800d386:	2316      	movs	r3, #22
 800d388:	6003      	str	r3, [r0, #0]
 800d38a:	f04f 30ff 	mov.w	r0, #4294967295
 800d38e:	bd38      	pop	{r3, r4, r5, pc}
 800d390:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d392:	b112      	cbz	r2, 800d39a <_raise_r+0x1e>
 800d394:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d398:	b94b      	cbnz	r3, 800d3ae <_raise_r+0x32>
 800d39a:	4620      	mov	r0, r4
 800d39c:	f000 f830 	bl	800d400 <_getpid_r>
 800d3a0:	462a      	mov	r2, r5
 800d3a2:	4601      	mov	r1, r0
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3aa:	f000 b817 	b.w	800d3dc <_kill_r>
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d00a      	beq.n	800d3c8 <_raise_r+0x4c>
 800d3b2:	1c59      	adds	r1, r3, #1
 800d3b4:	d103      	bne.n	800d3be <_raise_r+0x42>
 800d3b6:	2316      	movs	r3, #22
 800d3b8:	6003      	str	r3, [r0, #0]
 800d3ba:	2001      	movs	r0, #1
 800d3bc:	e7e7      	b.n	800d38e <_raise_r+0x12>
 800d3be:	2400      	movs	r4, #0
 800d3c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	4798      	blx	r3
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	e7e0      	b.n	800d38e <_raise_r+0x12>

0800d3cc <raise>:
 800d3cc:	4b02      	ldr	r3, [pc, #8]	; (800d3d8 <raise+0xc>)
 800d3ce:	4601      	mov	r1, r0
 800d3d0:	6818      	ldr	r0, [r3, #0]
 800d3d2:	f7ff bfd3 	b.w	800d37c <_raise_r>
 800d3d6:	bf00      	nop
 800d3d8:	2000001c 	.word	0x2000001c

0800d3dc <_kill_r>:
 800d3dc:	b538      	push	{r3, r4, r5, lr}
 800d3de:	4d07      	ldr	r5, [pc, #28]	; (800d3fc <_kill_r+0x20>)
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	4608      	mov	r0, r1
 800d3e6:	4611      	mov	r1, r2
 800d3e8:	602b      	str	r3, [r5, #0]
 800d3ea:	f7f6 f92f 	bl	800364c <_kill>
 800d3ee:	1c43      	adds	r3, r0, #1
 800d3f0:	d102      	bne.n	800d3f8 <_kill_r+0x1c>
 800d3f2:	682b      	ldr	r3, [r5, #0]
 800d3f4:	b103      	cbz	r3, 800d3f8 <_kill_r+0x1c>
 800d3f6:	6023      	str	r3, [r4, #0]
 800d3f8:	bd38      	pop	{r3, r4, r5, pc}
 800d3fa:	bf00      	nop
 800d3fc:	20005510 	.word	0x20005510

0800d400 <_getpid_r>:
 800d400:	f7f6 b91c 	b.w	800363c <_getpid>
 800d404:	0000      	movs	r0, r0
	...

0800d408 <floor>:
 800d408:	ec51 0b10 	vmov	r0, r1, d0
 800d40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d410:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d414:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d418:	2e13      	cmp	r6, #19
 800d41a:	ee10 5a10 	vmov	r5, s0
 800d41e:	ee10 8a10 	vmov	r8, s0
 800d422:	460c      	mov	r4, r1
 800d424:	dc32      	bgt.n	800d48c <floor+0x84>
 800d426:	2e00      	cmp	r6, #0
 800d428:	da14      	bge.n	800d454 <floor+0x4c>
 800d42a:	a333      	add	r3, pc, #204	; (adr r3, 800d4f8 <floor+0xf0>)
 800d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d430:	f7f2 ff2c 	bl	800028c <__adddf3>
 800d434:	2200      	movs	r2, #0
 800d436:	2300      	movs	r3, #0
 800d438:	f7f3 fb6e 	bl	8000b18 <__aeabi_dcmpgt>
 800d43c:	b138      	cbz	r0, 800d44e <floor+0x46>
 800d43e:	2c00      	cmp	r4, #0
 800d440:	da57      	bge.n	800d4f2 <floor+0xea>
 800d442:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d446:	431d      	orrs	r5, r3
 800d448:	d001      	beq.n	800d44e <floor+0x46>
 800d44a:	4c2d      	ldr	r4, [pc, #180]	; (800d500 <floor+0xf8>)
 800d44c:	2500      	movs	r5, #0
 800d44e:	4621      	mov	r1, r4
 800d450:	4628      	mov	r0, r5
 800d452:	e025      	b.n	800d4a0 <floor+0x98>
 800d454:	4f2b      	ldr	r7, [pc, #172]	; (800d504 <floor+0xfc>)
 800d456:	4137      	asrs	r7, r6
 800d458:	ea01 0307 	and.w	r3, r1, r7
 800d45c:	4303      	orrs	r3, r0
 800d45e:	d01f      	beq.n	800d4a0 <floor+0x98>
 800d460:	a325      	add	r3, pc, #148	; (adr r3, 800d4f8 <floor+0xf0>)
 800d462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d466:	f7f2 ff11 	bl	800028c <__adddf3>
 800d46a:	2200      	movs	r2, #0
 800d46c:	2300      	movs	r3, #0
 800d46e:	f7f3 fb53 	bl	8000b18 <__aeabi_dcmpgt>
 800d472:	2800      	cmp	r0, #0
 800d474:	d0eb      	beq.n	800d44e <floor+0x46>
 800d476:	2c00      	cmp	r4, #0
 800d478:	bfbe      	ittt	lt
 800d47a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d47e:	fa43 f606 	asrlt.w	r6, r3, r6
 800d482:	19a4      	addlt	r4, r4, r6
 800d484:	ea24 0407 	bic.w	r4, r4, r7
 800d488:	2500      	movs	r5, #0
 800d48a:	e7e0      	b.n	800d44e <floor+0x46>
 800d48c:	2e33      	cmp	r6, #51	; 0x33
 800d48e:	dd0b      	ble.n	800d4a8 <floor+0xa0>
 800d490:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d494:	d104      	bne.n	800d4a0 <floor+0x98>
 800d496:	ee10 2a10 	vmov	r2, s0
 800d49a:	460b      	mov	r3, r1
 800d49c:	f7f2 fef6 	bl	800028c <__adddf3>
 800d4a0:	ec41 0b10 	vmov	d0, r0, r1
 800d4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800d4b0:	fa23 f707 	lsr.w	r7, r3, r7
 800d4b4:	4207      	tst	r7, r0
 800d4b6:	d0f3      	beq.n	800d4a0 <floor+0x98>
 800d4b8:	a30f      	add	r3, pc, #60	; (adr r3, 800d4f8 <floor+0xf0>)
 800d4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4be:	f7f2 fee5 	bl	800028c <__adddf3>
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	f7f3 fb27 	bl	8000b18 <__aeabi_dcmpgt>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d0bf      	beq.n	800d44e <floor+0x46>
 800d4ce:	2c00      	cmp	r4, #0
 800d4d0:	da02      	bge.n	800d4d8 <floor+0xd0>
 800d4d2:	2e14      	cmp	r6, #20
 800d4d4:	d103      	bne.n	800d4de <floor+0xd6>
 800d4d6:	3401      	adds	r4, #1
 800d4d8:	ea25 0507 	bic.w	r5, r5, r7
 800d4dc:	e7b7      	b.n	800d44e <floor+0x46>
 800d4de:	2301      	movs	r3, #1
 800d4e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d4e4:	fa03 f606 	lsl.w	r6, r3, r6
 800d4e8:	4435      	add	r5, r6
 800d4ea:	4545      	cmp	r5, r8
 800d4ec:	bf38      	it	cc
 800d4ee:	18e4      	addcc	r4, r4, r3
 800d4f0:	e7f2      	b.n	800d4d8 <floor+0xd0>
 800d4f2:	2500      	movs	r5, #0
 800d4f4:	462c      	mov	r4, r5
 800d4f6:	e7aa      	b.n	800d44e <floor+0x46>
 800d4f8:	8800759c 	.word	0x8800759c
 800d4fc:	7e37e43c 	.word	0x7e37e43c
 800d500:	bff00000 	.word	0xbff00000
 800d504:	000fffff 	.word	0x000fffff

0800d508 <pow>:
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	ed2d 8b02 	vpush	{d8}
 800d50e:	eeb0 8a40 	vmov.f32	s16, s0
 800d512:	eef0 8a60 	vmov.f32	s17, s1
 800d516:	ec55 4b11 	vmov	r4, r5, d1
 800d51a:	f000 f865 	bl	800d5e8 <__ieee754_pow>
 800d51e:	4622      	mov	r2, r4
 800d520:	462b      	mov	r3, r5
 800d522:	4620      	mov	r0, r4
 800d524:	4629      	mov	r1, r5
 800d526:	ec57 6b10 	vmov	r6, r7, d0
 800d52a:	f7f3 faff 	bl	8000b2c <__aeabi_dcmpun>
 800d52e:	2800      	cmp	r0, #0
 800d530:	d13b      	bne.n	800d5aa <pow+0xa2>
 800d532:	ec51 0b18 	vmov	r0, r1, d8
 800d536:	2200      	movs	r2, #0
 800d538:	2300      	movs	r3, #0
 800d53a:	f7f3 fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800d53e:	b1b8      	cbz	r0, 800d570 <pow+0x68>
 800d540:	2200      	movs	r2, #0
 800d542:	2300      	movs	r3, #0
 800d544:	4620      	mov	r0, r4
 800d546:	4629      	mov	r1, r5
 800d548:	f7f3 fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 800d54c:	2800      	cmp	r0, #0
 800d54e:	d146      	bne.n	800d5de <pow+0xd6>
 800d550:	ec45 4b10 	vmov	d0, r4, r5
 800d554:	f000 fe61 	bl	800e21a <finite>
 800d558:	b338      	cbz	r0, 800d5aa <pow+0xa2>
 800d55a:	2200      	movs	r2, #0
 800d55c:	2300      	movs	r3, #0
 800d55e:	4620      	mov	r0, r4
 800d560:	4629      	mov	r1, r5
 800d562:	f7f3 fabb 	bl	8000adc <__aeabi_dcmplt>
 800d566:	b300      	cbz	r0, 800d5aa <pow+0xa2>
 800d568:	f7fc fdf8 	bl	800a15c <__errno>
 800d56c:	2322      	movs	r3, #34	; 0x22
 800d56e:	e01b      	b.n	800d5a8 <pow+0xa0>
 800d570:	ec47 6b10 	vmov	d0, r6, r7
 800d574:	f000 fe51 	bl	800e21a <finite>
 800d578:	b9e0      	cbnz	r0, 800d5b4 <pow+0xac>
 800d57a:	eeb0 0a48 	vmov.f32	s0, s16
 800d57e:	eef0 0a68 	vmov.f32	s1, s17
 800d582:	f000 fe4a 	bl	800e21a <finite>
 800d586:	b1a8      	cbz	r0, 800d5b4 <pow+0xac>
 800d588:	ec45 4b10 	vmov	d0, r4, r5
 800d58c:	f000 fe45 	bl	800e21a <finite>
 800d590:	b180      	cbz	r0, 800d5b4 <pow+0xac>
 800d592:	4632      	mov	r2, r6
 800d594:	463b      	mov	r3, r7
 800d596:	4630      	mov	r0, r6
 800d598:	4639      	mov	r1, r7
 800d59a:	f7f3 fac7 	bl	8000b2c <__aeabi_dcmpun>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	d0e2      	beq.n	800d568 <pow+0x60>
 800d5a2:	f7fc fddb 	bl	800a15c <__errno>
 800d5a6:	2321      	movs	r3, #33	; 0x21
 800d5a8:	6003      	str	r3, [r0, #0]
 800d5aa:	ecbd 8b02 	vpop	{d8}
 800d5ae:	ec47 6b10 	vmov	d0, r6, r7
 800d5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	4630      	mov	r0, r6
 800d5ba:	4639      	mov	r1, r7
 800d5bc:	f7f3 fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5c0:	2800      	cmp	r0, #0
 800d5c2:	d0f2      	beq.n	800d5aa <pow+0xa2>
 800d5c4:	eeb0 0a48 	vmov.f32	s0, s16
 800d5c8:	eef0 0a68 	vmov.f32	s1, s17
 800d5cc:	f000 fe25 	bl	800e21a <finite>
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	d0ea      	beq.n	800d5aa <pow+0xa2>
 800d5d4:	ec45 4b10 	vmov	d0, r4, r5
 800d5d8:	f000 fe1f 	bl	800e21a <finite>
 800d5dc:	e7c3      	b.n	800d566 <pow+0x5e>
 800d5de:	4f01      	ldr	r7, [pc, #4]	; (800d5e4 <pow+0xdc>)
 800d5e0:	2600      	movs	r6, #0
 800d5e2:	e7e2      	b.n	800d5aa <pow+0xa2>
 800d5e4:	3ff00000 	.word	0x3ff00000

0800d5e8 <__ieee754_pow>:
 800d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ec:	ed2d 8b06 	vpush	{d8-d10}
 800d5f0:	b089      	sub	sp, #36	; 0x24
 800d5f2:	ed8d 1b00 	vstr	d1, [sp]
 800d5f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d5fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d5fe:	ea58 0102 	orrs.w	r1, r8, r2
 800d602:	ec57 6b10 	vmov	r6, r7, d0
 800d606:	d115      	bne.n	800d634 <__ieee754_pow+0x4c>
 800d608:	19b3      	adds	r3, r6, r6
 800d60a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d60e:	4152      	adcs	r2, r2
 800d610:	4299      	cmp	r1, r3
 800d612:	4b89      	ldr	r3, [pc, #548]	; (800d838 <__ieee754_pow+0x250>)
 800d614:	4193      	sbcs	r3, r2
 800d616:	f080 84d2 	bcs.w	800dfbe <__ieee754_pow+0x9d6>
 800d61a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d61e:	4630      	mov	r0, r6
 800d620:	4639      	mov	r1, r7
 800d622:	f7f2 fe33 	bl	800028c <__adddf3>
 800d626:	ec41 0b10 	vmov	d0, r0, r1
 800d62a:	b009      	add	sp, #36	; 0x24
 800d62c:	ecbd 8b06 	vpop	{d8-d10}
 800d630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d634:	4b81      	ldr	r3, [pc, #516]	; (800d83c <__ieee754_pow+0x254>)
 800d636:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d63a:	429c      	cmp	r4, r3
 800d63c:	ee10 aa10 	vmov	sl, s0
 800d640:	463d      	mov	r5, r7
 800d642:	dc06      	bgt.n	800d652 <__ieee754_pow+0x6a>
 800d644:	d101      	bne.n	800d64a <__ieee754_pow+0x62>
 800d646:	2e00      	cmp	r6, #0
 800d648:	d1e7      	bne.n	800d61a <__ieee754_pow+0x32>
 800d64a:	4598      	cmp	r8, r3
 800d64c:	dc01      	bgt.n	800d652 <__ieee754_pow+0x6a>
 800d64e:	d10f      	bne.n	800d670 <__ieee754_pow+0x88>
 800d650:	b172      	cbz	r2, 800d670 <__ieee754_pow+0x88>
 800d652:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d656:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d65a:	ea55 050a 	orrs.w	r5, r5, sl
 800d65e:	d1dc      	bne.n	800d61a <__ieee754_pow+0x32>
 800d660:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d664:	18db      	adds	r3, r3, r3
 800d666:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d66a:	4152      	adcs	r2, r2
 800d66c:	429d      	cmp	r5, r3
 800d66e:	e7d0      	b.n	800d612 <__ieee754_pow+0x2a>
 800d670:	2d00      	cmp	r5, #0
 800d672:	da3b      	bge.n	800d6ec <__ieee754_pow+0x104>
 800d674:	4b72      	ldr	r3, [pc, #456]	; (800d840 <__ieee754_pow+0x258>)
 800d676:	4598      	cmp	r8, r3
 800d678:	dc51      	bgt.n	800d71e <__ieee754_pow+0x136>
 800d67a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d67e:	4598      	cmp	r8, r3
 800d680:	f340 84ac 	ble.w	800dfdc <__ieee754_pow+0x9f4>
 800d684:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d688:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d68c:	2b14      	cmp	r3, #20
 800d68e:	dd0f      	ble.n	800d6b0 <__ieee754_pow+0xc8>
 800d690:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d694:	fa22 f103 	lsr.w	r1, r2, r3
 800d698:	fa01 f303 	lsl.w	r3, r1, r3
 800d69c:	4293      	cmp	r3, r2
 800d69e:	f040 849d 	bne.w	800dfdc <__ieee754_pow+0x9f4>
 800d6a2:	f001 0101 	and.w	r1, r1, #1
 800d6a6:	f1c1 0302 	rsb	r3, r1, #2
 800d6aa:	9304      	str	r3, [sp, #16]
 800d6ac:	b182      	cbz	r2, 800d6d0 <__ieee754_pow+0xe8>
 800d6ae:	e05f      	b.n	800d770 <__ieee754_pow+0x188>
 800d6b0:	2a00      	cmp	r2, #0
 800d6b2:	d15b      	bne.n	800d76c <__ieee754_pow+0x184>
 800d6b4:	f1c3 0314 	rsb	r3, r3, #20
 800d6b8:	fa48 f103 	asr.w	r1, r8, r3
 800d6bc:	fa01 f303 	lsl.w	r3, r1, r3
 800d6c0:	4543      	cmp	r3, r8
 800d6c2:	f040 8488 	bne.w	800dfd6 <__ieee754_pow+0x9ee>
 800d6c6:	f001 0101 	and.w	r1, r1, #1
 800d6ca:	f1c1 0302 	rsb	r3, r1, #2
 800d6ce:	9304      	str	r3, [sp, #16]
 800d6d0:	4b5c      	ldr	r3, [pc, #368]	; (800d844 <__ieee754_pow+0x25c>)
 800d6d2:	4598      	cmp	r8, r3
 800d6d4:	d132      	bne.n	800d73c <__ieee754_pow+0x154>
 800d6d6:	f1b9 0f00 	cmp.w	r9, #0
 800d6da:	f280 8478 	bge.w	800dfce <__ieee754_pow+0x9e6>
 800d6de:	4959      	ldr	r1, [pc, #356]	; (800d844 <__ieee754_pow+0x25c>)
 800d6e0:	4632      	mov	r2, r6
 800d6e2:	463b      	mov	r3, r7
 800d6e4:	2000      	movs	r0, #0
 800d6e6:	f7f3 f8b1 	bl	800084c <__aeabi_ddiv>
 800d6ea:	e79c      	b.n	800d626 <__ieee754_pow+0x3e>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	9304      	str	r3, [sp, #16]
 800d6f0:	2a00      	cmp	r2, #0
 800d6f2:	d13d      	bne.n	800d770 <__ieee754_pow+0x188>
 800d6f4:	4b51      	ldr	r3, [pc, #324]	; (800d83c <__ieee754_pow+0x254>)
 800d6f6:	4598      	cmp	r8, r3
 800d6f8:	d1ea      	bne.n	800d6d0 <__ieee754_pow+0xe8>
 800d6fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d6fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d702:	ea53 030a 	orrs.w	r3, r3, sl
 800d706:	f000 845a 	beq.w	800dfbe <__ieee754_pow+0x9d6>
 800d70a:	4b4f      	ldr	r3, [pc, #316]	; (800d848 <__ieee754_pow+0x260>)
 800d70c:	429c      	cmp	r4, r3
 800d70e:	dd08      	ble.n	800d722 <__ieee754_pow+0x13a>
 800d710:	f1b9 0f00 	cmp.w	r9, #0
 800d714:	f2c0 8457 	blt.w	800dfc6 <__ieee754_pow+0x9de>
 800d718:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d71c:	e783      	b.n	800d626 <__ieee754_pow+0x3e>
 800d71e:	2302      	movs	r3, #2
 800d720:	e7e5      	b.n	800d6ee <__ieee754_pow+0x106>
 800d722:	f1b9 0f00 	cmp.w	r9, #0
 800d726:	f04f 0000 	mov.w	r0, #0
 800d72a:	f04f 0100 	mov.w	r1, #0
 800d72e:	f6bf af7a 	bge.w	800d626 <__ieee754_pow+0x3e>
 800d732:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d736:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d73a:	e774      	b.n	800d626 <__ieee754_pow+0x3e>
 800d73c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d740:	d106      	bne.n	800d750 <__ieee754_pow+0x168>
 800d742:	4632      	mov	r2, r6
 800d744:	463b      	mov	r3, r7
 800d746:	4630      	mov	r0, r6
 800d748:	4639      	mov	r1, r7
 800d74a:	f7f2 ff55 	bl	80005f8 <__aeabi_dmul>
 800d74e:	e76a      	b.n	800d626 <__ieee754_pow+0x3e>
 800d750:	4b3e      	ldr	r3, [pc, #248]	; (800d84c <__ieee754_pow+0x264>)
 800d752:	4599      	cmp	r9, r3
 800d754:	d10c      	bne.n	800d770 <__ieee754_pow+0x188>
 800d756:	2d00      	cmp	r5, #0
 800d758:	db0a      	blt.n	800d770 <__ieee754_pow+0x188>
 800d75a:	ec47 6b10 	vmov	d0, r6, r7
 800d75e:	b009      	add	sp, #36	; 0x24
 800d760:	ecbd 8b06 	vpop	{d8-d10}
 800d764:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d768:	f000 bc6c 	b.w	800e044 <__ieee754_sqrt>
 800d76c:	2300      	movs	r3, #0
 800d76e:	9304      	str	r3, [sp, #16]
 800d770:	ec47 6b10 	vmov	d0, r6, r7
 800d774:	f000 fd48 	bl	800e208 <fabs>
 800d778:	ec51 0b10 	vmov	r0, r1, d0
 800d77c:	f1ba 0f00 	cmp.w	sl, #0
 800d780:	d129      	bne.n	800d7d6 <__ieee754_pow+0x1ee>
 800d782:	b124      	cbz	r4, 800d78e <__ieee754_pow+0x1a6>
 800d784:	4b2f      	ldr	r3, [pc, #188]	; (800d844 <__ieee754_pow+0x25c>)
 800d786:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d123      	bne.n	800d7d6 <__ieee754_pow+0x1ee>
 800d78e:	f1b9 0f00 	cmp.w	r9, #0
 800d792:	da05      	bge.n	800d7a0 <__ieee754_pow+0x1b8>
 800d794:	4602      	mov	r2, r0
 800d796:	460b      	mov	r3, r1
 800d798:	2000      	movs	r0, #0
 800d79a:	492a      	ldr	r1, [pc, #168]	; (800d844 <__ieee754_pow+0x25c>)
 800d79c:	f7f3 f856 	bl	800084c <__aeabi_ddiv>
 800d7a0:	2d00      	cmp	r5, #0
 800d7a2:	f6bf af40 	bge.w	800d626 <__ieee754_pow+0x3e>
 800d7a6:	9b04      	ldr	r3, [sp, #16]
 800d7a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d7ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d7b0:	4323      	orrs	r3, r4
 800d7b2:	d108      	bne.n	800d7c6 <__ieee754_pow+0x1de>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	f7f2 fd64 	bl	8000288 <__aeabi_dsub>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	460b      	mov	r3, r1
 800d7c4:	e78f      	b.n	800d6e6 <__ieee754_pow+0xfe>
 800d7c6:	9b04      	ldr	r3, [sp, #16]
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	f47f af2c 	bne.w	800d626 <__ieee754_pow+0x3e>
 800d7ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	e727      	b.n	800d626 <__ieee754_pow+0x3e>
 800d7d6:	0feb      	lsrs	r3, r5, #31
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	9306      	str	r3, [sp, #24]
 800d7dc:	9a06      	ldr	r2, [sp, #24]
 800d7de:	9b04      	ldr	r3, [sp, #16]
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	d102      	bne.n	800d7ea <__ieee754_pow+0x202>
 800d7e4:	4632      	mov	r2, r6
 800d7e6:	463b      	mov	r3, r7
 800d7e8:	e7e6      	b.n	800d7b8 <__ieee754_pow+0x1d0>
 800d7ea:	4b19      	ldr	r3, [pc, #100]	; (800d850 <__ieee754_pow+0x268>)
 800d7ec:	4598      	cmp	r8, r3
 800d7ee:	f340 80fb 	ble.w	800d9e8 <__ieee754_pow+0x400>
 800d7f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d7f6:	4598      	cmp	r8, r3
 800d7f8:	4b13      	ldr	r3, [pc, #76]	; (800d848 <__ieee754_pow+0x260>)
 800d7fa:	dd0c      	ble.n	800d816 <__ieee754_pow+0x22e>
 800d7fc:	429c      	cmp	r4, r3
 800d7fe:	dc0f      	bgt.n	800d820 <__ieee754_pow+0x238>
 800d800:	f1b9 0f00 	cmp.w	r9, #0
 800d804:	da0f      	bge.n	800d826 <__ieee754_pow+0x23e>
 800d806:	2000      	movs	r0, #0
 800d808:	b009      	add	sp, #36	; 0x24
 800d80a:	ecbd 8b06 	vpop	{d8-d10}
 800d80e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d812:	f000 bcf0 	b.w	800e1f6 <__math_oflow>
 800d816:	429c      	cmp	r4, r3
 800d818:	dbf2      	blt.n	800d800 <__ieee754_pow+0x218>
 800d81a:	4b0a      	ldr	r3, [pc, #40]	; (800d844 <__ieee754_pow+0x25c>)
 800d81c:	429c      	cmp	r4, r3
 800d81e:	dd19      	ble.n	800d854 <__ieee754_pow+0x26c>
 800d820:	f1b9 0f00 	cmp.w	r9, #0
 800d824:	dcef      	bgt.n	800d806 <__ieee754_pow+0x21e>
 800d826:	2000      	movs	r0, #0
 800d828:	b009      	add	sp, #36	; 0x24
 800d82a:	ecbd 8b06 	vpop	{d8-d10}
 800d82e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d832:	f000 bcd7 	b.w	800e1e4 <__math_uflow>
 800d836:	bf00      	nop
 800d838:	fff00000 	.word	0xfff00000
 800d83c:	7ff00000 	.word	0x7ff00000
 800d840:	433fffff 	.word	0x433fffff
 800d844:	3ff00000 	.word	0x3ff00000
 800d848:	3fefffff 	.word	0x3fefffff
 800d84c:	3fe00000 	.word	0x3fe00000
 800d850:	41e00000 	.word	0x41e00000
 800d854:	4b60      	ldr	r3, [pc, #384]	; (800d9d8 <__ieee754_pow+0x3f0>)
 800d856:	2200      	movs	r2, #0
 800d858:	f7f2 fd16 	bl	8000288 <__aeabi_dsub>
 800d85c:	a354      	add	r3, pc, #336	; (adr r3, 800d9b0 <__ieee754_pow+0x3c8>)
 800d85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d862:	4604      	mov	r4, r0
 800d864:	460d      	mov	r5, r1
 800d866:	f7f2 fec7 	bl	80005f8 <__aeabi_dmul>
 800d86a:	a353      	add	r3, pc, #332	; (adr r3, 800d9b8 <__ieee754_pow+0x3d0>)
 800d86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d870:	4606      	mov	r6, r0
 800d872:	460f      	mov	r7, r1
 800d874:	4620      	mov	r0, r4
 800d876:	4629      	mov	r1, r5
 800d878:	f7f2 febe 	bl	80005f8 <__aeabi_dmul>
 800d87c:	4b57      	ldr	r3, [pc, #348]	; (800d9dc <__ieee754_pow+0x3f4>)
 800d87e:	4682      	mov	sl, r0
 800d880:	468b      	mov	fp, r1
 800d882:	2200      	movs	r2, #0
 800d884:	4620      	mov	r0, r4
 800d886:	4629      	mov	r1, r5
 800d888:	f7f2 feb6 	bl	80005f8 <__aeabi_dmul>
 800d88c:	4602      	mov	r2, r0
 800d88e:	460b      	mov	r3, r1
 800d890:	a14b      	add	r1, pc, #300	; (adr r1, 800d9c0 <__ieee754_pow+0x3d8>)
 800d892:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d896:	f7f2 fcf7 	bl	8000288 <__aeabi_dsub>
 800d89a:	4622      	mov	r2, r4
 800d89c:	462b      	mov	r3, r5
 800d89e:	f7f2 feab 	bl	80005f8 <__aeabi_dmul>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	494d      	ldr	r1, [pc, #308]	; (800d9e0 <__ieee754_pow+0x3f8>)
 800d8aa:	f7f2 fced 	bl	8000288 <__aeabi_dsub>
 800d8ae:	4622      	mov	r2, r4
 800d8b0:	4680      	mov	r8, r0
 800d8b2:	4689      	mov	r9, r1
 800d8b4:	462b      	mov	r3, r5
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	f7f2 fe9d 	bl	80005f8 <__aeabi_dmul>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4640      	mov	r0, r8
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	f7f2 fe97 	bl	80005f8 <__aeabi_dmul>
 800d8ca:	a33f      	add	r3, pc, #252	; (adr r3, 800d9c8 <__ieee754_pow+0x3e0>)
 800d8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d0:	f7f2 fe92 	bl	80005f8 <__aeabi_dmul>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	4650      	mov	r0, sl
 800d8da:	4659      	mov	r1, fp
 800d8dc:	f7f2 fcd4 	bl	8000288 <__aeabi_dsub>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	4680      	mov	r8, r0
 800d8e6:	4689      	mov	r9, r1
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	4639      	mov	r1, r7
 800d8ec:	f7f2 fcce 	bl	800028c <__adddf3>
 800d8f0:	2000      	movs	r0, #0
 800d8f2:	4632      	mov	r2, r6
 800d8f4:	463b      	mov	r3, r7
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	460d      	mov	r5, r1
 800d8fa:	f7f2 fcc5 	bl	8000288 <__aeabi_dsub>
 800d8fe:	4602      	mov	r2, r0
 800d900:	460b      	mov	r3, r1
 800d902:	4640      	mov	r0, r8
 800d904:	4649      	mov	r1, r9
 800d906:	f7f2 fcbf 	bl	8000288 <__aeabi_dsub>
 800d90a:	9b04      	ldr	r3, [sp, #16]
 800d90c:	9a06      	ldr	r2, [sp, #24]
 800d90e:	3b01      	subs	r3, #1
 800d910:	4313      	orrs	r3, r2
 800d912:	4682      	mov	sl, r0
 800d914:	468b      	mov	fp, r1
 800d916:	f040 81e7 	bne.w	800dce8 <__ieee754_pow+0x700>
 800d91a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d9d0 <__ieee754_pow+0x3e8>
 800d91e:	eeb0 8a47 	vmov.f32	s16, s14
 800d922:	eef0 8a67 	vmov.f32	s17, s15
 800d926:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d92a:	2600      	movs	r6, #0
 800d92c:	4632      	mov	r2, r6
 800d92e:	463b      	mov	r3, r7
 800d930:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d934:	f7f2 fca8 	bl	8000288 <__aeabi_dsub>
 800d938:	4622      	mov	r2, r4
 800d93a:	462b      	mov	r3, r5
 800d93c:	f7f2 fe5c 	bl	80005f8 <__aeabi_dmul>
 800d940:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d944:	4680      	mov	r8, r0
 800d946:	4689      	mov	r9, r1
 800d948:	4650      	mov	r0, sl
 800d94a:	4659      	mov	r1, fp
 800d94c:	f7f2 fe54 	bl	80005f8 <__aeabi_dmul>
 800d950:	4602      	mov	r2, r0
 800d952:	460b      	mov	r3, r1
 800d954:	4640      	mov	r0, r8
 800d956:	4649      	mov	r1, r9
 800d958:	f7f2 fc98 	bl	800028c <__adddf3>
 800d95c:	4632      	mov	r2, r6
 800d95e:	463b      	mov	r3, r7
 800d960:	4680      	mov	r8, r0
 800d962:	4689      	mov	r9, r1
 800d964:	4620      	mov	r0, r4
 800d966:	4629      	mov	r1, r5
 800d968:	f7f2 fe46 	bl	80005f8 <__aeabi_dmul>
 800d96c:	460b      	mov	r3, r1
 800d96e:	4604      	mov	r4, r0
 800d970:	460d      	mov	r5, r1
 800d972:	4602      	mov	r2, r0
 800d974:	4649      	mov	r1, r9
 800d976:	4640      	mov	r0, r8
 800d978:	f7f2 fc88 	bl	800028c <__adddf3>
 800d97c:	4b19      	ldr	r3, [pc, #100]	; (800d9e4 <__ieee754_pow+0x3fc>)
 800d97e:	4299      	cmp	r1, r3
 800d980:	ec45 4b19 	vmov	d9, r4, r5
 800d984:	4606      	mov	r6, r0
 800d986:	460f      	mov	r7, r1
 800d988:	468b      	mov	fp, r1
 800d98a:	f340 82f1 	ble.w	800df70 <__ieee754_pow+0x988>
 800d98e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d992:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d996:	4303      	orrs	r3, r0
 800d998:	f000 81e4 	beq.w	800dd64 <__ieee754_pow+0x77c>
 800d99c:	ec51 0b18 	vmov	r0, r1, d8
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	f7f3 f89a 	bl	8000adc <__aeabi_dcmplt>
 800d9a8:	3800      	subs	r0, #0
 800d9aa:	bf18      	it	ne
 800d9ac:	2001      	movne	r0, #1
 800d9ae:	e72b      	b.n	800d808 <__ieee754_pow+0x220>
 800d9b0:	60000000 	.word	0x60000000
 800d9b4:	3ff71547 	.word	0x3ff71547
 800d9b8:	f85ddf44 	.word	0xf85ddf44
 800d9bc:	3e54ae0b 	.word	0x3e54ae0b
 800d9c0:	55555555 	.word	0x55555555
 800d9c4:	3fd55555 	.word	0x3fd55555
 800d9c8:	652b82fe 	.word	0x652b82fe
 800d9cc:	3ff71547 	.word	0x3ff71547
 800d9d0:	00000000 	.word	0x00000000
 800d9d4:	bff00000 	.word	0xbff00000
 800d9d8:	3ff00000 	.word	0x3ff00000
 800d9dc:	3fd00000 	.word	0x3fd00000
 800d9e0:	3fe00000 	.word	0x3fe00000
 800d9e4:	408fffff 	.word	0x408fffff
 800d9e8:	4bd5      	ldr	r3, [pc, #852]	; (800dd40 <__ieee754_pow+0x758>)
 800d9ea:	402b      	ands	r3, r5
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	b92b      	cbnz	r3, 800d9fc <__ieee754_pow+0x414>
 800d9f0:	4bd4      	ldr	r3, [pc, #848]	; (800dd44 <__ieee754_pow+0x75c>)
 800d9f2:	f7f2 fe01 	bl	80005f8 <__aeabi_dmul>
 800d9f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	1523      	asrs	r3, r4, #20
 800d9fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800da02:	4413      	add	r3, r2
 800da04:	9305      	str	r3, [sp, #20]
 800da06:	4bd0      	ldr	r3, [pc, #832]	; (800dd48 <__ieee754_pow+0x760>)
 800da08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800da0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800da10:	429c      	cmp	r4, r3
 800da12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800da16:	dd08      	ble.n	800da2a <__ieee754_pow+0x442>
 800da18:	4bcc      	ldr	r3, [pc, #816]	; (800dd4c <__ieee754_pow+0x764>)
 800da1a:	429c      	cmp	r4, r3
 800da1c:	f340 8162 	ble.w	800dce4 <__ieee754_pow+0x6fc>
 800da20:	9b05      	ldr	r3, [sp, #20]
 800da22:	3301      	adds	r3, #1
 800da24:	9305      	str	r3, [sp, #20]
 800da26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800da2a:	2400      	movs	r4, #0
 800da2c:	00e3      	lsls	r3, r4, #3
 800da2e:	9307      	str	r3, [sp, #28]
 800da30:	4bc7      	ldr	r3, [pc, #796]	; (800dd50 <__ieee754_pow+0x768>)
 800da32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da36:	ed93 7b00 	vldr	d7, [r3]
 800da3a:	4629      	mov	r1, r5
 800da3c:	ec53 2b17 	vmov	r2, r3, d7
 800da40:	eeb0 9a47 	vmov.f32	s18, s14
 800da44:	eef0 9a67 	vmov.f32	s19, s15
 800da48:	4682      	mov	sl, r0
 800da4a:	f7f2 fc1d 	bl	8000288 <__aeabi_dsub>
 800da4e:	4652      	mov	r2, sl
 800da50:	4606      	mov	r6, r0
 800da52:	460f      	mov	r7, r1
 800da54:	462b      	mov	r3, r5
 800da56:	ec51 0b19 	vmov	r0, r1, d9
 800da5a:	f7f2 fc17 	bl	800028c <__adddf3>
 800da5e:	4602      	mov	r2, r0
 800da60:	460b      	mov	r3, r1
 800da62:	2000      	movs	r0, #0
 800da64:	49bb      	ldr	r1, [pc, #748]	; (800dd54 <__ieee754_pow+0x76c>)
 800da66:	f7f2 fef1 	bl	800084c <__aeabi_ddiv>
 800da6a:	ec41 0b1a 	vmov	d10, r0, r1
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	4630      	mov	r0, r6
 800da74:	4639      	mov	r1, r7
 800da76:	f7f2 fdbf 	bl	80005f8 <__aeabi_dmul>
 800da7a:	2300      	movs	r3, #0
 800da7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da80:	9302      	str	r3, [sp, #8]
 800da82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800da86:	46ab      	mov	fp, r5
 800da88:	106d      	asrs	r5, r5, #1
 800da8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800da8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800da92:	ec41 0b18 	vmov	d8, r0, r1
 800da96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800da9a:	2200      	movs	r2, #0
 800da9c:	4640      	mov	r0, r8
 800da9e:	4649      	mov	r1, r9
 800daa0:	4614      	mov	r4, r2
 800daa2:	461d      	mov	r5, r3
 800daa4:	f7f2 fda8 	bl	80005f8 <__aeabi_dmul>
 800daa8:	4602      	mov	r2, r0
 800daaa:	460b      	mov	r3, r1
 800daac:	4630      	mov	r0, r6
 800daae:	4639      	mov	r1, r7
 800dab0:	f7f2 fbea 	bl	8000288 <__aeabi_dsub>
 800dab4:	ec53 2b19 	vmov	r2, r3, d9
 800dab8:	4606      	mov	r6, r0
 800daba:	460f      	mov	r7, r1
 800dabc:	4620      	mov	r0, r4
 800dabe:	4629      	mov	r1, r5
 800dac0:	f7f2 fbe2 	bl	8000288 <__aeabi_dsub>
 800dac4:	4602      	mov	r2, r0
 800dac6:	460b      	mov	r3, r1
 800dac8:	4650      	mov	r0, sl
 800daca:	4659      	mov	r1, fp
 800dacc:	f7f2 fbdc 	bl	8000288 <__aeabi_dsub>
 800dad0:	4642      	mov	r2, r8
 800dad2:	464b      	mov	r3, r9
 800dad4:	f7f2 fd90 	bl	80005f8 <__aeabi_dmul>
 800dad8:	4602      	mov	r2, r0
 800dada:	460b      	mov	r3, r1
 800dadc:	4630      	mov	r0, r6
 800dade:	4639      	mov	r1, r7
 800dae0:	f7f2 fbd2 	bl	8000288 <__aeabi_dsub>
 800dae4:	ec53 2b1a 	vmov	r2, r3, d10
 800dae8:	f7f2 fd86 	bl	80005f8 <__aeabi_dmul>
 800daec:	ec53 2b18 	vmov	r2, r3, d8
 800daf0:	ec41 0b19 	vmov	d9, r0, r1
 800daf4:	ec51 0b18 	vmov	r0, r1, d8
 800daf8:	f7f2 fd7e 	bl	80005f8 <__aeabi_dmul>
 800dafc:	a37c      	add	r3, pc, #496	; (adr r3, 800dcf0 <__ieee754_pow+0x708>)
 800dafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db02:	4604      	mov	r4, r0
 800db04:	460d      	mov	r5, r1
 800db06:	f7f2 fd77 	bl	80005f8 <__aeabi_dmul>
 800db0a:	a37b      	add	r3, pc, #492	; (adr r3, 800dcf8 <__ieee754_pow+0x710>)
 800db0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db10:	f7f2 fbbc 	bl	800028c <__adddf3>
 800db14:	4622      	mov	r2, r4
 800db16:	462b      	mov	r3, r5
 800db18:	f7f2 fd6e 	bl	80005f8 <__aeabi_dmul>
 800db1c:	a378      	add	r3, pc, #480	; (adr r3, 800dd00 <__ieee754_pow+0x718>)
 800db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db22:	f7f2 fbb3 	bl	800028c <__adddf3>
 800db26:	4622      	mov	r2, r4
 800db28:	462b      	mov	r3, r5
 800db2a:	f7f2 fd65 	bl	80005f8 <__aeabi_dmul>
 800db2e:	a376      	add	r3, pc, #472	; (adr r3, 800dd08 <__ieee754_pow+0x720>)
 800db30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db34:	f7f2 fbaa 	bl	800028c <__adddf3>
 800db38:	4622      	mov	r2, r4
 800db3a:	462b      	mov	r3, r5
 800db3c:	f7f2 fd5c 	bl	80005f8 <__aeabi_dmul>
 800db40:	a373      	add	r3, pc, #460	; (adr r3, 800dd10 <__ieee754_pow+0x728>)
 800db42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db46:	f7f2 fba1 	bl	800028c <__adddf3>
 800db4a:	4622      	mov	r2, r4
 800db4c:	462b      	mov	r3, r5
 800db4e:	f7f2 fd53 	bl	80005f8 <__aeabi_dmul>
 800db52:	a371      	add	r3, pc, #452	; (adr r3, 800dd18 <__ieee754_pow+0x730>)
 800db54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db58:	f7f2 fb98 	bl	800028c <__adddf3>
 800db5c:	4622      	mov	r2, r4
 800db5e:	4606      	mov	r6, r0
 800db60:	460f      	mov	r7, r1
 800db62:	462b      	mov	r3, r5
 800db64:	4620      	mov	r0, r4
 800db66:	4629      	mov	r1, r5
 800db68:	f7f2 fd46 	bl	80005f8 <__aeabi_dmul>
 800db6c:	4602      	mov	r2, r0
 800db6e:	460b      	mov	r3, r1
 800db70:	4630      	mov	r0, r6
 800db72:	4639      	mov	r1, r7
 800db74:	f7f2 fd40 	bl	80005f8 <__aeabi_dmul>
 800db78:	4642      	mov	r2, r8
 800db7a:	4604      	mov	r4, r0
 800db7c:	460d      	mov	r5, r1
 800db7e:	464b      	mov	r3, r9
 800db80:	ec51 0b18 	vmov	r0, r1, d8
 800db84:	f7f2 fb82 	bl	800028c <__adddf3>
 800db88:	ec53 2b19 	vmov	r2, r3, d9
 800db8c:	f7f2 fd34 	bl	80005f8 <__aeabi_dmul>
 800db90:	4622      	mov	r2, r4
 800db92:	462b      	mov	r3, r5
 800db94:	f7f2 fb7a 	bl	800028c <__adddf3>
 800db98:	4642      	mov	r2, r8
 800db9a:	4682      	mov	sl, r0
 800db9c:	468b      	mov	fp, r1
 800db9e:	464b      	mov	r3, r9
 800dba0:	4640      	mov	r0, r8
 800dba2:	4649      	mov	r1, r9
 800dba4:	f7f2 fd28 	bl	80005f8 <__aeabi_dmul>
 800dba8:	4b6b      	ldr	r3, [pc, #428]	; (800dd58 <__ieee754_pow+0x770>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	4606      	mov	r6, r0
 800dbae:	460f      	mov	r7, r1
 800dbb0:	f7f2 fb6c 	bl	800028c <__adddf3>
 800dbb4:	4652      	mov	r2, sl
 800dbb6:	465b      	mov	r3, fp
 800dbb8:	f7f2 fb68 	bl	800028c <__adddf3>
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	460d      	mov	r5, r1
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4640      	mov	r0, r8
 800dbc8:	4649      	mov	r1, r9
 800dbca:	f7f2 fd15 	bl	80005f8 <__aeabi_dmul>
 800dbce:	4b62      	ldr	r3, [pc, #392]	; (800dd58 <__ieee754_pow+0x770>)
 800dbd0:	4680      	mov	r8, r0
 800dbd2:	4689      	mov	r9, r1
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	4629      	mov	r1, r5
 800dbda:	f7f2 fb55 	bl	8000288 <__aeabi_dsub>
 800dbde:	4632      	mov	r2, r6
 800dbe0:	463b      	mov	r3, r7
 800dbe2:	f7f2 fb51 	bl	8000288 <__aeabi_dsub>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	460b      	mov	r3, r1
 800dbea:	4650      	mov	r0, sl
 800dbec:	4659      	mov	r1, fp
 800dbee:	f7f2 fb4b 	bl	8000288 <__aeabi_dsub>
 800dbf2:	ec53 2b18 	vmov	r2, r3, d8
 800dbf6:	f7f2 fcff 	bl	80005f8 <__aeabi_dmul>
 800dbfa:	4622      	mov	r2, r4
 800dbfc:	4606      	mov	r6, r0
 800dbfe:	460f      	mov	r7, r1
 800dc00:	462b      	mov	r3, r5
 800dc02:	ec51 0b19 	vmov	r0, r1, d9
 800dc06:	f7f2 fcf7 	bl	80005f8 <__aeabi_dmul>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	4630      	mov	r0, r6
 800dc10:	4639      	mov	r1, r7
 800dc12:	f7f2 fb3b 	bl	800028c <__adddf3>
 800dc16:	4606      	mov	r6, r0
 800dc18:	460f      	mov	r7, r1
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	4640      	mov	r0, r8
 800dc20:	4649      	mov	r1, r9
 800dc22:	f7f2 fb33 	bl	800028c <__adddf3>
 800dc26:	a33e      	add	r3, pc, #248	; (adr r3, 800dd20 <__ieee754_pow+0x738>)
 800dc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	4604      	mov	r4, r0
 800dc30:	460d      	mov	r5, r1
 800dc32:	f7f2 fce1 	bl	80005f8 <__aeabi_dmul>
 800dc36:	4642      	mov	r2, r8
 800dc38:	ec41 0b18 	vmov	d8, r0, r1
 800dc3c:	464b      	mov	r3, r9
 800dc3e:	4620      	mov	r0, r4
 800dc40:	4629      	mov	r1, r5
 800dc42:	f7f2 fb21 	bl	8000288 <__aeabi_dsub>
 800dc46:	4602      	mov	r2, r0
 800dc48:	460b      	mov	r3, r1
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	4639      	mov	r1, r7
 800dc4e:	f7f2 fb1b 	bl	8000288 <__aeabi_dsub>
 800dc52:	a335      	add	r3, pc, #212	; (adr r3, 800dd28 <__ieee754_pow+0x740>)
 800dc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc58:	f7f2 fcce 	bl	80005f8 <__aeabi_dmul>
 800dc5c:	a334      	add	r3, pc, #208	; (adr r3, 800dd30 <__ieee754_pow+0x748>)
 800dc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc62:	4606      	mov	r6, r0
 800dc64:	460f      	mov	r7, r1
 800dc66:	4620      	mov	r0, r4
 800dc68:	4629      	mov	r1, r5
 800dc6a:	f7f2 fcc5 	bl	80005f8 <__aeabi_dmul>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	460b      	mov	r3, r1
 800dc72:	4630      	mov	r0, r6
 800dc74:	4639      	mov	r1, r7
 800dc76:	f7f2 fb09 	bl	800028c <__adddf3>
 800dc7a:	9a07      	ldr	r2, [sp, #28]
 800dc7c:	4b37      	ldr	r3, [pc, #220]	; (800dd5c <__ieee754_pow+0x774>)
 800dc7e:	4413      	add	r3, r2
 800dc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc84:	f7f2 fb02 	bl	800028c <__adddf3>
 800dc88:	4682      	mov	sl, r0
 800dc8a:	9805      	ldr	r0, [sp, #20]
 800dc8c:	468b      	mov	fp, r1
 800dc8e:	f7f2 fc49 	bl	8000524 <__aeabi_i2d>
 800dc92:	9a07      	ldr	r2, [sp, #28]
 800dc94:	4b32      	ldr	r3, [pc, #200]	; (800dd60 <__ieee754_pow+0x778>)
 800dc96:	4413      	add	r3, r2
 800dc98:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc9c:	4606      	mov	r6, r0
 800dc9e:	460f      	mov	r7, r1
 800dca0:	4652      	mov	r2, sl
 800dca2:	465b      	mov	r3, fp
 800dca4:	ec51 0b18 	vmov	r0, r1, d8
 800dca8:	f7f2 faf0 	bl	800028c <__adddf3>
 800dcac:	4642      	mov	r2, r8
 800dcae:	464b      	mov	r3, r9
 800dcb0:	f7f2 faec 	bl	800028c <__adddf3>
 800dcb4:	4632      	mov	r2, r6
 800dcb6:	463b      	mov	r3, r7
 800dcb8:	f7f2 fae8 	bl	800028c <__adddf3>
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	4632      	mov	r2, r6
 800dcc0:	463b      	mov	r3, r7
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	460d      	mov	r5, r1
 800dcc6:	f7f2 fadf 	bl	8000288 <__aeabi_dsub>
 800dcca:	4642      	mov	r2, r8
 800dccc:	464b      	mov	r3, r9
 800dcce:	f7f2 fadb 	bl	8000288 <__aeabi_dsub>
 800dcd2:	ec53 2b18 	vmov	r2, r3, d8
 800dcd6:	f7f2 fad7 	bl	8000288 <__aeabi_dsub>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	460b      	mov	r3, r1
 800dcde:	4650      	mov	r0, sl
 800dce0:	4659      	mov	r1, fp
 800dce2:	e610      	b.n	800d906 <__ieee754_pow+0x31e>
 800dce4:	2401      	movs	r4, #1
 800dce6:	e6a1      	b.n	800da2c <__ieee754_pow+0x444>
 800dce8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800dd38 <__ieee754_pow+0x750>
 800dcec:	e617      	b.n	800d91e <__ieee754_pow+0x336>
 800dcee:	bf00      	nop
 800dcf0:	4a454eef 	.word	0x4a454eef
 800dcf4:	3fca7e28 	.word	0x3fca7e28
 800dcf8:	93c9db65 	.word	0x93c9db65
 800dcfc:	3fcd864a 	.word	0x3fcd864a
 800dd00:	a91d4101 	.word	0xa91d4101
 800dd04:	3fd17460 	.word	0x3fd17460
 800dd08:	518f264d 	.word	0x518f264d
 800dd0c:	3fd55555 	.word	0x3fd55555
 800dd10:	db6fabff 	.word	0xdb6fabff
 800dd14:	3fdb6db6 	.word	0x3fdb6db6
 800dd18:	33333303 	.word	0x33333303
 800dd1c:	3fe33333 	.word	0x3fe33333
 800dd20:	e0000000 	.word	0xe0000000
 800dd24:	3feec709 	.word	0x3feec709
 800dd28:	dc3a03fd 	.word	0xdc3a03fd
 800dd2c:	3feec709 	.word	0x3feec709
 800dd30:	145b01f5 	.word	0x145b01f5
 800dd34:	be3e2fe0 	.word	0xbe3e2fe0
 800dd38:	00000000 	.word	0x00000000
 800dd3c:	3ff00000 	.word	0x3ff00000
 800dd40:	7ff00000 	.word	0x7ff00000
 800dd44:	43400000 	.word	0x43400000
 800dd48:	0003988e 	.word	0x0003988e
 800dd4c:	000bb679 	.word	0x000bb679
 800dd50:	0800ea30 	.word	0x0800ea30
 800dd54:	3ff00000 	.word	0x3ff00000
 800dd58:	40080000 	.word	0x40080000
 800dd5c:	0800ea50 	.word	0x0800ea50
 800dd60:	0800ea40 	.word	0x0800ea40
 800dd64:	a3b5      	add	r3, pc, #724	; (adr r3, 800e03c <__ieee754_pow+0xa54>)
 800dd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6a:	4640      	mov	r0, r8
 800dd6c:	4649      	mov	r1, r9
 800dd6e:	f7f2 fa8d 	bl	800028c <__adddf3>
 800dd72:	4622      	mov	r2, r4
 800dd74:	ec41 0b1a 	vmov	d10, r0, r1
 800dd78:	462b      	mov	r3, r5
 800dd7a:	4630      	mov	r0, r6
 800dd7c:	4639      	mov	r1, r7
 800dd7e:	f7f2 fa83 	bl	8000288 <__aeabi_dsub>
 800dd82:	4602      	mov	r2, r0
 800dd84:	460b      	mov	r3, r1
 800dd86:	ec51 0b1a 	vmov	r0, r1, d10
 800dd8a:	f7f2 fec5 	bl	8000b18 <__aeabi_dcmpgt>
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	f47f ae04 	bne.w	800d99c <__ieee754_pow+0x3b4>
 800dd94:	4aa4      	ldr	r2, [pc, #656]	; (800e028 <__ieee754_pow+0xa40>)
 800dd96:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	f340 8108 	ble.w	800dfb0 <__ieee754_pow+0x9c8>
 800dda0:	151b      	asrs	r3, r3, #20
 800dda2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dda6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ddaa:	fa4a f303 	asr.w	r3, sl, r3
 800ddae:	445b      	add	r3, fp
 800ddb0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ddb4:	4e9d      	ldr	r6, [pc, #628]	; (800e02c <__ieee754_pow+0xa44>)
 800ddb6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ddba:	4116      	asrs	r6, r2
 800ddbc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800ddc0:	2000      	movs	r0, #0
 800ddc2:	ea23 0106 	bic.w	r1, r3, r6
 800ddc6:	f1c2 0214 	rsb	r2, r2, #20
 800ddca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ddce:	fa4a fa02 	asr.w	sl, sl, r2
 800ddd2:	f1bb 0f00 	cmp.w	fp, #0
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	4620      	mov	r0, r4
 800dddc:	4629      	mov	r1, r5
 800ddde:	bfb8      	it	lt
 800dde0:	f1ca 0a00 	rsblt	sl, sl, #0
 800dde4:	f7f2 fa50 	bl	8000288 <__aeabi_dsub>
 800dde8:	ec41 0b19 	vmov	d9, r0, r1
 800ddec:	4642      	mov	r2, r8
 800ddee:	464b      	mov	r3, r9
 800ddf0:	ec51 0b19 	vmov	r0, r1, d9
 800ddf4:	f7f2 fa4a 	bl	800028c <__adddf3>
 800ddf8:	a37b      	add	r3, pc, #492	; (adr r3, 800dfe8 <__ieee754_pow+0xa00>)
 800ddfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfe:	2000      	movs	r0, #0
 800de00:	4604      	mov	r4, r0
 800de02:	460d      	mov	r5, r1
 800de04:	f7f2 fbf8 	bl	80005f8 <__aeabi_dmul>
 800de08:	ec53 2b19 	vmov	r2, r3, d9
 800de0c:	4606      	mov	r6, r0
 800de0e:	460f      	mov	r7, r1
 800de10:	4620      	mov	r0, r4
 800de12:	4629      	mov	r1, r5
 800de14:	f7f2 fa38 	bl	8000288 <__aeabi_dsub>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	4640      	mov	r0, r8
 800de1e:	4649      	mov	r1, r9
 800de20:	f7f2 fa32 	bl	8000288 <__aeabi_dsub>
 800de24:	a372      	add	r3, pc, #456	; (adr r3, 800dff0 <__ieee754_pow+0xa08>)
 800de26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2a:	f7f2 fbe5 	bl	80005f8 <__aeabi_dmul>
 800de2e:	a372      	add	r3, pc, #456	; (adr r3, 800dff8 <__ieee754_pow+0xa10>)
 800de30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de34:	4680      	mov	r8, r0
 800de36:	4689      	mov	r9, r1
 800de38:	4620      	mov	r0, r4
 800de3a:	4629      	mov	r1, r5
 800de3c:	f7f2 fbdc 	bl	80005f8 <__aeabi_dmul>
 800de40:	4602      	mov	r2, r0
 800de42:	460b      	mov	r3, r1
 800de44:	4640      	mov	r0, r8
 800de46:	4649      	mov	r1, r9
 800de48:	f7f2 fa20 	bl	800028c <__adddf3>
 800de4c:	4604      	mov	r4, r0
 800de4e:	460d      	mov	r5, r1
 800de50:	4602      	mov	r2, r0
 800de52:	460b      	mov	r3, r1
 800de54:	4630      	mov	r0, r6
 800de56:	4639      	mov	r1, r7
 800de58:	f7f2 fa18 	bl	800028c <__adddf3>
 800de5c:	4632      	mov	r2, r6
 800de5e:	463b      	mov	r3, r7
 800de60:	4680      	mov	r8, r0
 800de62:	4689      	mov	r9, r1
 800de64:	f7f2 fa10 	bl	8000288 <__aeabi_dsub>
 800de68:	4602      	mov	r2, r0
 800de6a:	460b      	mov	r3, r1
 800de6c:	4620      	mov	r0, r4
 800de6e:	4629      	mov	r1, r5
 800de70:	f7f2 fa0a 	bl	8000288 <__aeabi_dsub>
 800de74:	4642      	mov	r2, r8
 800de76:	4606      	mov	r6, r0
 800de78:	460f      	mov	r7, r1
 800de7a:	464b      	mov	r3, r9
 800de7c:	4640      	mov	r0, r8
 800de7e:	4649      	mov	r1, r9
 800de80:	f7f2 fbba 	bl	80005f8 <__aeabi_dmul>
 800de84:	a35e      	add	r3, pc, #376	; (adr r3, 800e000 <__ieee754_pow+0xa18>)
 800de86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8a:	4604      	mov	r4, r0
 800de8c:	460d      	mov	r5, r1
 800de8e:	f7f2 fbb3 	bl	80005f8 <__aeabi_dmul>
 800de92:	a35d      	add	r3, pc, #372	; (adr r3, 800e008 <__ieee754_pow+0xa20>)
 800de94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de98:	f7f2 f9f6 	bl	8000288 <__aeabi_dsub>
 800de9c:	4622      	mov	r2, r4
 800de9e:	462b      	mov	r3, r5
 800dea0:	f7f2 fbaa 	bl	80005f8 <__aeabi_dmul>
 800dea4:	a35a      	add	r3, pc, #360	; (adr r3, 800e010 <__ieee754_pow+0xa28>)
 800dea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deaa:	f7f2 f9ef 	bl	800028c <__adddf3>
 800deae:	4622      	mov	r2, r4
 800deb0:	462b      	mov	r3, r5
 800deb2:	f7f2 fba1 	bl	80005f8 <__aeabi_dmul>
 800deb6:	a358      	add	r3, pc, #352	; (adr r3, 800e018 <__ieee754_pow+0xa30>)
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	f7f2 f9e4 	bl	8000288 <__aeabi_dsub>
 800dec0:	4622      	mov	r2, r4
 800dec2:	462b      	mov	r3, r5
 800dec4:	f7f2 fb98 	bl	80005f8 <__aeabi_dmul>
 800dec8:	a355      	add	r3, pc, #340	; (adr r3, 800e020 <__ieee754_pow+0xa38>)
 800deca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dece:	f7f2 f9dd 	bl	800028c <__adddf3>
 800ded2:	4622      	mov	r2, r4
 800ded4:	462b      	mov	r3, r5
 800ded6:	f7f2 fb8f 	bl	80005f8 <__aeabi_dmul>
 800deda:	4602      	mov	r2, r0
 800dedc:	460b      	mov	r3, r1
 800dede:	4640      	mov	r0, r8
 800dee0:	4649      	mov	r1, r9
 800dee2:	f7f2 f9d1 	bl	8000288 <__aeabi_dsub>
 800dee6:	4604      	mov	r4, r0
 800dee8:	460d      	mov	r5, r1
 800deea:	4602      	mov	r2, r0
 800deec:	460b      	mov	r3, r1
 800deee:	4640      	mov	r0, r8
 800def0:	4649      	mov	r1, r9
 800def2:	f7f2 fb81 	bl	80005f8 <__aeabi_dmul>
 800def6:	2200      	movs	r2, #0
 800def8:	ec41 0b19 	vmov	d9, r0, r1
 800defc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df00:	4620      	mov	r0, r4
 800df02:	4629      	mov	r1, r5
 800df04:	f7f2 f9c0 	bl	8000288 <__aeabi_dsub>
 800df08:	4602      	mov	r2, r0
 800df0a:	460b      	mov	r3, r1
 800df0c:	ec51 0b19 	vmov	r0, r1, d9
 800df10:	f7f2 fc9c 	bl	800084c <__aeabi_ddiv>
 800df14:	4632      	mov	r2, r6
 800df16:	4604      	mov	r4, r0
 800df18:	460d      	mov	r5, r1
 800df1a:	463b      	mov	r3, r7
 800df1c:	4640      	mov	r0, r8
 800df1e:	4649      	mov	r1, r9
 800df20:	f7f2 fb6a 	bl	80005f8 <__aeabi_dmul>
 800df24:	4632      	mov	r2, r6
 800df26:	463b      	mov	r3, r7
 800df28:	f7f2 f9b0 	bl	800028c <__adddf3>
 800df2c:	4602      	mov	r2, r0
 800df2e:	460b      	mov	r3, r1
 800df30:	4620      	mov	r0, r4
 800df32:	4629      	mov	r1, r5
 800df34:	f7f2 f9a8 	bl	8000288 <__aeabi_dsub>
 800df38:	4642      	mov	r2, r8
 800df3a:	464b      	mov	r3, r9
 800df3c:	f7f2 f9a4 	bl	8000288 <__aeabi_dsub>
 800df40:	460b      	mov	r3, r1
 800df42:	4602      	mov	r2, r0
 800df44:	493a      	ldr	r1, [pc, #232]	; (800e030 <__ieee754_pow+0xa48>)
 800df46:	2000      	movs	r0, #0
 800df48:	f7f2 f99e 	bl	8000288 <__aeabi_dsub>
 800df4c:	ec41 0b10 	vmov	d0, r0, r1
 800df50:	ee10 3a90 	vmov	r3, s1
 800df54:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800df58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df5c:	da2b      	bge.n	800dfb6 <__ieee754_pow+0x9ce>
 800df5e:	4650      	mov	r0, sl
 800df60:	f000 f966 	bl	800e230 <scalbn>
 800df64:	ec51 0b10 	vmov	r0, r1, d0
 800df68:	ec53 2b18 	vmov	r2, r3, d8
 800df6c:	f7ff bbed 	b.w	800d74a <__ieee754_pow+0x162>
 800df70:	4b30      	ldr	r3, [pc, #192]	; (800e034 <__ieee754_pow+0xa4c>)
 800df72:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800df76:	429e      	cmp	r6, r3
 800df78:	f77f af0c 	ble.w	800dd94 <__ieee754_pow+0x7ac>
 800df7c:	4b2e      	ldr	r3, [pc, #184]	; (800e038 <__ieee754_pow+0xa50>)
 800df7e:	440b      	add	r3, r1
 800df80:	4303      	orrs	r3, r0
 800df82:	d009      	beq.n	800df98 <__ieee754_pow+0x9b0>
 800df84:	ec51 0b18 	vmov	r0, r1, d8
 800df88:	2200      	movs	r2, #0
 800df8a:	2300      	movs	r3, #0
 800df8c:	f7f2 fda6 	bl	8000adc <__aeabi_dcmplt>
 800df90:	3800      	subs	r0, #0
 800df92:	bf18      	it	ne
 800df94:	2001      	movne	r0, #1
 800df96:	e447      	b.n	800d828 <__ieee754_pow+0x240>
 800df98:	4622      	mov	r2, r4
 800df9a:	462b      	mov	r3, r5
 800df9c:	f7f2 f974 	bl	8000288 <__aeabi_dsub>
 800dfa0:	4642      	mov	r2, r8
 800dfa2:	464b      	mov	r3, r9
 800dfa4:	f7f2 fdae 	bl	8000b04 <__aeabi_dcmpge>
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	f43f aef3 	beq.w	800dd94 <__ieee754_pow+0x7ac>
 800dfae:	e7e9      	b.n	800df84 <__ieee754_pow+0x99c>
 800dfb0:	f04f 0a00 	mov.w	sl, #0
 800dfb4:	e71a      	b.n	800ddec <__ieee754_pow+0x804>
 800dfb6:	ec51 0b10 	vmov	r0, r1, d0
 800dfba:	4619      	mov	r1, r3
 800dfbc:	e7d4      	b.n	800df68 <__ieee754_pow+0x980>
 800dfbe:	491c      	ldr	r1, [pc, #112]	; (800e030 <__ieee754_pow+0xa48>)
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	f7ff bb30 	b.w	800d626 <__ieee754_pow+0x3e>
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	2100      	movs	r1, #0
 800dfca:	f7ff bb2c 	b.w	800d626 <__ieee754_pow+0x3e>
 800dfce:	4630      	mov	r0, r6
 800dfd0:	4639      	mov	r1, r7
 800dfd2:	f7ff bb28 	b.w	800d626 <__ieee754_pow+0x3e>
 800dfd6:	9204      	str	r2, [sp, #16]
 800dfd8:	f7ff bb7a 	b.w	800d6d0 <__ieee754_pow+0xe8>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	f7ff bb64 	b.w	800d6aa <__ieee754_pow+0xc2>
 800dfe2:	bf00      	nop
 800dfe4:	f3af 8000 	nop.w
 800dfe8:	00000000 	.word	0x00000000
 800dfec:	3fe62e43 	.word	0x3fe62e43
 800dff0:	fefa39ef 	.word	0xfefa39ef
 800dff4:	3fe62e42 	.word	0x3fe62e42
 800dff8:	0ca86c39 	.word	0x0ca86c39
 800dffc:	be205c61 	.word	0xbe205c61
 800e000:	72bea4d0 	.word	0x72bea4d0
 800e004:	3e663769 	.word	0x3e663769
 800e008:	c5d26bf1 	.word	0xc5d26bf1
 800e00c:	3ebbbd41 	.word	0x3ebbbd41
 800e010:	af25de2c 	.word	0xaf25de2c
 800e014:	3f11566a 	.word	0x3f11566a
 800e018:	16bebd93 	.word	0x16bebd93
 800e01c:	3f66c16c 	.word	0x3f66c16c
 800e020:	5555553e 	.word	0x5555553e
 800e024:	3fc55555 	.word	0x3fc55555
 800e028:	3fe00000 	.word	0x3fe00000
 800e02c:	000fffff 	.word	0x000fffff
 800e030:	3ff00000 	.word	0x3ff00000
 800e034:	4090cbff 	.word	0x4090cbff
 800e038:	3f6f3400 	.word	0x3f6f3400
 800e03c:	652b82fe 	.word	0x652b82fe
 800e040:	3c971547 	.word	0x3c971547

0800e044 <__ieee754_sqrt>:
 800e044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e048:	ec55 4b10 	vmov	r4, r5, d0
 800e04c:	4e55      	ldr	r6, [pc, #340]	; (800e1a4 <__ieee754_sqrt+0x160>)
 800e04e:	43ae      	bics	r6, r5
 800e050:	ee10 0a10 	vmov	r0, s0
 800e054:	ee10 3a10 	vmov	r3, s0
 800e058:	462a      	mov	r2, r5
 800e05a:	4629      	mov	r1, r5
 800e05c:	d110      	bne.n	800e080 <__ieee754_sqrt+0x3c>
 800e05e:	ee10 2a10 	vmov	r2, s0
 800e062:	462b      	mov	r3, r5
 800e064:	f7f2 fac8 	bl	80005f8 <__aeabi_dmul>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	4620      	mov	r0, r4
 800e06e:	4629      	mov	r1, r5
 800e070:	f7f2 f90c 	bl	800028c <__adddf3>
 800e074:	4604      	mov	r4, r0
 800e076:	460d      	mov	r5, r1
 800e078:	ec45 4b10 	vmov	d0, r4, r5
 800e07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e080:	2d00      	cmp	r5, #0
 800e082:	dc10      	bgt.n	800e0a6 <__ieee754_sqrt+0x62>
 800e084:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e088:	4330      	orrs	r0, r6
 800e08a:	d0f5      	beq.n	800e078 <__ieee754_sqrt+0x34>
 800e08c:	b15d      	cbz	r5, 800e0a6 <__ieee754_sqrt+0x62>
 800e08e:	ee10 2a10 	vmov	r2, s0
 800e092:	462b      	mov	r3, r5
 800e094:	ee10 0a10 	vmov	r0, s0
 800e098:	f7f2 f8f6 	bl	8000288 <__aeabi_dsub>
 800e09c:	4602      	mov	r2, r0
 800e09e:	460b      	mov	r3, r1
 800e0a0:	f7f2 fbd4 	bl	800084c <__aeabi_ddiv>
 800e0a4:	e7e6      	b.n	800e074 <__ieee754_sqrt+0x30>
 800e0a6:	1512      	asrs	r2, r2, #20
 800e0a8:	d074      	beq.n	800e194 <__ieee754_sqrt+0x150>
 800e0aa:	07d4      	lsls	r4, r2, #31
 800e0ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800e0b0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800e0b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800e0b8:	bf5e      	ittt	pl
 800e0ba:	0fda      	lsrpl	r2, r3, #31
 800e0bc:	005b      	lslpl	r3, r3, #1
 800e0be:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800e0c2:	2400      	movs	r4, #0
 800e0c4:	0fda      	lsrs	r2, r3, #31
 800e0c6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800e0ca:	107f      	asrs	r7, r7, #1
 800e0cc:	005b      	lsls	r3, r3, #1
 800e0ce:	2516      	movs	r5, #22
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e0d6:	1886      	adds	r6, r0, r2
 800e0d8:	428e      	cmp	r6, r1
 800e0da:	bfde      	ittt	le
 800e0dc:	1b89      	suble	r1, r1, r6
 800e0de:	18b0      	addle	r0, r6, r2
 800e0e0:	18a4      	addle	r4, r4, r2
 800e0e2:	0049      	lsls	r1, r1, #1
 800e0e4:	3d01      	subs	r5, #1
 800e0e6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800e0ea:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e0ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e0f2:	d1f0      	bne.n	800e0d6 <__ieee754_sqrt+0x92>
 800e0f4:	462a      	mov	r2, r5
 800e0f6:	f04f 0e20 	mov.w	lr, #32
 800e0fa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e0fe:	4281      	cmp	r1, r0
 800e100:	eb06 0c05 	add.w	ip, r6, r5
 800e104:	dc02      	bgt.n	800e10c <__ieee754_sqrt+0xc8>
 800e106:	d113      	bne.n	800e130 <__ieee754_sqrt+0xec>
 800e108:	459c      	cmp	ip, r3
 800e10a:	d811      	bhi.n	800e130 <__ieee754_sqrt+0xec>
 800e10c:	f1bc 0f00 	cmp.w	ip, #0
 800e110:	eb0c 0506 	add.w	r5, ip, r6
 800e114:	da43      	bge.n	800e19e <__ieee754_sqrt+0x15a>
 800e116:	2d00      	cmp	r5, #0
 800e118:	db41      	blt.n	800e19e <__ieee754_sqrt+0x15a>
 800e11a:	f100 0801 	add.w	r8, r0, #1
 800e11e:	1a09      	subs	r1, r1, r0
 800e120:	459c      	cmp	ip, r3
 800e122:	bf88      	it	hi
 800e124:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800e128:	eba3 030c 	sub.w	r3, r3, ip
 800e12c:	4432      	add	r2, r6
 800e12e:	4640      	mov	r0, r8
 800e130:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e134:	f1be 0e01 	subs.w	lr, lr, #1
 800e138:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e13c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e140:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e144:	d1db      	bne.n	800e0fe <__ieee754_sqrt+0xba>
 800e146:	430b      	orrs	r3, r1
 800e148:	d006      	beq.n	800e158 <__ieee754_sqrt+0x114>
 800e14a:	1c50      	adds	r0, r2, #1
 800e14c:	bf13      	iteet	ne
 800e14e:	3201      	addne	r2, #1
 800e150:	3401      	addeq	r4, #1
 800e152:	4672      	moveq	r2, lr
 800e154:	f022 0201 	bicne.w	r2, r2, #1
 800e158:	1063      	asrs	r3, r4, #1
 800e15a:	0852      	lsrs	r2, r2, #1
 800e15c:	07e1      	lsls	r1, r4, #31
 800e15e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e162:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e166:	bf48      	it	mi
 800e168:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e16c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e170:	4614      	mov	r4, r2
 800e172:	e781      	b.n	800e078 <__ieee754_sqrt+0x34>
 800e174:	0ad9      	lsrs	r1, r3, #11
 800e176:	3815      	subs	r0, #21
 800e178:	055b      	lsls	r3, r3, #21
 800e17a:	2900      	cmp	r1, #0
 800e17c:	d0fa      	beq.n	800e174 <__ieee754_sqrt+0x130>
 800e17e:	02cd      	lsls	r5, r1, #11
 800e180:	d50a      	bpl.n	800e198 <__ieee754_sqrt+0x154>
 800e182:	f1c2 0420 	rsb	r4, r2, #32
 800e186:	fa23 f404 	lsr.w	r4, r3, r4
 800e18a:	1e55      	subs	r5, r2, #1
 800e18c:	4093      	lsls	r3, r2
 800e18e:	4321      	orrs	r1, r4
 800e190:	1b42      	subs	r2, r0, r5
 800e192:	e78a      	b.n	800e0aa <__ieee754_sqrt+0x66>
 800e194:	4610      	mov	r0, r2
 800e196:	e7f0      	b.n	800e17a <__ieee754_sqrt+0x136>
 800e198:	0049      	lsls	r1, r1, #1
 800e19a:	3201      	adds	r2, #1
 800e19c:	e7ef      	b.n	800e17e <__ieee754_sqrt+0x13a>
 800e19e:	4680      	mov	r8, r0
 800e1a0:	e7bd      	b.n	800e11e <__ieee754_sqrt+0xda>
 800e1a2:	bf00      	nop
 800e1a4:	7ff00000 	.word	0x7ff00000

0800e1a8 <with_errno>:
 800e1a8:	b570      	push	{r4, r5, r6, lr}
 800e1aa:	4604      	mov	r4, r0
 800e1ac:	460d      	mov	r5, r1
 800e1ae:	4616      	mov	r6, r2
 800e1b0:	f7fb ffd4 	bl	800a15c <__errno>
 800e1b4:	4629      	mov	r1, r5
 800e1b6:	6006      	str	r6, [r0, #0]
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	bd70      	pop	{r4, r5, r6, pc}

0800e1bc <xflow>:
 800e1bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1be:	4614      	mov	r4, r2
 800e1c0:	461d      	mov	r5, r3
 800e1c2:	b108      	cbz	r0, 800e1c8 <xflow+0xc>
 800e1c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e1c8:	e9cd 2300 	strd	r2, r3, [sp]
 800e1cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	4629      	mov	r1, r5
 800e1d4:	f7f2 fa10 	bl	80005f8 <__aeabi_dmul>
 800e1d8:	2222      	movs	r2, #34	; 0x22
 800e1da:	b003      	add	sp, #12
 800e1dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1e0:	f7ff bfe2 	b.w	800e1a8 <with_errno>

0800e1e4 <__math_uflow>:
 800e1e4:	b508      	push	{r3, lr}
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1ec:	f7ff ffe6 	bl	800e1bc <xflow>
 800e1f0:	ec41 0b10 	vmov	d0, r0, r1
 800e1f4:	bd08      	pop	{r3, pc}

0800e1f6 <__math_oflow>:
 800e1f6:	b508      	push	{r3, lr}
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e1fe:	f7ff ffdd 	bl	800e1bc <xflow>
 800e202:	ec41 0b10 	vmov	d0, r0, r1
 800e206:	bd08      	pop	{r3, pc}

0800e208 <fabs>:
 800e208:	ec51 0b10 	vmov	r0, r1, d0
 800e20c:	ee10 2a10 	vmov	r2, s0
 800e210:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e214:	ec43 2b10 	vmov	d0, r2, r3
 800e218:	4770      	bx	lr

0800e21a <finite>:
 800e21a:	b082      	sub	sp, #8
 800e21c:	ed8d 0b00 	vstr	d0, [sp]
 800e220:	9801      	ldr	r0, [sp, #4]
 800e222:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e226:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e22a:	0fc0      	lsrs	r0, r0, #31
 800e22c:	b002      	add	sp, #8
 800e22e:	4770      	bx	lr

0800e230 <scalbn>:
 800e230:	b570      	push	{r4, r5, r6, lr}
 800e232:	ec55 4b10 	vmov	r4, r5, d0
 800e236:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e23a:	4606      	mov	r6, r0
 800e23c:	462b      	mov	r3, r5
 800e23e:	b99a      	cbnz	r2, 800e268 <scalbn+0x38>
 800e240:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e244:	4323      	orrs	r3, r4
 800e246:	d036      	beq.n	800e2b6 <scalbn+0x86>
 800e248:	4b39      	ldr	r3, [pc, #228]	; (800e330 <scalbn+0x100>)
 800e24a:	4629      	mov	r1, r5
 800e24c:	ee10 0a10 	vmov	r0, s0
 800e250:	2200      	movs	r2, #0
 800e252:	f7f2 f9d1 	bl	80005f8 <__aeabi_dmul>
 800e256:	4b37      	ldr	r3, [pc, #220]	; (800e334 <scalbn+0x104>)
 800e258:	429e      	cmp	r6, r3
 800e25a:	4604      	mov	r4, r0
 800e25c:	460d      	mov	r5, r1
 800e25e:	da10      	bge.n	800e282 <scalbn+0x52>
 800e260:	a32b      	add	r3, pc, #172	; (adr r3, 800e310 <scalbn+0xe0>)
 800e262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e266:	e03a      	b.n	800e2de <scalbn+0xae>
 800e268:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e26c:	428a      	cmp	r2, r1
 800e26e:	d10c      	bne.n	800e28a <scalbn+0x5a>
 800e270:	ee10 2a10 	vmov	r2, s0
 800e274:	4620      	mov	r0, r4
 800e276:	4629      	mov	r1, r5
 800e278:	f7f2 f808 	bl	800028c <__adddf3>
 800e27c:	4604      	mov	r4, r0
 800e27e:	460d      	mov	r5, r1
 800e280:	e019      	b.n	800e2b6 <scalbn+0x86>
 800e282:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e286:	460b      	mov	r3, r1
 800e288:	3a36      	subs	r2, #54	; 0x36
 800e28a:	4432      	add	r2, r6
 800e28c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e290:	428a      	cmp	r2, r1
 800e292:	dd08      	ble.n	800e2a6 <scalbn+0x76>
 800e294:	2d00      	cmp	r5, #0
 800e296:	a120      	add	r1, pc, #128	; (adr r1, 800e318 <scalbn+0xe8>)
 800e298:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e29c:	da1c      	bge.n	800e2d8 <scalbn+0xa8>
 800e29e:	a120      	add	r1, pc, #128	; (adr r1, 800e320 <scalbn+0xf0>)
 800e2a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2a4:	e018      	b.n	800e2d8 <scalbn+0xa8>
 800e2a6:	2a00      	cmp	r2, #0
 800e2a8:	dd08      	ble.n	800e2bc <scalbn+0x8c>
 800e2aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e2ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e2b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e2b6:	ec45 4b10 	vmov	d0, r4, r5
 800e2ba:	bd70      	pop	{r4, r5, r6, pc}
 800e2bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e2c0:	da19      	bge.n	800e2f6 <scalbn+0xc6>
 800e2c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e2c6:	429e      	cmp	r6, r3
 800e2c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e2cc:	dd0a      	ble.n	800e2e4 <scalbn+0xb4>
 800e2ce:	a112      	add	r1, pc, #72	; (adr r1, 800e318 <scalbn+0xe8>)
 800e2d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d1e2      	bne.n	800e29e <scalbn+0x6e>
 800e2d8:	a30f      	add	r3, pc, #60	; (adr r3, 800e318 <scalbn+0xe8>)
 800e2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2de:	f7f2 f98b 	bl	80005f8 <__aeabi_dmul>
 800e2e2:	e7cb      	b.n	800e27c <scalbn+0x4c>
 800e2e4:	a10a      	add	r1, pc, #40	; (adr r1, 800e310 <scalbn+0xe0>)
 800e2e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d0b8      	beq.n	800e260 <scalbn+0x30>
 800e2ee:	a10e      	add	r1, pc, #56	; (adr r1, 800e328 <scalbn+0xf8>)
 800e2f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2f4:	e7b4      	b.n	800e260 <scalbn+0x30>
 800e2f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e2fa:	3236      	adds	r2, #54	; 0x36
 800e2fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e300:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e304:	4620      	mov	r0, r4
 800e306:	4b0c      	ldr	r3, [pc, #48]	; (800e338 <scalbn+0x108>)
 800e308:	2200      	movs	r2, #0
 800e30a:	e7e8      	b.n	800e2de <scalbn+0xae>
 800e30c:	f3af 8000 	nop.w
 800e310:	c2f8f359 	.word	0xc2f8f359
 800e314:	01a56e1f 	.word	0x01a56e1f
 800e318:	8800759c 	.word	0x8800759c
 800e31c:	7e37e43c 	.word	0x7e37e43c
 800e320:	8800759c 	.word	0x8800759c
 800e324:	fe37e43c 	.word	0xfe37e43c
 800e328:	c2f8f359 	.word	0xc2f8f359
 800e32c:	81a56e1f 	.word	0x81a56e1f
 800e330:	43500000 	.word	0x43500000
 800e334:	ffff3cb0 	.word	0xffff3cb0
 800e338:	3c900000 	.word	0x3c900000

0800e33c <_init>:
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33e:	bf00      	nop
 800e340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e342:	bc08      	pop	{r3}
 800e344:	469e      	mov	lr, r3
 800e346:	4770      	bx	lr

0800e348 <_fini>:
 800e348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34a:	bf00      	nop
 800e34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e34e:	bc08      	pop	{r3}
 800e350:	469e      	mov	lr, r3
 800e352:	4770      	bx	lr
